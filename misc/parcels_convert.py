#!/usr/bin/python

# Copyright Brian May 2011
#
#
# The main ideas are:
#   - consolidate hundreds of python scripts
#   - do things only one or two ways, i.e. re-use best practices
#   - compartmentalize / modularize processing
#   - Issue SQL statements directly from python
#   - provide for more flow control, error handling, error & status reporting, etc.
#
# desoto-2009-qtr4-imapp tsarting point?
#


# Import needed modules
import sys,os,fileinput,string,math,psycopg2,io,datetime
import psycopg2.extras, smtplib, textwrap


# ----------------------------------- BEGIN FUNCTIONS -----------------------------------

#----------------------------------------------------
# strip unwanted junk from field
#----------------------------------------------------
def strip_chars(mystring):
    try:
        #print "mystring: ", mystring
        mystring = mystring.replace('\n','')
        mystring = mystring.replace('\r','')
        mystring = mystring.replace('\t','')
        mystring = mystring.replace('&nbsp;','')
        mystring = mystring.replace('      ',' ')
        mystring = mystring.replace('   ',' ')
        mystring = mystring.replace('  ',' ')
        mystring = mystring.strip()
        #print 'YO'
        return mystring
    except:
        #print 'HEY'
        return ''

#----------------------------------------------------
# CLEAN DATES
# - make sure dates are cleanly formatted
#----------------------------------------------------
def clean_dates(mystring):
    try:
        if (mystring == '00-00-0000') :
            mystring = ''

        if (mystring[0:5] == '00-01') :
            mystring = '01-01-' + mystring[6:10]

        if (mystring[0:5] == '04-31') :
            mystring = '04-30-' + mystring[6:10]

        if (mystring[0:5] == '06-31') :
            mystring = '06-30-' + mystring[6:10]

        if (mystring[0:5] == '09-31') :
            mystring = '09-30-' + mystring[6:10]

        if (mystring[0:5] == '11-31') :
            mystring = '11-30-' + mystring[6:10]

        if (mystring[0:5] == '02-29') :
            mystring = '02-27-' + mystring[6:10]             

        return mystring
    except:
        print('PROBLEM with CLEAN_DATES input string: ',mystring)
        return ''

#----------------------------------------------------
# SPLIT OWNER CITY/STATE/ZIPCODE
#----------------------------------------------------
def split_address(address):

    debug = False
    
    address_items = address.split(' ')
    if (debug) : print("address.split: ", address_items)

    # why is this here? If the last address item is empty, delete it?
    # we should not have an empty last item
    if address_items[-1] == '' : del address_items[-1]
    
    orec = address_items[-1]
    if (debug) : print("orec: ", orec)
    
    #if len(orec) == 5 or len(orec) == 9 and orec.isdigit():
    # if first 5 digits of last array item is a number, we have an address with a zipcode
    
    if orec[0:5].isdigit():

        # get the last address_item as zipcode, then delete it from the array        
        zipcode = address_items[-1]
        #y = zipcode[0:5]
        #zipcode = y    
        del address_items[-1]

        # now the last item should be state, get it and delete it        
        state = address_items[-1]   
        del address_items[-1]

        # now the last item should be city, get it and delete it         
        city = ' '.join(address_items)
        city = city.replace(",","")
        
        if (debug) : print("city: ",city," state: ",state,"zipcode: ",zipcode)


    else :
        # last item first five chars is not a number
        # address_items could be just a city, or a city/state
        # for now - put everything in city
        zipcode = ''
        state = ''
        city = ' '.join(address_items)
        city = city.replace(",","")

        if (debug) : print("city: ",city," state: ",state,"zipcode: ",zipcode)        
        

    return city,state,zipcode


# =======================================================================================
# ARCHIVE PARCEL DATA
# - moves current parcel data to an archive directory
# - creates a new current directory
# does not attempt to delete anything
# =======================================================================================
def archive_parcel_data(county, date_stamp) :

    print("----------------------------------------------------------------------")
    print("  FUNCTION archive_parcel_data(county, date_stamp)")
    print("----------------------------------------------------------------------")
    
    #-----------------------------------------------------------------------------------------
    # Move data to archive dir
    #-----------------------------------------------------------------------------------------

    county = county.lower()
    
    path_dest = '/srv/mapwise_dev/county/' + county + '/processing/database/' + date_stamp  

    print(path_dest)
    print(os.path.exists(path_dest))
    
    if not os.path.exists(path_dest) :

        # create destination folder
        mycmd = 'mkdir ' + path_dest
        os.system(mycmd)
        
        # move existing files
        mycmd = 'mv /srv/mapwise_dev/county/' + county + '/processing/database/current/source_data ' + path_dest
        os.system(mycmd)
        #print mycmd

        # create source_data directory    
        mycmd = 'mkdir /srv/mapwise_dev/county/' + county + '/processing/database/current/source_data'
        os.system(mycmd)
        #print mycmd
    else :
        print("Path exists: ", path_dest)


def drop_temp_tables(state,county) :
    """Drop temporary tables used in the process, but do not recreate them

    Keyword arguments:
    county -- the county

    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION drop_temp_tables(state,county)")
    print("----------------------------------------------------------------------")

    
    cnty = county.upper()
    if (cnty == 'MIAMI-DADE') :
        county = 'miami_dade'
        
    state_upper = state.upper()
    state_lower = state.lower()
    state = state.lower()
    
    print("state_upper(): ",state_upper)

    mycmd = ''.join([pg_psql,' -c "drop table parcels_template_',state,'_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join([pg_psql,' -c "drop table parcels_template_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',state,'_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',state,'_',county,'_temp"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',state,'_',county,'_shp_temp"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE saunders_agg_owner_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE saunders_agg_owner_single_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE saunders_agg_sales_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',state,'_',county,'_pin_temp"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_flood_zone_',county,'_dfirm"'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    #mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_flood_zone_',county,'_dfirm2"'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    if state_upper in ['GA'] : 
        print("Running /srv/mapwise_dev/county/a_GA_attom/sql_files/drop_raw_tables.sql") 
        sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/drop_raw_tables.sql"
    else :
        sql_file = "/srv/mapwise_dev/county/" + county + "/processing/database/sql_files/drop_raw_tables.sql"
        
    print('SQL FILE: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    os.system(mycmd)      
    
def drop_temp_tables_OLD(county) :
    """Drop temporary tables used in the process, but do not recreate them

    Keyword arguments:
    county -- the county

    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION drop_temp_tables(county)")
    print("----------------------------------------------------------------------")
    
    cnty = county.upper()
    if (cnty == 'MIAMI-DADE') :
        county = 'miami_dade'

    mycmd = ''.join([pg_psql,' -c "drop table parcels_template_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',county,'_temp"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',county,'_shp_temp"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE saunders_agg_owner_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE saunders_agg_owner_single_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join([pg_psql,' -c "DROP TABLE saunders_agg_sales_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_',county,'_pin_temp"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_flood_zone_',county,'_dfirm"'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    #mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_flood_zone_',county,'_dfirm2"'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    sql_file = "/srv/mapwise_dev/county/" + county + "/processing/database/sql_files/drop_raw_tables.sql"
    print('SQL FILE: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    os.system(mycmd)      
    
    
def drop_temp_tables_fdor(county) :
    """Drop temporary tables used in the process, but do not recreate them

    Keyword arguments:
    county -- the county

    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION drop_temp_tables(county)")
    print("----------------------------------------------------------------------")
    
    cnty = county.upper()
    if (cnty == 'MIAMI-DADE') :
        county = 'miami_dade'

    mycmd = ''.join([pg_psql,' -c "drop table parcels_',county,'_fdor"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join([pg_psql,' -c "drop table raw_',county,'_parcels_fdor"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join([pg_psql,' -c "drop table raw_',county,'_parcels2_fdor"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
 
    
# =======================================================================================
#  DROP and RECREATE EMPTY TABLES
# - the same base tables are re-created each time
# - exceptions can be added here as well
# - INPUT = none
# - OUTPUT = drop parcels_template_<county>, parcels_<county>, create parcels_template_<county>
# =======================================================================================
def drop_tables(county,state) :
    """Drop any previous tables used in the process.

    Keyword arguments:
    county -- the county

    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION drop_tables(state,county)")
    print("----------------------------------------------------------------------")

    
    cnty = county.upper()
    if (cnty == 'MIAMI-DADE') :
        county = 'miami_dade'
        
    state_upper = state.upper()
    state_lower = state.lower()
    state = state.lower()
    
    print("state_upper(): ",state_upper)
    
    cnty = county.upper()
    if (cnty == 'MIAMI-DADE') :
        county = 'miami_dade'
    
    # OK if this run when doing GA
    mycmd = ''.join([pg_psql,' -c "drop table parcels_template_fl_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # Correctly drops GA table when doing GA
    mycmd = ''.join([pg_psql,' -c "drop table parcels_template_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # OK if this run when doing GA
    mycmd = ''.join([pg_psql,' -c "DROP TABLE parcels_fl_',county,'"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # Create needed tables
    # old method - using individual SQL template file by county
    #mycmd = ''.join(['psql -d postgis -U postgres -f ',pathTopDir,'\sql_files\parcels_template_',county,'.sql'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # new method - create it inside python
    print('Executing: create_parcels_template(county)')
    create_parcels_template(county)

    if state_upper in ['GA'] : 
        print("Running /srv/mapwise_dev/county/a_GA_attom/sql_files/drop_raw_tables.sql") 
        sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/drop_raw_tables.sql"
    else :
        sql_file = "/srv/mapwise_dev/county/" + county + "/processing/database/sql_files/drop_raw_tables.sql"


    #sql_file = "/srv/mapwise_dev/county/" + county + "/processing/database/sql_files/drop_raw_tables.sql"
    print('SQL FILE: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    os.system(mycmd)        

# =======================================================================================
#  CREATE PARCELS TEMPLATE TABLE for a county
# =======================================================================================
def create_parcels_template(county) :

    print("----------------------------------------------------------------------")
    print("  FUNCTION create_parcels_template(county)")
    print("----------------------------------------------------------------------")
    
    cnty = county.upper()
    if (cnty == 'MIAMI-DADE') :
        county = 'miami_dade'
        
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    sql = """CREATE TABLE parcels_template_""" + county.lower() + """
    (
        s_section smallint,
        s_township text,
        s_range text,
        subdiv_id text,
        subdiv_nm text,
        subdiv_nm2 text,
        block_pin text,
        lot_pin text,
        block_legal text,
        lot_legal text,
        fips text,
        pin_geom text,
        pin text,
        pin_clean text,
        pin2 text,
        pin2_clean text,
        altkey text,
        altkey_clean text,
        upin text,
        pin_fdor text,
        acres_deed double precision,
        acres_gis double precision,
        condo text,
        condo_method text,
        condo_key text,
        name_misc text,
        owner_occupied text,
        foreign_owner text,
        o_name1 text,
        o_name2 text,
        o_name3 text,
        o_address1 text,
        o_address2 text,
        o_address3 text,
        o_city text,
        o_state text,
        o_country text,
        o_zipcode text,
        o_zipcode4 text,
        s_number text,
        s_pdir text,
        s_name text,
        s_type text,
        s_sdir text,
        s_unit text,
        s_address text,
        s_city text,
        s_state text,
        s_zipcode text,
        s_zipcode4 text,
        sale1_amt bigint,
        sale1_year smallint,
        sale1_date text,
        sale1_date_date date,
        sale1_vac text,
        sale1_typ text,
        sale1_qual text,
        sale1_multi text,
        sale1_bk text,
        sale1_pg text,
        sale1_docnum text,
        sale1_grantor text,
        sale1_grantee text,
        sale2_amt bigint,
        sale2_year smallint,
        sale2_date text,
        sale2_date_date date,
        sale2_vac text,
        sale2_typ text,
        sale2_qual text,
        sale2_multi text,
        sale2_bk text,
        sale2_pg text,
        sale2_docnum text,
        sale2_grantor text,
        sale2_grantee text,
        sale3_amt bigint,
        sale3_year smallint,
        sale3_date text,
        sale3_date_date date,
        sale3_vac text,
        sale3_typ text,
        sale3_qual text,
        sale3_multi text,
        sale3_bk text,
        sale3_pg text,
        sale3_docnum text,
        sale3_grantor text,
        sale3_grantee text,
        sale4_amt bigint,
        sale4_year smallint,
        sale4_date text,
        sale4_date_date date,
        sale4_vac text,
        sale4_typ text,
        sale4_qual text,
        sale4_multi text,
        sale4_bk text,
        sale4_pg text,
        sale4_docnum text,
        sale4_grantor text,
        sale4_grantee text,
        sale5_amt bigint,
        sale5_year smallint,
        sale5_date text,
        sale5_date_date date,
        sale5_vac text,
        sale5_typ text,
        sale5_qual text,
        sale5_multi text,
        sale5_bk text,
        sale5_pg text,
        sale5_docnum text,
        sale5_grantor text,
        sale5_grantee text,
        mrkt_bld bigint,
        mrkt_impr integer,
        mrkt_lnd bigint,
        mrkt_ag integer,
        mrkt_tot bigint,
        assd_tot bigint,
        exempt_tot bigint,
        taxable_tot bigint,
        homestead text,
        tax_amt1 numeric(10,2),
        tax_amt2 numeric(10,2),
        tax_amt3 numeric(10,2),
        num_bldg smallint,
        res_units smallint,
        sqft_htd integer,
        sqft_tot integer,
        sqft_adj integer,
        stories smallint,
        yrblt_act smallint,
        yrblt_eff smallint,
        num_bed smallint,
        num_bath smallint,
        num_bath_half smallint,
        luse text,
        luse_d text,
        lusedor text,
        lusedor_d text,
        zoning text,
        legal_full text,
        legal1 text,
        legal2 text,
        legal3 text,
        legal4 text,
        legal5 text,
        legal6 text,
        d_date text,
        d_county text,
        sale1q_amt integer,
        sale1q_year smallint,
        sale1q_date text,
        sale1q_date_date date   
    )
    WITH (
      OIDS=FALSE
    );
    """

    #print sql
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()



# =======================================================================================
# FDOR DATA
# - process raw FDOR data and get it into parcels_template_<county>
# - county is then ready to go straight into production OR is ready to be supplemented with additional sales info
# =======================================================================================
def process_raw_fdor(county) :

    print("----------------------------------------------------------------------")
    print("  FUNCTION process_raw_fdor(county)")
    print("----------------------------------------------------------------------")
    
    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    if (county_upper == 'MIAMI_DADE') :
        county_upper = 'MIAMI-DADE'

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    #cursor = connection.cursor()

    # arg to cursor allows selection by column name
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

    
    #-----------------------------------------------------------------------------------------
    # Get FDOR COUNTY CODE FROM fdor_code_county table
    #-----------------------------------------------------------------------------------------    
    sql = """SELECT * FROM fdor_code_county WHERE d_county = '""" + county_upper + """';  """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # initialize variables that have info about the SHP from parcel_shp_fields
    rows = cursor.fetchall()
    for row in rows:
        print("COUNTY = ", row['d_county'])
        fdor_co_no = row['co_no']

    #-----------------------------------------------------------------------------------------
    # Get FDOR file names FROM parcels_fdor_raw_files table
    #-----------------------------------------------------------------------------------------    
    sql = """SELECT * FROM parcels_fdor_raw_files WHERE county = '""" + county_upper + """';  """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # initialize variables that have info about the SHP from parcel_shp_fields
    rows = cursor.fetchall()
    for row in rows:
        print("COUNTY = ", row['county'])
        file_2008 = row['file_2008']
        file_2009 = row['file_2009']
        file_2010 = row['file_2010']
        file_2011 = row['file_2011']
        file_2012 = row['file_2012']
        file_2013 = row['file_2013']
        file_2014 = row['file_2014']
        file_2015 = row['file_2015']
        file_2016 = row['file_2016']
        file_2017 = row['file_2017']
        file_2018 = row['file_2018']
        file_2019 = row['file_2019']
        file_2020 = row['file_2020']
        file_2021 = row['file_2021']
        file_2022 = row['file_2022']
        file_2023 = row['file_2023_f']
        file_2024 = row['file_2024_f']
    
    #-----------------------------------------------------------------------------------------
    # Process older sales
    # For each FDOR year, create standardized sales files to load into postgres
    # e.g. L:\mapwise_dev\county\suwannee\processing\database\current\parcels_sales_2008
    # Once these are run once, except if its a preliminary file, the output files can be set to read only to save
    # processing time on larger counties and to eliminateissues if the source files dissapear
    #-----------------------------------------------------------------------------------------

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2008_sales.py """ + county_lower + """ """ + file_2008
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2009_sales.py """ + county_lower + """ """ + file_2009
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2010_sales.py """ + county_lower + """ """ + file_2010
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2011_sales.py """ + county_lower + """ """ + file_2011
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2012_sales.py """ + county_lower + """ """ + file_2012
    print(mycmd)
    os.system(mycmd)    

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2013_sales.py """ + county_lower + """ """ + file_2013
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2014_sales.py """ + county_lower + """ """ + file_2014
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2015_sales.py """ + county_lower + """ """ + file_2015
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2016_sales.py """ + county_lower + """ """ + file_2016
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2017_sales.py """ + county_lower + """ """ + file_2017
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2018_sales.py """ + county_lower + """ """ + file_2018
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2019_sales.py """ + county_lower + """ """ + file_2019
    print(mycmd)
    os.system(mycmd) 

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2020_sales.py """ + county_lower + """ """ + file_2020
    print(mycmd)
    os.system(mycmd) 

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2021_sales.py """ + county_lower + """ """ + file_2021
    print(mycmd)
    os.system(mycmd)  

    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2022_sales.py """ + county_lower + """ """ + file_2022
    print(mycmd)
    os.system(mycmd)    
    
    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2023_sales.py """ + county_lower + """ """ + file_2023
    print(mycmd)
    os.system(mycmd)
    
    mycmd = """/srv/tools/python/parcel_processing/a_FDOR/fdor_2024_sales.py """ + county_lower + """ """ + file_2024
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # INSERT raw fdor data into parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    # This SQL has a regex for creating pin_clean two (stripping out all potential extra characters)
    sql = """
        INSERT INTO parcels_template_""" + county_lower + """
        (lusedor, luse,
        mrkt_tot,
        mrkt_lnd,
        mrkt_ag,
        mrkt_impr,
        assd_tot,
        taxable_tot,
        homestead,
        num_bldg, res_units, yrblt_eff, yrblt_act,
        o_name1, o_address1, o_address2, o_city, o_state, o_zipcode,
        legal1, s_township, s_range, s_section,
        --s_number,
        s_address, s_city, s_zipcode,
        altkey, pin, pin_clean, pin_fdor
        )
        SELECT 
            dor_uc, pa_uc,
            jv,
            lnd_val,
            jv_class_use,
            spec_feat_val,
            av_nsd,
            tv_nsd,
            (COALESCE(exmpt_01,0) + COALESCE(exmpt_02,0)) as homestead,
            -- SUM(exmpt_01 + exmpt_02) as homestead,
            no_buldng, no_res_unts, eff_yr_blt, act_yr_blt,
            
            regexp_replace(own_name, '( ){1,}', ' ','g') as own_name,
            regexp_replace(own_addr1, '( ){1,}', ' ','g') as own_addr1,
            regexp_replace(own_addr2, '( ){1,}', ' ','g') as own_addr2,
            
            own_city, own_state, own_zipcd,
            
            s_legal, twn, rng, cast(sec as int),

            -- doing this will cause no record match if there is an issue with regexp_matches
            -- removing everything but first number            
            --regexp_matches(phy_addr1, '[0-9]+') as s_number,
            
            -- concat physical address fields with space and not lose any info plus remove extra white space
            regexp_replace(concat_ws(' ',phy_addr1,phy_addr2), '( ){1,}', ' ','g') as phy_addr1,
            
            phy_city, phy_zipcd,
            
            alt_key, -- for CItrus swap this out with the pin
            parcel_id,
            regexp_replace(parcel_id, '( ){1,}|(-){1,}|(\.){1,}','','g') as pin_clean,
            state_par_id
            FROM parcels_fdor_2024
            WHERE co_no = """ + str(fdor_co_no) + """;
        """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # UPDATE building sq ft - some are heated and some are adjusted (and some may be total)
    #-----------------------------------------------------------------------------------------
    # known to be heated
    print("\n\nHEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOO\n\n")
    if (county_upper in ['GADSDEN','HENDRY','LAKE','MARION','SUWANNEE']):
        sql = """
            UPDATE parcels_template_""" + county_lower + """ as p
            SET sqft_htd = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE p.pin = f.parcel_id AND f.co_no = """ + str(fdor_co_no) + """;
        """
    # 11/2017 - assume that its adjusted unless otherwise proven to be heated
    # known to be adjusted 'BAY','BRADFORD', 'DESOTO', 'FRANKLIN', 'MADISON', 'NASSAU', 'OKALOOSA', 'SANTA_ROSA', 'TAYLOR', 'UNION', 'WALTON'
    # this is problematic - not every county is going to play nice with having dashes removed
    elif (county_upper in ['HOLMES']):
        sql = """
            UPDATE parcels_template_""" + county_lower + """ as p
            SET sqft_adj = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE p.pin = f.parcel_id AND f.co_no = """ + str(fdor_co_no) + """;
        """        
    elif (county_upper in ['xx']):
        sql = """
            UPDATE parcels_template_""" + county_lower + """ as p
            SET sqft_adj = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE replace(p.pin,'-','') = f.parcel_id AND f.co_no = """ + str(fdor_co_no) + """;
        """    
    else:
        sql = """
            UPDATE parcels_template_""" + county_lower + """ as p
            SET sqft_adj = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE p.pin = f.parcel_id AND f.co_no = """ + str(fdor_co_no) + """;
        """    
    
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # update PIN if needed
    #-----------------------------------------------------------------------------------------
    if (county_upper in ['HAMILTON']):
        sql = """
            UPDATE parcels_template_""" + county_lower + """
            SET pin = substring(pin_clean from 1 for 4) || '-' || substring(pin_clean from 5 for 3)
            ;

        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update land use code
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_""" + county_lower + """
        SET lusedor = '0' || lusedor
        WHERE length(lusedor) = 1;
        
        UPDATE parcels_template_""" + county_lower + """
        SET lusedor = substring(lusedor,2,2)
        WHERE length(lusedor) = 3;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # update 4-digit land use code - luse has pa_uc in it at this point (which is last 2 digits of luse code from PA)
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_""" + county_lower + """
        SET luse = lusedor || luse
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # update s_number field
    #-----------------------------------------------------------------------------------------
    # extract first word, see if its a number, if so bingo
    sql = """
        UPDATE parcels_template_""" + county_lower + """
        SET s_number = split_part(s_address, ' ', 1)
        WHERE substr(s_address,1,1) ~ '[0-9]+' ;        
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # update mrkt_bld field
    # WARNING - 2014-01-14 make sure this is still relavant
    #-----------------------------------------------------------------------------------------
    # extract first word, see if its a number, if so bingo
    sql = """
        UPDATE parcels_template_""" + county_lower + """
        SET mrkt_bld = mrkt_tot - mrkt_lnd - mrkt_impr      
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------    
    # load sales data into pg tables
    # ISSUE - 2014-01-14 - do we need separate tables? They all have the same schema, right?
    # Might make troubleshooting easier the first time the fdor sales data is processed
    #-----------------------------------------------------------------------------------------
    sql = """
        TRUNCATE parcels_fdor_sales_2008_temp;
        TRUNCATE parcels_fdor_sales_2009_temp;
        TRUNCATE parcels_fdor_sales_2010_temp;
        TRUNCATE parcels_fdor_sales_2011_temp;
        TRUNCATE parcels_fdor_sales_2012_temp;
        TRUNCATE parcels_fdor_sales_2013_temp;
        TRUNCATE parcels_fdor_sales_2014_temp;
        TRUNCATE parcels_fdor_sales_2015_temp;
        TRUNCATE parcels_fdor_sales_2016_temp;
        TRUNCATE parcels_fdor_sales_2017_temp;
        TRUNCATE parcels_fdor_sales_2018_temp;
        TRUNCATE parcels_fdor_sales_2019_temp;
        TRUNCATE parcels_fdor_sales_2020_temp;
        TRUNCATE parcels_fdor_sales_2021_temp;
        TRUNCATE parcels_fdor_sales_2022_temp;
        TRUNCATE parcels_fdor_sales_2023_temp;
        TRUNCATE parcels_fdor_sales_2024_temp;
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = "\\copy parcels_fdor_sales_2008_temp from 'parcels_sales_2008.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2009_temp from 'parcels_sales_2009.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2010_temp from 'parcels_sales_2010.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2011_temp from 'parcels_sales_2011.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2012_temp from 'parcels_sales_2012.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2013_temp from 'parcels_sales_2013.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2014_temp from 'parcels_sales_2014.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2015_temp from 'parcels_sales_2015.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2016_temp from 'parcels_sales_2016.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2017_temp from 'parcels_sales_2017.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2018_temp from 'parcels_sales_2018.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # lost 2019 raw files
    # still have the table!
    #sql = "\\copy parcels_fdor_sales_2019_temp from 'parcels_sales_2019.txt' with delimiter as E'\\t' null as ''"
    sql = "INSERT INTO parcels_fdor_sales_2019_temp (pin, sale1_amt, sale1_year, sale1_date, sale1_vac, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum, sale2_amt, sale2_year, sale2_date, sale2_vac, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum)  SELECT parcel_id, sale_prc1, sale_yr1, concat_ws('-',sale_yr1,sale_mo1,'01'), vi_cd1, qual_cd1, multi_par_sal1, or_book1, or_page1, clerk_no1, sale_prc2, sale_yr2, concat_ws('-',sale_yr2,sale_mo2,'01'), vi_cd2, qual_cd2, multi_par_sal2, or_book2, or_page2, clerk_no2 FROM parcels_fdor_2019 WHERE co_no = " + str(fdor_co_no)
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd) 


    # lost 2020 raw files
    # still have the table!
    #sql = "\\copy parcels_fdor_sales_2020_temp from 'parcels_sales_2020.txt' with delimiter as E'\\t' null as ''"
    sql = "INSERT INTO parcels_fdor_sales_2020_temp (pin, sale1_amt, sale1_year, sale1_date, sale1_vac, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum, sale2_amt, sale2_year, sale2_date, sale2_vac, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum)  SELECT parcel_id, sale_prc1, sale_yr1, concat_ws('-',sale_yr1,sale_mo1,'01'), vi_cd1, qual_cd1, multi_par_sal1, or_book1, or_page1, clerk_no1, sale_prc2, sale_yr2, concat_ws('-',sale_yr2,sale_mo2,'01'), vi_cd2, qual_cd2, multi_par_sal2, or_book2, or_page2, clerk_no2 FROM parcels_fdor_2020 WHERE co_no = " + str(fdor_co_no)
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)   

    sql = "\\copy parcels_fdor_sales_2021_temp from 'parcels_sales_2021.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)
    
    sql = "\\copy parcels_fdor_sales_2022_temp from 'parcels_sales_2022.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)
    
    sql = "\\copy parcels_fdor_sales_2023_temp from 'parcels_sales_2023.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)
    
    sql = "\\copy parcels_fdor_sales_2024_temp from 'parcels_sales_2024.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # load older fdor sales into normalized table
    #-----------------------------------------------------------------------------------------

    sql = """
    TRUNCATE parcels_fdor_sales_normal_temp;
    TRUNCATE parcels_fdor_sales_denormal_temp;
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # 2008 sale1    
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2008_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2008 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2008_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2009 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2009_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2009 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2009_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2010 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2010_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2010 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2010_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2011 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2011_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2011 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2011_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2012 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2012_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2012 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2012_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2013 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2013_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2013 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2013_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2014 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2014_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2014 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2014_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2015 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2015_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2015 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2015_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2016 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2016_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2016 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2016_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2017 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2017_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2017 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2017_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2018 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2018_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2018 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2018_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    # 2019 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2019_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2019 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2019_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # 2020 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2020_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2020 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2020_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # 2021 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2021_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2021 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2021_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()   

    # 2022 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2022_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2022 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2022_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # 2023 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2023_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2023 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2023_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    # 2024 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2024_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2024 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2024_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # individual county processing
    # load recent sales from web download into parcels_fdor_sales_normal_temp
    # if a county is not listed here, then we are just going with fdor sales
    #-----------------------------------------------------------------------------------------

    if county_upper == 'BAKER' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin_clean, sale_amt, sale_year, sale_date, sale_vac)
        SELECT pin, sale1_amt, CAST(split_part(sale1_date, '-', 1) as int) as sale_year, sale1_date, sale1_vac
        FROM raw_baker_sales_export 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'BAY' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_bay_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # BRADFORD
    # Already last 3 sales denormalized format, so sales are appended in county processing code block
    
    if county_upper == 'CALHOUN' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_calhoun_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # COLUMBIA
    # Already last 3 sales denormalized format, so sales are appended in county processing code block

    if county_upper == 'DIXIE' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_dixie_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'ESCAMBIA' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_vac, sale_qual, sale_bk, sale_pg)
        SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_qual, sale_bk, sale_pg
        FROM raw_escambia_sales 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'FRANKLIN' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_franklin_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'FLAGLER' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_flagler_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'GADSDEN' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_gadsden_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'GILCHRIST' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg, sale_docnum)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg, sale_docnum 
            FROM raw_gilchrist_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()        
        
    if county_upper == 'GLADES' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_glades_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'GULF' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_gulf_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'HARDEE' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg, sale_docnum)
            SELECT pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg, sale_docnum
            FROM raw_hardee_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'HAMILTON' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_hamilton_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'HENDRY' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_vac, sale_qual, sale_typ, sale_bk, sale_pg)
        SELECT pin, sale_amt::int, CAST(split_part(sale_date, '-', 1) as int) as sale_year, sale_date, sale_vac, sale_qual, sale_typ, sale_bk, sale_pg
        FROM raw_hendry_sales_dwnld 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'HOLMES' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_holmes_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'JACKSON' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_jackson_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'JEFFERSON' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_jefferson_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()        

    # JEFFERSON
    # Already last 3 sales denormalized format, so sales are appended in county processing code block        
        
    if county_upper == 'LAFAYETTE' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_vac)
        SELECT pin, sale1_amt, CAST(split_part(sale1_date, '-', 1) as int) as sale_year, sale1_date, sale1_vac
        FROM raw_lafayette_sales_export 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'LAKE' :

        # remove fdor sales in 2012 that match county sales with more info
        sql = """
        DELETE FROM parcels_fdor_sales_normal_temp WHERE sale_year = '2016' or sale_year = '2017'
        """    
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
        # add lake county PA sales
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_typ, sale_qual, sale_bk, sale_pg)
        SELECT pin, sale1_amt, sale1_year, sale1_date, sale1_typ, sale1_qual, sale1_bk, sale1_pg
        FROM raw_lake_sales 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()

        # insert additional records into parcels_template from parcels_template2_lake that may not be present in fdor version
        # this is because an updated shapefile with some data like owner, etc is available from county after fdor
        # for lake (and maybe others where combo of fdor records and county shapefile is used)
        # PROBLEM - number of records gets out of sync between fdor and county as time goes on until next fdor data comes out
        # SOLUTION - add additional records that show up in the county version and copy in whatever available info there is.
        # Do an left outer join and insert records where the fdor side is null
        sql = """
        INSERT INTO parcels_template_lake
        (altkey, pin, s_section, s_township, s_range, subdiv_id, subdiv_nm, o_name1, o_address1, o_city, o_state, o_zipcode, o_country, s_address, yrblt_act, mrkt_lnd, mrkt_bld, mrkt_impr, mrkt_tot, sale1_amt, sale1_date, tax_amt1, luse, luse_d, lusedor)
        SELECT raw.altkey, raw.pin, raw.s_section, raw.s_township, raw.s_range, raw.subdiv_id, raw.subdiv_nm, raw.o_name1, raw.o_address1, raw.o_city, raw.o_state, raw.o_zipcode, raw.o_country, raw.s_address, raw.yrblt_act, raw.mrkt_lnd,
            raw.mrkt_bld, raw.mrkt_impr, raw.mrkt_tot, raw.sale1_amt, raw.sale1_date, raw.tax_amt1, raw.luse, raw.luse_d, raw.lusedor
        FROM parcels_template2_lake as raw LEFT OUTER JOIN parcels_template_lake as fdor ON raw.altkey = fdor.altkey where fdor.altkey is null
        
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()

        # add lake county PA sales
        #sql = """
        #INSERT INTO parcels_fdor_sales_normal_temp
        #(pin, sale_amt, sale_year, sale_date, sale_typ, sale_qual, sale_bk, sale_pg)
        #SELECT pin, sale1_amt, sale1_year, sale1_date, sale1_typ, sale1_qual, sale1_bk, sale1_pg
        #FROM raw_lake_sales_2012
        #"""    
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
    if county_upper == 'LEVY' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_levy_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'LIBERTY' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_liberty_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    #if county_upper == 'LIBERTY' :
    # this was required for certified 2013 to match shp pin to taxroll pin
    # update parcels_std_2010_shp_temp set pin_orig = substring(pin_orig,1,15) || ' ' || substring(pin_orig,17,20) where d_county_orig = 'LIBERTY'

    # 3/8/2022 - FDOR pin is clean, sales pin has dashes, sales pin_clean does not
    if county_upper == 'MADISON' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_madison_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
    # WARNING UPDATE THIS ONCE PER YEAR!
    # Marion
    if county_upper == 'MARION' :
        
        # join on sales table WHERE sale_date >= '2014-10-01'
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_marion_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'MONROE' :
        
        # add monroe county PA sales
        # 10/2019 - pin format in fdor version is different
        # SSTT RR <pin>, but this gets handled in monroe code section
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, pin_clean, altkey, sale_amt, sale_year, sale_date, sale_bk, sale_pg, sale_typ)
        SELECT pin, pin_clean, altkey, sale1_amt, sale1_year, sale1_date, sale1_bk, sale1_pg, sale1_typ
        FROM raw_monroe_sales 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
     

        # insert additional records into parcels_template from parcels_template2_lake that may not be present in fdor version
        # this is because an updated shapefile with some data like owner, etc is available from county after fdor
        # for monroe (and maybe others where combo of fdor records and county shapefile is used)
        # PROBLEM - number of records gets out of sync between fdor and county as time goes on until next fdor data comes out
        # SOLUTION - add additional records that show up in the county version and copy in whatever available info there is.
        # Do an left outer join and insert records where the fdor side is null
        # s_section is cast to int becaue we had to make it text to make sure leading zeros came over for sales info
        sql = """
        INSERT INTO parcels_template_monroe
        (altkey, pin, pin_clean, pin2, pin2_clean, s_section, s_township, s_range, subdiv_id, subdiv_nm, o_name1, o_address1, 
            o_city, o_state, o_zipcode, o_country, s_address, yrblt_act, sale1_amt, sale1_date, luse, luse_d, lusedor)
        SELECT raw.altkey, raw.pin, raw.pin_clean, raw.pin2, raw.pin2_clean, CAST(raw.s_section as int4), raw.s_township, 
            raw.s_range, raw.subdiv_id, raw.subdiv_nm, raw.o_name1, raw.o_address1, raw.o_city, raw.o_state, raw.o_zipcode, raw.o_country, 
            raw.s_address, raw.yrblt_act,  raw.sale1_amt, raw.sale1_date, raw.luse, raw.luse_d, raw.lusedor
        FROM parcels_template2_monroe as raw LEFT OUTER JOIN parcels_template_monroe as fdor ON raw.pin = fdor.pin where fdor.pin is null
        
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()

        
    if county_upper == 'NASSAU' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg, sale_grantor)
        SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg, sale_grantor
        FROM raw_nassau_sales 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'OKALOOSA' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, 
                EXTRACT(year FROM sale_date) as sale_year, 
                sale_date, 
                '' as sale_vac, 
                sale_type_alt as sale_typ, 
                sale_qual, sale_bk, sale_pg
            FROM raw_okaloosa_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # OKEECHOBEE
    # Already last 3 sales denormalized format, so sales are appended in county processing code block
    
    # WHY is this here?
    if (county_upper == 'PALM_BEACH') :
        # load new sales into parcels_fdor_sales_normal_temp
        print('HELLO')



    if county_upper == 'OSCEOLA' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date)
        SELECT pin, sale1_amt, CAST(split_part(sale1_date, '-', 1) as int) as sale_year, sale1_date
        FROM raw_osceola_sales_export 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()


    if county_upper == 'PUTNAM' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_typ, sale_vac, sale_qual, sale_bk, sale_pg)
        SELECT pin, sale_amt, sale_year, sale_date, sale_typ, sale_vac, sale_qual, sale_bk, sale_pg
        FROM raw_putnam_sales 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'SANTA_ROSA' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_santa_rosa_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if county_upper == 'SEMINOLE' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual)
            SELECT pin, sale1_amt, sale1_year, sale1_date, sale1_vac, sale1_typ, sale1_qual 
            FROM raw_seminole_sales"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        

    if county_upper == 'SUMTER' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_sumter_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    
    if county_upper == 'ST_LUCIE' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_bk, sale_pg, sale_grantor)
        SELECT pin, sale1_amt, sale1_year, sale1_date, sale1_bk, sale1_pg, sale1_grantor
        FROM raw_st_lucie_sales_export 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()    

    if county_upper == 'SUWANNEE' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_vac)
        SELECT replace(pin,'-',''), sale1_amt, CAST(split_part(sale1_date, '-', 1) as int) as sale_year, sale1_date, sale1_vac
        FROM raw_suwannee_sales_export 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # WARNING UPDATE THIS ONCE PER YEAR!
    # Taylor
    if county_upper == 'TAYLOR' :

        #-----------------------------------------------------------------------------------------
        # update pin2 in order to link to property appraiser and to get new sales to link
        #-----------------------------------------------------------------------------------------
        # No owner info in Taylor sales download
        #sql = """
        #    UPDATE parcels_template_taylor as p SET
        #        pin2 = substr(pin,7,5) || '-' || substr(pin,12,3)
        #;"""
        #print sql
        #cursor.execute(sql)
        #connection.commit()
    
        # update pin_clean to add str where missing
        #sql = """UPDATE raw_taylor_sales_dwnld as d
        #    SET pin_clean = t.pin_clean
        #    FROM parcels_template_taylor as t
        #    WHERE d.pin2 = t.pin2 and length(d.pin) < 10
        #    """
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_taylor_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # UNION
    # Already last 3 sales denormalized format, so sales are appended in county processing code block        

    if county_upper == 'WAKULLA' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_wakulla_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'WALTON' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT replace(pin,'-',''), replace(pin,'-',''), sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_walton_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'WASHINGTON' :
        
        # join on sales table
        sql = """INSERT INTO parcels_fdor_sales_normal_temp
            (pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, pin_clean, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg 
            FROM raw_washington_sales_dwnld"""
        print(sql)
        cursor.execute(sql)
        connection.commit()        
        
    # for Grizzly counties (except Sumter) - last 3 sales are included, so its just a simple replace with new info for those records
    # do this after the sales denormalization process
            
    # dedupe normalized table
    sql = """
    DELETE FROM parcels_fdor_sales_normal_temp 
        WHERE ctid = ANY(ARRAY(SELECT ctid 
        FROM (SELECT row_number() OVER (PARTITION BY pin, pin_clean, sale_amt, sale_date, sale_bk, sale_pg, sale_docnum), ctid 
            FROM parcels_fdor_sales_normal_temp) x 
            WHERE x.row_number > 1));
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()

    # sometimes we need to use a different column other than pin to copy sales data into template
    # example is baker, which switched from clean pin to dashes - so we are using clean pin for sales
    if county_upper in ('BAKER','CALHOUN','COLUMBIA','FRANKLIN','GULF','HARDEE','LEVY','MADISON','UNION','WALTON','WASHINGTON') :
        pin_col = 'pin_clean'
    else:
        pin_col = 'pin'
        
    # denormalize 
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO parcels_fdor_sales_denormal_temp 
    SELECT 
        sales_normal.""" + pin_col + """,
        Null,
        Null,
        Null,
        Null,
        Null,
        Null,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_multi ELSE NULL END) AS sale4_multi,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_multi ELSE NULL END) AS sale5_multi,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        Null         
        
        FROM
            (SELECT 
                """ + pin_col + """,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_docnum,
                sale_multi,
                sale_grantor,
                --grantee,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY """ + pin_col + """ ORDER BY sale_date desc) AS i
                FROM parcels_fdor_sales_normal_temp WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_""" + county_lower + """ AS interim ON sales_normal.""" + pin_col + """ = interim.""" + pin_col + """
        GROUP BY sales_normal.""" + pin_col + """;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()

    # where we are using pin_clean, have to populate the column in the denormal table
    # QUESTION: Don't we end up with dashes in here unless we get rid of them?
    # TODO - review these counties to make sure they are acting like we think they are.
    if county_upper in ('BAKER','CALHOUN','COLUMBIA','FRANKLIN','GULF','HARDEE','HENDRY','LEVY','MADISON','PUTNAM','UNION','WALTON','WASHINGTON') :
        sql = """UPDATE parcels_fdor_sales_denormal_temp SET pin_clean = pin
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # Doing this for UNION, but may need to do this for others - doubl-check
    # where we are using pin_clean, have to populate the column in the denormal table
    if county_upper in ('CALHOUN','FRANKLIN','HARDEE','UNION','WASHINGTON') :
        sql = """UPDATE parcels_fdor_sales_denormal_temp SET pin_clean = replace(pin_clean,'-','')
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_""" + county_lower + """ as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor        
        
        FROM parcels_fdor_sales_denormal_temp as denormal
        WHERE interim.""" + pin_col + """ = denormal.""" + pin_col + """;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    # Grizzly sales, last 3 denormalized - handle here.


    

    # handle PIN issues here?
    #sql = """UPDATE """ + parcels_template + """ SET pin = substr(pin, 1, 2) || '-' || substr(pin, 3, 2) || '-' || substr(pin, 5, 2) || '-' || substr(pin, 7, 4) || '-' || substr(pin, 11, 4) || '-' ||substr(pin, 15, 4);"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # Make sure d_county is properly set
    sql = """
    UPDATE parcels_template_""" + county_lower + """ SET d_county = '""" + county_upper + """';
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()    


    
    # close communication with the database
    cursor.close()
    connection.close()



# =======================================================================================
# ALACHUA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_alachua() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    # remove tabs in ftp_name.txt
    #mycmd = ''.join(['sed -e "s:\t::g" ',pathProcessing,'/source_data/ftp_name.txt > ',pathProcessing,'/source_data/ftp_name2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # TEST
    #mycmd = ''.join(['sed -e "s:\t::g" ',pathProcessing,'/source_data/ftp_legal.txt > ',pathProcessing,'/source_data/ftp_legal2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Land.txt > ',pathProcessing,'/source_data/Land2.txt'])
    #print 'Executing: ', mycmd
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Sales.txt > ',pathProcessing,'/source_data/Sales2.txt'])
    #print 'Executing: ', mycmd
    os.system(mycmd)

    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Legals.txt > ',pathProcessing,'/source_data/Legals2.txt'])
    #print 'Executing: ', mycmd
    os.system(mycmd)     

    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/Legals2.txt > ',pathProcessing,'/source_data/Legals3.txt'])
    os.system(mycmd)
    
    # remove 1st line, sort on 1st column (pin) and remove duplicate lines    
    mycmd = ''.join(["cat ",pathProcessing,"/source_data/Property.txt | sed '1d' |sort -u -t'\t' -k1,1 > ",pathProcessing,"/source_data/Property2.txt"])
    #print 'Executing: ', mycmd
    os.system(mycmd) 

    mycmd = ''.join(["sed -e 's:SURVEY\\r\\n:SURVEY :g' ",pathProcessing,'/source_data/Property2.txt > ',pathProcessing,'/source_data/Property3.txt'])
    #print 'Executing: ', mycmd
    os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/alachua/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    # NOW processing raw file first
    # load raw building data    
    #sql = "\\copy raw_alachua_bldg from 'source_data/ftp_bld.txt' with CSV HEADER null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Process NAME file - has 3 most recent sales, but not grantor
    #print 'RUN alachua-raw-2011-10-name.py'
    #mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-raw-2011-10-name.py'
    #os.system(mycmd)
    #print mycmd

    #!!!!!!!!!!!!!!!!!!!!!
    # NOTE !!!!!!
    # DO THIS ONE TIME WHEN YOU WANT A REFRESHED LEGAL FILE
    # MUST MANUALLY load DBF into MS-ACCESS, then export to source_data/legal.txt in tab-delimited
    #!!!!!!!!!!!!!!!!!!!!!
    #print 'RUN alachua-raw-2011-10-legal.py'
    #mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-raw-2011-10-legal.py'
    #os.system(mycmd)
    #print mycmd 

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('\nRUN alachua-owner.py  --  Input: Owners.txt  --  Output: parcels_owner.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-owner.py'
    os.system(mycmd)
    print(mycmd)

    print('\nRUN alachua-history.py  --  Input: HistoryRE.txt  --  Output: parcels_valuations.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-history.py'
    os.system(mycmd)
    print(mycmd)
    
    print('\nRUN alachua-bldg-imprv.py  --  Input: Improvements.txt  --  Output: parcels_bldg.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-bldg-imprv.py'
    os.system(mycmd)
    print(mycmd)

    #print 'RUN alachua-raw-2012-08-sub.py'
    #mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-raw-2012-08-sub.py'
    #os.system(mycmd)
    #print mycmd

    print('\nRUN alachua-legal.py  --  Input: Legals3.txt  --  Output: parcels_legal.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-legal.py'
    os.system(mycmd)
    print(mycmd)

    print('\nRUN alachua-land.py  --  Input: Land2.txt  --  Output: parcels_landpub.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-land.py'
    os.system(mycmd)
    print(mycmd)

    print('\nRUN alachua-property.py  --  Input: Property3.txt  --  Output: parcels_new.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-property.py'
    os.system(mycmd)
    print(mycmd)     

    print('\nRUN alachua-sale.py  --  Input: Sales2.txt  --  Output: parcels_sales.txt')
    mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-sale.py'
    os.system(mycmd)
    print(mycmd)

    #print '\nRUN alachua-convert-address.py'
    #mycmd = '/srv/tools/python/parcel_processing/alachua/alachua-convert-address.py'
    #os.system(mycmd)
    #print mycmd       

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_alachua from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_alachua_history from 'parcels_valuations.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)    

    sql = "\\copy raw_alachua_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)     

    sql = "\\copy raw_alachua_legal_denormal from 'parcels_legal.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_alachua_landpub from 'parcels_landpub.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)    
    
    sql = "\\copy raw_alachua_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    #sql = "\\copy raw_alachua_sub from 'parcels_sub.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #os.system(mycmd)
    #print mycmd

    #sql = "\\copy raw_alachua_situs from 'parcels_address.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #os.system(mycmd)
    #print mycmd

    # load new sales table 
    sql = "\\copy raw_alachua_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)


    # change to source_data directory for raw files    
    #pathSource1 = pathProcessing + '/source_data'
    #os.chdir(pathSource1)    

    # 11/2022 - no longer needed
    #sql = "\\copy raw_alachua_owner_key from 'entityprop.csv' with CSV HEADER null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #os.system(mycmd)
    #print mycmd
    
    #os.chdir(pathProcessing)

    #exit()	
    
    #-----------------------------------------------------------------------------------------
    # UPDATE parcels_template_<county> FROM raw tables
    #-----------------------------------------------------------------------------------------
    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_alachua_bldg_stats
        from raw_alachua_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_alachua
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_alachua_bldg_stats as bldg
            WHERE parcels_template_alachua.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    # join on sub table to bring in sub info
    #sql = """UPDATE parcels_template_alachua
    #        SET
    #        subdiv_nm = sub.subdiv_nm
    #        FROM raw_alachua_sub as sub
    #        WHERE parcels_template_alachua.subdiv_id = sub.subdiv_id and parcels_template_alachua.subdiv_id != '000000';"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # owner name is normalized. i.e. owner_key represents one or more pins that an owner can own
    # I don't understand a quick way to update using multiple joins, so do it quick and dirty
    # first step is populate parcel table with o_ids
    # join on owner using key to bring in owner info
    sql = """UPDATE parcels_template_alachua as p
            SET
            name_misc = key.o_id
            FROM raw_alachua_owner_key as key WHERE p.pin = key.pin
            ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
  
    
    # join on owner and owner_key table to bring in owner info
    sql = """UPDATE parcels_template_alachua as p
            SET
            o_name1 = owner.o_name1,
            o_name2 = owner.o_name2,
            o_address1 = owner.o_address1,
            o_address2 = owner.o_address2,
            o_city = owner.o_city,
            o_state = owner.o_state,
            o_zipcode = owner.o_zipcode,
            o_zipcode4 = owner.o_zipcode4,
            o_country = owner.o_country
            FROM raw_alachua_owner as owner where p.pin = owner.pin
            ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on landpub table to bring in info
    sql = """UPDATE parcels_template_alachua
            SET
            --luse = land.luse,
            --lusedor = substring(land.luse,1,2),
            --luse_d = land.luse_d,
            zoning = land.zoning
            FROM raw_alachua_landpub as land
            WHERE parcels_template_alachua.pin = land.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    # set CONDO val
    sql = """UPDATE parcels_template_alachua SET condo = 'YES' WHERE lusedor = '04' ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """UPDATE parcels_template_alachua SET condo = 'NO' WHERE lusedor != '04' ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #exit()
    
    # join on realpub table to bring in info
    #sql = """UPDATE parcels_template_alachua
    #        SET
    #        s_section = real.s_section,
    #        s_township = real.s_township,
    #        s_range = real.s_range,
    #        s_city = real.s_city,
    #        --muni = real.muni,
    #        --luse = real.luse,
    #        homestead = real.homestead,
    #        subdiv_id = real.subdiv_id,
    #        subdiv_nm = real.subdiv_nm
    #        FROM raw_alachua_realpub as real
    #        WHERE parcels_template_alachua.pin = real.pin ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()    

    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_alachua
            SET
            mrkt_bld = history.mrkt_bld,
            mrkt_impr = history.mrkt_impr,
            mrkt_lnd = history.mrkt_lnd,
            mrkt_ag = history.mrkt_ag,
            mrkt_tot = history.mrkt_tot,
            assd_tot = history.assd_tot,
            exempt_tot = history.exempt_tot,
            taxable_tot = history.taxable_tot,
            homestead = history.homestead,
            tax_amt1 = history.tax_amt1
            -- sqft_htd = history.sqft_htd,
            -- sqft_tot = history.sqft_tot,
            -- sqft_adj = history.sqft_adj
  
            FROM raw_alachua_history as history
            WHERE parcels_template_alachua.pin = history.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_alachua
            SET
            legal_full = legal.legal_full,
            legal1 = legal.legal1,
            legal2 = legal.legal2,
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_alachua_legal_denormal as legal
            WHERE parcels_template_alachua.pin = legal.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on luse 4-digit table to bring in code descriptions
    sql = """UPDATE parcels_template_alachua
            SET
            luse_d = luse.luse_desc
            FROM codes_luse_four_digit as luse
            WHERE parcels_template_alachua.luse = luse.luse and county = 'ALACHUA';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    # update subdivision names
    sql = """UPDATE parcels_template_alachua
            SET
            subdiv_nm = null
            WHERE subdiv_nm = 'PlaceHolder';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    


    # Alachua no longer providing situs info, except with parcel geometry
    # just get it from fdor for now
    # no friggin city or zipcode provided for alachua - WTF
    # could get it from address points
    # DO NOT GET site address data from FDOR
    #sql = """UPDATE parcels_template_alachua as p
    #        SET
    #        s_address = fdor.phy_addr1
    #        -- s_city = fdor.phy_city,
    #        -- s_zipcode = fdor.phy_zipcd
    #        FROM parcels_fdor_2018 as fdor
    #        WHERE fdor.co_no = 11 and p.pin = replace(fdor.parcel_id,' ','-') ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # note - for parcels with multiple buildings and/or suites it picks up the first matched record
    sql = """UPDATE parcels_template_alachua as p
            SET
            s_number = address.s_number,
            s_pdir = upper(address.s_pdir),
            s_name = upper(address.s_name),
            s_type = upper(address.s_type),
            s_sdir = upper(address.s_sdir),
            s_unit = upper(address.s_unit),
            s_address = upper(address.s_address),
            s_city = upper(address.s_city),
            s_zipcode = address.s_zipcode
            FROM address_points as address
            WHERE address.d_county = 'ALACHUA' and p.pin = address.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join on situs table to bring in situs info
    #sql = """UPDATE parcels_template_alachua
    #        SET
    #        s_number = situs.s_number,
    #        s_pdir = situs.s_pdir,
    #        s_name = situs.s_name,
    #        s_type = situs.s_type,
    #        s_sdir = situs.s_sdir,
    #        s_unit = situs.s_unit,
    #        s_address = situs.s_address,
    #        s_city = situs.s_city,
    #        s_zipcode = situs.s_zipcode
    #        --s_zipcode4 = situs.s_zipcode4
    #        FROM raw_alachua_situs as situs
    #        WHERE parcels_template_alachua.pin = situs.pin ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit() 

    # Set pin_clean
    sql = """UPDATE parcels_template_alachua
            SET
            pin_clean = replace(pin, '-','');"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_alachua_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual_code ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual_code ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual_code ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.vacant ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.instrument ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.qual_code ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.book ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.page ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.vacant ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.instrument ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.qual_code ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.book ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.page ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                vacant,
                instrument,
                qual_code,
                book,
                page,
                --multi,
                --grantor,
                --grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_alachua_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_alachua AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_alachua as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        --sale4_grantor = denormal.sale4_grantor,
        --sale4_grantee = denormal.sale4_grantee

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg
        --sale5_docnum = denormal.sale5_docnum,
        --sale5_grantor = denormal.sale5_grantor,
        --sale5_grantee = denormal.sale5_grantee
        
        FROM raw_alachua_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    


# =======================================================================================
# BAKER COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_baker() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/baker/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    # CHANGE THIS EVERY YEAR AT CERTIFIED TIME?
    # SaleDate	Price	V/I	Qual	OR	Book	Page	Name	Street#	StreetName	City	ZIP	PIN	Sec	Twp	Rng	Use	AssdValue	TaxValue
    # where did fdor sales leave off for 2012 certified? FDOR has 208 out 604 9/2012 sales, so get 9/2012 to current
    
    #sql = "\\copy raw_baker_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_baker_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_baker_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_baker_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_baker_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names and mailing addresses are included in the sales export
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    #
    # !!!! UPDATE ME FOR new fdor files in 2013 !!!
    
    sql = """
        UPDATE parcels_template_baker as p SET
            o_name1 = o.o_name1,
            o_name2 = o.o_name2,
            o_name3 = o.o_name3,
            o_address1 = o.o_address1,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_baker_sales_export as o
            WHERE p.pin = o.pin and o.sale1_date > '2014-01-01'
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()




    
    # close communication with the database
    cursor.close()
    connection.close()
    
# =======================================================================================
# BAY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_bay() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
 
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/bay/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------    
    print('RUN bay-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/bay/bay-convert-sales-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    #print 'RUN bay-bldg1.py'
    #mycmd = '/srv/tools/python/parcel_processing/bay/bay-bldg.py'
    #print mycmd
    #os.system(mycmd)
    
    #print 'RUN bay-bldg2.py'
    #mycmd = '/srv/tools/python/parcel_processing/bay/bay-bldg2.py'
    #print mycmd
    #os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_bay_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #sql = "\\copy raw_bay_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #sql = "\\copy raw_bay_bldg from 'parcels_bldg2.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_bay as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_bay_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # OLD
    sql = """
        UPDATE parcels_template_bay as p SET
            o_name1 = o.o_name1,
            o_name2 = o.o_name2,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_bay_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    sql = """
        UPDATE parcels_template_bay as p SET
            yrblt_eff = o.yrblt_eff,
            sqft_adj = o.sqft_adj,
            sqft_htd = o.sqft_htd,
            sqft_tot = o.sqft_tot,
            num_bed = o.num_bed,
            num_bath = o.num_bath
            FROM raw_bay_bldg as o
            WHERE p.pin = o.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# BRADFORD COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_bradford() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/bradford/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    #sql = "\\copy raw_bradford_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    # PIN has dashes
    # SHP PIN is clean
    # FDOR parce;_id is clean
    sql = "\\copy raw_bradford_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    sql = "\\copy raw_bradford_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()
    
    # make sure the sales are in yyyy-mm-dd format
    # make pin a clean version
    sql = """
        UPDATE raw_bradford_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_bradford_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_bradford_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;

        UPDATE raw_bradford_sales_export SET pin = replace(pin,'-','');            
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_bradford_sales_export SET sale2_date = split_part(sale2_date, '/', 3) || '-' || split_part(sale2_date, '/', 1) || '-' || split_part(sale2_date, '/', 2);
        
        UPDATE raw_bradford_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-0' || split_part(sale2_date, '-', 2) || '-' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 2)) = 1;

        UPDATE raw_bradford_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-' || split_part(sale2_date, '-', 2) || '-0' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_bradford_sales_export SET sale3_date = split_part(sale3_date, '/', 3) || '-' || split_part(sale3_date, '/', 1) || '-' || split_part(sale3_date, '/', 2);
        
        UPDATE raw_bradford_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-0' || split_part(sale3_date, '-', 2) || '-' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 2)) = 1;

        UPDATE raw_bradford_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-' || split_part(sale3_date, '-', 2) || '-0' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     




    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update sale info
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_bradford as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = CAST(split_part(denormal.sale1_date, '-', 1) as int),
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = CAST(split_part(denormal.sale2_date, '-', 1) as int),
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = CAST(split_part(denormal.sale3_date, '-', 1) as int),
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee,
        o_name1 = denormal.o_name1
        FROM raw_bradford_sales_export as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales excport, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_bradford as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            --o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_bradford_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

# =======================================================================================
# BREVARD COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_brevard() :

    # Process shapefile

    # Process new sales file from PA

    # Process FDOR?

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()


    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/brevard/processing/database/sql_files/create_raw_tables.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CREATE CSV FILES FROM MDB
    #-----------------------------------------------------------------------------------------
    
    #mycmd = 'rm /srv/mapwise_dev/county/brevard/processing/database/current/source_data/bcpao_WebProperties.csv'
    #print mycmd
    #os.system(mycmd)

    #mycmd = 'rm /srv/mapwise_dev/county/brevard/processing/database/current/source_data/bcpao_WebTransfers.csv'
    #print mycmd
    #os.system(mycmd)

    mycmd = 'rm -r /srv/mapwise_dev/county/brevard/processing/database/current/source_data/BCPAOWebData.csv'
    print(mycmd)
    os.system(mycmd)    

    #-------------------------------------   

    # I think working directory must be same as command for it to run, unless we can fix CLASSPATH issues(?)
    os.chdir('/home/bmay/src/access2csv')
    mycmd = '/home/bmay/src/access2csv/access2csv --input /srv/mapwise_dev/county/brevard/processing/database/current/source_data/BCPAOWebData.accdb --output /srv/mapwise_dev/county/brevard/processing/database/current/source_data/BCPAOWebData.csv'
    print('Executing: ', mycmd)
    os.system(mycmd)
    os.chdir(pathProcessing)    
    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/brevard/processing/database/current/source_data/bcpao_WebProperties.csv /srv/mapwise_dev/county/brevard/processing/database/current/source_data/BCPAOWebData.accdb bcpao_WebProperties'
    #print mycmd
    #os.system(mycmd)
    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/brevard/processing/database/current/source_data/bcpao_WebTransfers.csv /srv/mapwise_dev/county/brevard/processing/database/current/source_data/BCPAOWebData.accdb bcpao_WebTransfers'
    #print mycmd
    #os.system(mycmd)    

    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/brevard/processing/database/current/source_data/web_parcel_view_volcoit.csv /srv/mapwise_dev/county/brevard/processing/database/current/source_data/BCPAOWebData.accdb web_parcel_view_volcoit'
    #print mycmd
    #os.system(mycmd)

    # remove backslashes
	# python needs to escape backslash as well as sed
	# no -e required for single command
    mycmd = ''.join(["sed 's/\\\//g' ",pathSourceData,'/BCPAOWebData.csv/bcpao_WebProperties.csv > ',pathSourceData,'/BCPAOWebData.csv/bcpao_WebProperties2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #----------------------------------------------------------------------------------------- 
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/BCPAOWebData.csv/bcpao_WebProperties2.csv > ',pathSourceData,'/BCPAOWebData.csv/bcpao_WebProperties3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/BCPAOWebData.csv/bcpao_WebTransfers.csv > ',pathSourceData,'/BCPAOWebData.csv/bcpao_WebTransfers2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)     

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN brevard-property-current.py')
    mycmd = '/srv/tools/python/parcel_processing/brevard/brevard-property-current.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN brevard-sales-current.py')
    mycmd = '/srv/tools/python/parcel_processing/brevard/brevard-sales-current.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN brevard-buildings-current.py')
    mycmd = '/srv/tools/python/parcel_processing/brevard/brevard-buildings-current.py'
    print(mycmd)        
    os.system(mycmd)
      
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_brevard from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_brevard_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_brevard_buildings from 'buildings_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)    

    # UPDATE PIN info
    # Brevard PA PIN example: 22-35-16-00-00003.0-0000.00 - this matches the raw file PIN
    # The shapefile has - township, range, sec, subcode, block, lot, condo_num
    # Format = tt-rr-ss-SS-bbbbb.b-llll.ll
    # raw parcel shp block - need to pad with zeros on left and right. If a number after ., then no right padding
    # same with lot    

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_brevard_sales_denormal 
    SELECT 
        sales_normal.altkey,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        Null        
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_grantor,
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_brevard_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_brevard AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_brevard as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        -- sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        -- sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor        
        -- sale5_grantee = denormal.sale5_grantee
        FROM raw_brevard_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on luse 4-digit table to bring in code descriptions
    sql = """UPDATE parcels_template_brevard
            SET
            luse_d = luse.luse_desc
            FROM codes_luse_four_digit as luse
            WHERE parcels_template_brevard.luse = luse.luse and county = 'BREVARD';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # fill in blanks before doing the next round because if you try to concatenate a null, the whole thing will be null!!!!
    sql = """       
        -- if subdiv_id is null
        -- 53368
        UPDATE parcels_template_brevard 
            SET subdiv_id = '00'
            WHERE subdiv_id is null;

        -- if lot_pin is null
        -- xx
        UPDATE parcels_template_brevard 
            SET lot_pin = '0000.00'
            WHERE lot_pin is null;

        -- if block_pin is null
        -- xx
        UPDATE parcels_template_brevard 
            SET block_pin = '00000.0'
            WHERE block_pin is null;            

    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # do complicated pin creation thang
    sql = """       
        -- if there IS NOT a decimal in BOTH block_pin and lot_pin
        -- 174124
        UPDATE parcels_template_brevard 
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-' || lpad(block_pin,5,'0') || '.0-' || lpad(lot_pin,4,'0') || '.00'
            WHERE strpos(block_pin,'.') = 0 and strpos(lot_pin,'.') = 0;
            
            
        -- if there IS NOT a decimal in block_pin and IS a decimal in lot_pin
        -- 5206
        UPDATE parcels_template_brevard
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-' || lpad(block_pin,5,'0') || '.0-' || lpad(lot_pin,7,'0')
            WHERE strpos(block_pin,'.') = 0 and strpos(lot_pin,'.') > 0;
            
            
        -- if there IS a decimal in block_pin and IS NOT a decimal in lot_pin
        -- 653
        UPDATE parcels_template_brevard
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-' || lpad(block_pin,7,'0') || '-' || lpad(lot_pin,4,'0') || '.00'
            WHERE strpos(block_pin,'.') > 0 and strpos(lot_pin,'.') = 0;
            

        -- if there IS a decimal in BOTH block_pin and lot_pin
        -- 591
        UPDATE parcels_template_brevard
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-' || lpad(block_pin,7,'0') || '-' || lpad(lot_pin,7,'0') 
            WHERE strpos(block_pin,'.') > 0 and strpos(lot_pin,'.') > 0;


        -- BOTH block_pin and lot_pin are null
        -- 2
        UPDATE parcels_template_brevard 
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-00000.0-0000.00'
            WHERE block_pin is null and lot_pin is null;
            
        -- block_pin IS null and lot_pin has decimal
        -- 5541
        UPDATE parcels_template_brevard 
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-00000.0-' || lpad(lot_pin,7,'0') 
            WHERE block_pin is null and strpos(lot_pin,'.') > 0;
            
        -- block_pin IS null and lot_pin has NO decimal
        -- 66836
        UPDATE parcels_template_brevard 
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-00000.0-' || lpad(lot_pin,4,'0') || '.00'
            WHERE block_pin is null and strpos(lot_pin,'.') = 0;
            
        -- block_pin has decimal and lot_pin IS NULL
        -- 5183
        UPDATE parcels_template_brevard 
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-' || lpad(block_pin,7,'0') || '-0000.00'
            WHERE strpos(block_pin,'.') > 0 and lot_pin is null;
            
        -- block_pin has no decimal and lot_pin IS NULL
        -- 32798
        UPDATE parcels_template_brevard 
            SET pin = s_township || '-' || s_range || '-' || s_section  || '-' || subdiv_id  || '-' || lpad(block_pin,5,'0') || '.0-0000.00'
            WHERE strpos(block_pin,'.') = 0 and lot_pin is null;              
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """UPDATE parcels_template_brevard
        SET 
        pin_clean = replace(replace(pin, '-', ''), '.','')
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # create building sum table
    sql = """SELECT 
            bldg.altkey, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(bldg.res_units as integer)) as sum_res_units,
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_brevard_buildings_stats
        from raw_brevard_buildings as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_brevard
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff, 
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            res_units = bldg.sum_res_units,
            stories = bldg.max_stories
            FROM raw_brevard_buildings_stats as bldg
            WHERE parcels_template_brevard.altkey = bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
   
    # add special features / misc values from fdor since appraiser doesn;t provide it
    # neither appraiser of fdor provides building values
    # update values from FDOR !!!!!! CHANGE for 2016 !!!!

   
    sql = """UPDATE parcels_template_brevard as interim
        SET 
        mrkt_impr = fdor.spec_feat_val,
        --yrblt_eff = fdor.eff_yr_blt,
        --yrblt_act = fdor.act_yr_blt,
        --sqft_htd = tot_lvg_area,
        num_bldg = fdor.no_buldng
        FROM parcels_fdor_2024 as fdor
        WHERE interim.altkey = fdor.alt_key and fdor.co_no = 15;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# BROWARD COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_broward() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/broward/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # EXPORT TO TEXT
    #-----------------------------------------------------------------------------------------  	    
    #mycmd = 'java -jar /home/bmay/src/ajack-1.0.0.jar -o -f POSTGRES_CSV -t bcpa_tax_roll -d /srv/mapwise_dev/county/broward/processing/database/current/source_data/export /srv/mapwise_dev/county/broward/processing/database/current/source_data/BCPA_TAX_ROLL.mdb'
    mycmd = 'java -jar /srv/tools/ajack-1.0.0.jar -o -f POSTGRES_CSV -t bcpa_tax_roll -d /srv/mapwise_dev/county/broward/processing/database/current/source_data/export /srv/mapwise_dev/county/broward/processing/database/current/source_data/BCPA_TAX_ROLL.mdb'
    print(mycmd)
    os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # COLUMN WRANGLING and ASCII CLEANSING
    #-----------------------------------------------------------------------------------------  
    
    # 7/8/2022 - is this a temp solution for Broward?
    # this deletes a column from csv file. Sometimes appraisers will add an extra column, or 2 or 3 or more between exports they provide to the public.
    # instead of changing python code to increment / decrement all the fields, just delete the extra data!
    #cut -d, -f1 --complement parcel.csv > parcel_cut.csv
    #mycmd = ''.join(["cut -d, -f 2- ",pathProcessing,'/source_data/export/bcpa_tax_roll.csv > ',pathProcessing,'/source_data/export/bcpa_tax_roll_cut.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    # Enable using Cut
    #mycmd = ''.join(["sed 's/\\t//g' ",pathProcessing,'/source_data/export/bcpa_tax_roll_cut.csv > ',pathProcessing,'/source_data/export/bcpa_tax_roll2.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    # Bypass cut
    mycmd = ''.join(["sed 's/\\t//g' ",pathProcessing,'/source_data/export/bcpa_tax_roll.csv > ',pathProcessing,'/source_data/export/bcpa_tax_roll2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/export/bcpa_tax_roll2.csv > ',pathProcessing,'/source_data/export/bcpa_tax_roll3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)     
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN broward-convert-current.py')
    # If broward-convert-current.py fails, see if they exported with the objectid and use broward-convert-current_2019-07-12.py instead
    mycmd = '/srv/tools/python/parcel_processing/broward/broward-convert-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/broward/broward-convert-current_2019-07-12.py'
    print(mycmd)
    os.system(mycmd)
    

    print('RUN broward-raw-bldg.py')
    mycmd = '/srv/tools/python/parcel_processing/broward/broward-raw-bldg.py'
    print(mycmd)
    os.system(mycmd)
       

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_broward from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_broward_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)    

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE TABLES
    #----------------------------------------------------------------------------------------- 
    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            max(cast(bldg.stories as integer)) as max_stories, 
            sum(cast(bldg.res_units as integer)) as sum_units, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_broward_bldg_sum
        from raw_broward_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_broward
            SET
            stories = bldg.max_stories
            --sqft_tot = bldg.sum_sqft_tot, 
            --num_bath = bldg.sum_num_baths,
            --num_bed = bldg.sum_num_beds
            FROM raw_broward_bldg_sum as bldg
            WHERE parcels_template_broward.pin = bldg.pin;"""
    print(sql)
    #print "CHANGE ME BACK!"
    cursor.execute(sql)
    connection.commit()


    # only for 2011 fdor
    #process_raw_fdor_broward('BROWARD')
    
    
    # close communication with the database
    cursor.close()
    connection.close()



# =======================================================================================
# CALHOUN COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_calhoun() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/calhoun/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN calhoun-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/calhoun/calhoun-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_calhoun_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_calhoun as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_calhoun_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# CHARLOTTE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_charlotte() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/charlotte/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathTopDir,'/current/source_data/cd.txt > ',pathTopDir,'/current/source_data/cd_2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
	# NOTE: need an advanced sed script to replace \n + | because sed thinks \n is the end of the line
	# maybe awk can do it
	# maybe use python by identifying bogus row and then appending two lines into one
    #mycmd = ''.join(["sed 's:\\n|:|:g' ",pathSourceData,'/cd_2.txt > ',pathSourceData,'/cd_3.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN charlotte-convert-generic.py')
    mycmd = '/srv/tools/python/parcel_processing/charlotte/charlotte-convert-generic.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN charlotte-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/charlotte/charlotte-sales.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN charlotte-sales-pre2009.py')
    mycmd = '/srv/tools/python/parcel_processing/charlotte/charlotte-sales-pre2009.py'
    print(mycmd)
    os.system(mycmd)    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_charlotte from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_charlotte_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_charlotte_sales from 'sales_new2.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_charlotte_zoning_codes from 'source_data\\raw_data\\zoning_codes.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = """UPDATE parcels_template_charlotte
            SET
            zoning = zon.code2
            FROM raw_charlotte_zoning_codes as zon
            WHERE parcels_template_charlotte.zoning = zon.code;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_charlotte_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_multi ELSE NULL END) AS sale4_multi,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_multi ELSE NULL END) AS sale5_multi,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        Null,
        Null        
        
        FROM
            (SELECT 
                pin,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_multi,
                sale_bk,
                sale_pg,
                sale_docnum,
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_charlotte_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_charlotte AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_charlotte as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        -- sale1_grantor = denormal.sale1_grantor,
        -- sale1_grantee = denormal.sale1_grantee,
        
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        -- sale2_grantor = denormal.sale2_grantor,
        -- sale2_grantee = denormal.sale2_grantee,
        
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        -- sale3_grantor = denormal.sale3_grantor,
        -- sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        -- sale4_grantor = denormal.sale4_grantor,
        -- sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum
        -- sale5_grantor = denormal.sale5_grantor        
        -- sale5_grantee = denormal.sale5_grantee
        
        FROM raw_charlotte_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# CITRUS COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_citrus() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/citrus/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # PRE-PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #del xx.txt

    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    # 10/2/24 - file formats changed and one now not updated, but strangley the "new file"
    # ACUALLY - ALL .DAT files are now old and the CSV versions are the fresh ones - WTF - their website says use .DAT
    # has the old format, whatever.
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathSourceData,'/VD_PARCELDATA.CSV > ',pathSourceData,'/vd_parceldata2.dat'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # handle mult-comma problems
    # VILLA,TWNHSE,ETC
    mycmd = ''.join(["sed 's:VILLA,TWNHSE,ETC:VILLA TWNHSE ETC:g;s:COSTA & SON INC, :COSTA & SON INC:g;s:SUGARMILL WOODS, :SUGARMILL WOODS:g' ",pathSourceData,'/vd_parceldata2.dat > ',pathSourceData,'/vd_parceldata3.dat'])
    print('Executing: ', mycmd)
    os.system(mycmd)
      
    mycmd = ''.join(["sed 's/\\\//g' ",pathSourceData,'/VD_LEGAL.CSV > ',pathSourceData,'/vd_legal2.dat'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathSourceData,'/vd_legal2.dat > ',pathSourceData,'/vd_legal3.dat'])
    print('Executing: ', mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN citrus-parcel-current.py')
    mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-parcel-current.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN citrus-sales-current.py')
    mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-sales-current.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN citrus-owners-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-owners-current.py'
    #print mycmd
    #os.system(mycmd)

    print('RUN citrus-hist-current.py')
    mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-hist-current.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN citrus-land-current.py')
    mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-land-current.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN citrus-legal-current.py')
    mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-legal-current.py'
    os.system(mycmd)
    print(mycmd)

    #print 'RUN citrus-situs-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-situs-current.py'
    #os.system(mycmd)
    #print mycmd

    #print 'RUN citrus-bldg-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/citrus/citrus-bldg-current.py'
    #os.system(mycmd)
    #print mycmd
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_citrus from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    

    sql = "\\copy raw_citrus_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #sql = "\\copy raw_citrus_owners_new from 'owners_new.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #os.system(mycmd)
    #print mycmd   

    sql = "\\copy raw_citrus_land from 'land_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_citrus_legal from 'legal_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_citrus_hist from 'hist_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)   

    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    #process_raw_fdor(county)
    
    #-----------------------------------------------------------------------------------------
    # UPDATE TABLES
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_citrus as interim
        SET 
        zoning = land.zoning
        FROM raw_citrus_land as land
        WHERE interim.altkey = land.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    #----------------------------------------------------------------------------------------- 
    # join on valuation table to bring in valuation info
    #----------------------------------------------------------------------------------------- 
    sql = """UPDATE parcels_template_citrus
            SET
            mrkt_bld = hist.mrkt_bld,
            mrkt_ag = hist.mrkt_ag,
            mrkt_impr = hist.mrkt_impr,
            mrkt_lnd = hist.mrkt_lnd,
            mrkt_tot = hist.mrkt_tot,
            assd_tot = hist.assd_tot,
            exempt_tot = hist.exempt_tot,
            taxable_tot = hist.taxable_tot,
            tax_amt1 = hist.tax_amt1
            FROM raw_citrus_hist as hist
            WHERE parcels_template_citrus.altkey = hist.altkey and year = 2024;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #----------------------------------------------------------------------------------------- 
    # get values from fdor table
    #-----------------------------------------------------------------------------------------
    # TODO - CHANGE THIS AFTER 2023 FINAL DATA COMES IN
    sql = """UPDATE parcels_template_citrus as p
            SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt,
            sqft_htd = f.tot_lvg_area,
            s_zipcode = f.phy_zipcd,
            num_bldg = f.no_buldng,
            res_units = f.no_res_unts
            FROM parcels_fdor_2024 as f
            WHERE f.alt_key = p.altkey and f.co_no = 19;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    
    #-----------------------------------------------------------------------------------------
    # LOAD NORMALIZED LEGAL INTO DENORMALIZED TABLE
    #-----------------------------------------------------------------------------------------    
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_citrus_legal_denormal 
    SELECT 
        legal_normal.altkey,
        -- section 1
        MAX(CASE WHEN legal_normal.i = 1 THEN legal_normal.legal ELSE NULL END) AS legal1,

        -- section 2
        MAX(CASE WHEN legal_normal.i = 2 THEN legal_normal.legal ELSE NULL END) AS legal2,

        -- section 3
        MAX(CASE WHEN legal_normal.i = 3 THEN legal_normal.legal ELSE NULL END) AS legal3,
        
        -- section 4
        MAX(CASE WHEN legal_normal.i = 4 THEN legal_normal.legal ELSE NULL END) AS legal4,

        -- section 5
        MAX(CASE WHEN legal_normal.i = 5 THEN legal_normal.legal ELSE NULL END) AS legal5,

        -- section 6
        MAX(CASE WHEN legal_normal.i = 6 THEN legal_normal.legal ELSE NULL END) AS legal6
        
        FROM
            (SELECT 
                altkey,
                line_num,
                legal,
                row_number() OVER (PARTITION BY altkey ORDER BY line_num asc) AS i
                FROM raw_citrus_legal WHERE legal is not null
            ) AS legal_normal
            INNER JOIN 
                parcels_template_citrus AS interim ON legal_normal.altkey = interim.altkey
        GROUP BY legal_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_citrus
            SET
            legal_full = legal.legal_full,  
            legal1 = legal.legal1, 
            legal2 = legal.legal2, 
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_citrus_legal_denormal as legal
            WHERE parcels_template_citrus.altkey = legal.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()   

    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_citrus_sales_denormal 
    SELECT 
        sales_normal.altkey,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null        
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                --grantor,
                --grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_citrus_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_citrus AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_citrus as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_citrus_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on raw_citrus_owners_new table to bring in new owner info from end of 2014
    sql = """UPDATE parcels_template_citrus
            SET
            o_name1 = o.o_name1,  
            o_address1 = o.o_address1, 
            o_address2 = o.o_address2, 
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_citrus_owners_new as o
            WHERE parcels_template_citrus.altkey = o.altkey AND data_year = 2023"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()    



    
# =======================================================================================
# CLAY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_clay() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/clay/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    #-----------------------------------------------------------------------------------------
    # PRE-PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathSourceData,'/view_FLClayGIS1.csv > ',pathSourceData,'/gis1_strip.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathSourceData,'/gis1_strip.csv > ',pathSourceData,'/gis1_strip2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)    
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------  

    # 10/2019 - things changed - again
    # So, no MS-Access table, now just the GIS1.csv, etc files - but looks like they cleanly map to what we were doing.
    #Inside the Access Database, there are three main tables.
	#m1 (or GIS1.csv) contains property owner information 
	#m2 (or GIS2.csv) contains land information
	#m3 (or GIS3.csv) contains building information
    
    # GIS1 property / owner
    print('RUN clay-gis1-property-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/clay/clay-gis1-property-csv.py'
    print(mycmd)
    os.system(mycmd)

    # land
    print('RUN clay-gis2-land-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/clay/clay-gis2-land-csv.py'
    print(mycmd)
    os.system(mycmd)

    # building - view_FLClayGIS3.csv
    # 8/2022 - GIS version of table has many empty columns now - switch to other building file which seems ok
    #print 'RUN clay-gis3-building-csv.py'
    #mycmd = '/srv/tools/python/parcel_processing/clay/clay-gis3-building-csv.py'
    #print mycmd
    #os.system(mycmd)   

    # building - view_FLClayView3Building.csv
    # 8/2022 - GIS version of table has many empty columns now - switch to other building file which seems ok
    print('RUN clay-view_FLClayView3Building-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/clay/clay-view_FLClayView3Building-csv.py'
    print(mycmd)
    os.system(mycmd)     

    print('RUN clay-sales-view4-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/clay/clay-sales-view4-csv.py'
    print(mycmd)
    os.system(mycmd)    


    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_clay from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_clay_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_clay_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)   

    sql = "\\copy raw_clay_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE TABLES
    #----------------------------------------------------------------------------------------- 
    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff,
            max(cast(bldg.stories as integer)) as max_stories, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(bldg.sqft_adj as integer)) as sum_sqft_adj,
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_clay_bldg_sum
        from raw_clay_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_clay
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff,
            stories = bldg.max_stories,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            sqft_adj = bldg.sum_sqft_adj,
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_clay_bldg_sum as bldg
            WHERE parcels_template_clay.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on building table to bring in building info
    sql = """UPDATE parcels_template_clay
            SET
            zoning = land.zoning
            FROM raw_clay_land as land
            WHERE parcels_template_clay.pin = land.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()

    #-----------------------------------------------------------------------------------------
    # 3/11/2022 - add valuation info from FDOR data
    # contact PA - valuation info missing from property file
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_clay as p
        SET
            mrkt_tot = fdor.jv,
            mrkt_lnd = fdor.lnd_val,
            mrkt_ag = fdor.jv_class_use,
            mrkt_impr = fdor.spec_feat_val,
            assd_tot = fdor.av_nsd,
            taxable_tot = fdor.tv_nsd
        FROM parcels_fdor_2024 as fdor
        WHERE fdor.co_no = 20 and p.pin = fdor.parcel_id"""

    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    # Remove one friggin duplicate
    sql = """
        DELETE FROM parcels_template_clay 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY altkey), ctid 
                FROM parcels_template_clay) x 
                WHERE x.row_number > 1));
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()      


    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_clay_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null        
        
        FROM
            (SELECT 
                pin,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_multi,
                sale_bk,
                sale_pg,
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_clay_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_clay AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_clay as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        -- sale1_docnum = denormal.sale1_docnum,
        -- sale1_grantor = denormal.sale1_grantor,
        -- sale1_grantee = denormal.sale1_grantee,
        
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        -- sale2_docnum = denormal.sale2_docnum,
        -- sale2_grantor = denormal.sale2_grantor,
        -- sale2_grantee = denormal.sale2_grantee,
        
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        -- sale3_docnum = denormal.sale3_docnum,
        -- sale3_grantor = denormal.sale3_grantor,
        -- sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        -- sale4_docnum = denormal.sale4_docnum,
        -- sale4_grantor = denormal.sale4_grantor,
        -- sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg
        -- sale5_docnum = denormal.sale5_docnum,
        -- sale5_grantor = denormal.sale5_grantor        
        -- sale5_grantee = denormal.sale5_grantee
        
        FROM raw_clay_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# COLLIER COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================    
def process_raw_collier() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # create condo and subdiv files
    #-----------------------------------------------------------------------------------------
    sql_file = "/srv/mapwise_dev/county/collier/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    
    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/INT_LEGAL.csv > ',pathProcessing,'/source_data/INT_LEGAL2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd) 
    

    print('RUN collier-parcels.py')
    mycmd = '/srv/tools/python/parcel_processing/collier/collier-parcels.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN collier-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/collier/collier-sales.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN collier-legal.py')
    mycmd = '/srv/tools/python/parcel_processing/collier/collier-legal.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN collier-building.py')
    mycmd = '/srv/tools/python/parcel_processing/collier/collier-building.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN collier-subcondos.py')
    mycmd = '/srv/tools/python/parcel_processing/collier/collier-subcondos.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN collier-land.py'
    #mycmd = '/srv/tools/python/parcel_processing/collier/collier-land.py'
    #print mycmd
    #os.system(mycmd)
       

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_collier from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_collier_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_collier_legal from 'legal_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_collier_subcondos from 'subcondos_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    # OLD    
    #sql = "\\copy raw_collier_res460file from 'source_data/RES460FILE' with delimiter as ',' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # OLD
    #sql = "\\copy raw_collier_sublist from 'parcels_sublist.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_collier_bldg from 'buildings_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_collier_bldg_old from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_collier_bldg_lut_total from 'source_data/raw_data/bldg_class_lut_total.txt' with CSV HEADER delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_collier_bldg_lut_base from 'source_data/raw_data/bldg_class_lut_base_sqft.txt' with CSV HEADER delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # join on sub table to bring in sub info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_collier as p
            SET
            subdiv_nm = sub.description
            FROM raw_collier_subcondos as sub
            WHERE p.subdiv_id = sub.subdiv_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # join on sub table to bring in sub info
    #-----------------------------------------------------------------------------------------
    # OLD
    sql = """UPDATE parcels_template_collier as p
            SET
            subdiv_nm = sub.subdiv_nm
            FROM raw_collier_sublist as sub
            WHERE p.subdiv_id = sub.subdiv_id
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    #-----------------------------------------------------------------------------------------
    # create building sum table
    #-----------------------------------------------------------------------------------------
    sql = """SELECT 
            bldg.pin2, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            min(cast(bldg.yrblt_eff as integer)) as min_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd,
            -- collier has heated and adjusted
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_adj, 
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_collier_bldg_stats
        FROM raw_collier_bldg as bldg JOIN raw_collier_bldg_lut_base as bldg_lut ON bldg.class = bldg_lut.bldg_class
        GROUP BY bldg.pin2;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------    
    # join on building table to bring in building info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_collier
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.min_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_adj = bldg.sum_sqft_adj, 
            stories = bldg.max_stories
            FROM raw_collier_bldg_stats as bldg
            WHERE parcels_template_collier.pin2 = bldg.pin2;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # create building sum table
    #-----------------------------------------------------------------------------------------
    # OLD Version, but needed for stories
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            min(cast(bldg.yrblt_eff as integer)) as min_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd,
            -- collier has heated and adjusted
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_adj, 
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_collier_bldg_stats_old
        FROM raw_collier_bldg_old as bldg JOIN raw_collier_bldg_lut_base as bldg_lut ON bldg.class = bldg_lut.bldg_class
        GROUP BY bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------    
    # join on building table to bring in building info
    #-----------------------------------------------------------------------------------------
    # OLD Version, but needed for stories
    sql = """UPDATE parcels_template_collier
            SET
            --yrblt_act = bldg.min_yrblt_act,
            --yrblt_eff = bldg.min_yrblt_eff,
            --sqft_htd = bldg.sum_sqft_htd, 
            --sqft_adj = bldg.sum_sqft_adj, 
            stories = bldg.max_stories
            FROM raw_collier_bldg_stats_old as bldg
            WHERE parcels_template_collier.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------    
    # update building info for mtimmerman
    # for residential buildings with 2nd story - add 70% of base sqft to heated as well as total
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_collier
            SET
            sqft_adj = sqft_adj + (sqft_htd * .7)
            WHERE stories = 2 and lusedor = '01' ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """UPDATE parcels_template_collier
            SET
            sqft_htd = sqft_htd * 1.7
            WHERE stories = 2 and lusedor = '01' ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

     
    
    #-----------------------------------------------------------------------------------------
    # add building info from FDOR data
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_collier as p SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt
            #sqft_adj = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 21 and p.pin = f.parcel_id
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()


    #-----------------------------------------------------------------------------------------
    # LOAD NORMALIZED LEGAL INTO DENORMALIZED TABLE
    #-----------------------------------------------------------------------------------------    
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_collier_legal_denormal 
    SELECT 
        legal_normal.pin2,
        Null, -- legal_full
        -- section 1
        MAX(CASE WHEN legal_normal.i = 1 THEN legal_normal.legal ELSE NULL END) AS legal1,

        -- section 2
        MAX(CASE WHEN legal_normal.i = 2 THEN legal_normal.legal ELSE NULL END) AS legal2,

        -- section 3
        MAX(CASE WHEN legal_normal.i = 3 THEN legal_normal.legal ELSE NULL END) AS legal3,
        
        -- section 4
        MAX(CASE WHEN legal_normal.i = 4 THEN legal_normal.legal ELSE NULL END) AS legal4,

        -- section 5
        MAX(CASE WHEN legal_normal.i = 5 THEN legal_normal.legal ELSE NULL END) AS legal5,

        -- section 6
        MAX(CASE WHEN legal_normal.i = 6 THEN legal_normal.legal ELSE NULL END) AS legal6
        
        FROM
            (SELECT 
                pin2,
                seq,
                legal,
                row_number() OVER (PARTITION BY pin2 ORDER BY seq asc) AS i
                FROM raw_collier_legal WHERE legal is not null
            ) AS legal_normal
            INNER JOIN 
                parcels_template_collier AS interim ON legal_normal.pin2 = interim.pin2
        GROUP BY legal_normal.pin2;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_collier
            SET
            legal_full = legal.legal_full,  
            legal1 = legal.legal1, 
            legal2 = legal.legal2, 
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_collier_legal_denormal as legal
            WHERE parcels_template_collier.pin2 = legal.pin2;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_collier
            SET
            legal_full = concat_ws(' ', legal1, legal2, legal3, legal4, legal5, legal6);
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_collier_sales_denormal 
    SELECT 
        sales_normal.pin2,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_type ELSE NULL END) AS sale1_type,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
         Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_type ELSE NULL END) AS sale2_type,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_type ELSE NULL END) AS sale3_type,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
         Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_type ELSE NULL END) AS sale4_type,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_type ELSE NULL END) AS sale5_type,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null        
        
        FROM
            (SELECT 
                pin2,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                --vacant,
                sale_type,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                --grantor,
                --grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin2 ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin2 ORDER BY sale_date desc) AS i
                FROM raw_collier_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_collier AS interim ON sales_normal.pin2 = interim.pin2
        GROUP BY sales_normal.pin2;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_collier as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_qual = denormal.sale1_qual,
        sale1_typ = denormal.sale1_typ,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_qual = denormal.sale2_qual,
        sale2_typ = denormal.sale2_typ,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_qual = denormal.sale3_qual,
        sale3_typ = denormal.sale3_typ,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_qual = denormal.sale4_qual,
        sale4_typ = denormal.sale4_typ,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_qual = denormal.sale5_qual,
        sale5_typ = denormal.sale5_typ,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg
        
        FROM raw_collier_sales_denormal as denormal
        WHERE interim.pin2 = denormal.pin2;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()

    
# =======================================================================================
# COLUMBIA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_columbia() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/columbia/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    #sql = "\\copy raw_columbia_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    sql = "\\copy raw_columbia_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()

    
    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_columbia_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_columbia_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_columbia_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_columbia_sales_export SET sale2_date = split_part(sale2_date, '/', 3) || '-' || split_part(sale2_date, '/', 1) || '-' || split_part(sale2_date, '/', 2);
        
        UPDATE raw_columbia_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-0' || split_part(sale2_date, '-', 2) || '-' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 2)) = 1;

        UPDATE raw_columbia_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-' || split_part(sale2_date, '-', 2) || '-0' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_columbia_sales_export SET sale3_date = split_part(sale3_date, '/', 3) || '-' || split_part(sale3_date, '/', 1) || '-' || split_part(sale3_date, '/', 2);
        
        UPDATE raw_columbia_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-0' || split_part(sale3_date, '-', 2) || '-' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 2)) = 1;

        UPDATE raw_columbia_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-' || split_part(sale3_date, '-', 2) || '-0' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    # PIN	Name	Address1	Address2	City	State	ZIP
    #sql = "\\copy raw_columbia_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_columbia_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
        
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
 
    
    #-----------------------------------------------------------------------------------------
    # update sale info
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_columbia as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = CAST(split_part(denormal.sale1_date, '-', 1) as int),
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = CAST(split_part(denormal.sale2_date, '-', 1) as int),
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = CAST(split_part(denormal.sale3_date, '-', 1) as int),
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee,
        o_name1 = denormal.o_name1
        FROM raw_columbia_sales_export as denormal
        WHERE interim.pin_clean = replace(denormal.pin,'-',''); """ 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales excport, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_columbia as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            --o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_columbia_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# DESOTO COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_desoto() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # NOTE: Desoto uses docnum now
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/desoto/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('\nRUN desoto-convert-land-denormal.py')
    mycmd = '/srv/tools/python/parcel_processing/de_soto/desoto-convert-land-denormal.py'
    print(mycmd)
    os.system(mycmd)
    
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    sql = "\\copy raw_desoto_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    #sql = "\\copy raw_desoto_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_desoto_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_desoto_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_desoto_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_desoto_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_desoto_sales_export SET sale2_date = split_part(sale2_date, '/', 3) || '-' || split_part(sale2_date, '/', 1) || '-' || split_part(sale2_date, '/', 2);
        
        UPDATE raw_desoto_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-0' || split_part(sale2_date, '-', 2) || '-' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 2)) = 1;

        UPDATE raw_desoto_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-' || split_part(sale2_date, '-', 2) || '-0' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_desoto_sales_export SET sale3_date = split_part(sale3_date, '/', 3) || '-' || split_part(sale3_date, '/', 1) || '-' || split_part(sale3_date, '/', 2);
        
        UPDATE raw_desoto_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-0' || split_part(sale3_date, '-', 2) || '-' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 2)) = 1;

        UPDATE raw_desoto_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-' || split_part(sale3_date, '-', 2) || '-0' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    # strip dashes from pin - they are now putting dashes in main pin
    sql = """
        UPDATE raw_desoto_sales_export SET pin = replace(pin,'-','');
    """
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #sql = "\\copy raw_desoto_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    sql = "\\copy raw_desoto_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    #-----------------------------------------------------------------------------------------
    # set pin_clen
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_desoto
            SET pin_clean = replace(pin,'-','');
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update sale info
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_desoto as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = CAST(split_part(denormal.sale1_date, '-', 1) as int),
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = CAST(split_part(denormal.sale2_date, '-', 1) as int),
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = CAST(split_part(denormal.sale3_date, '-', 1) as int),
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee
        o_name1 = denormal.o_name1
        FROM raw_desoto_sales_export as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales excport, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_desoto as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            --o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_desoto_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()

# =======================================================================================
# DIXIE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_dixie() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/dixie/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN dixie-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/dixie/dixie-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_dixie_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in Dixie sales download

    sql = """
        UPDATE parcels_template_dixie as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_dixie_sales_dwnld as o
            WHERE p.pin = o.pin2_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # nullify s_city = 'UNINCORPORATED'  
    sql = """
        UPDATE parcels_template_dixie as p SET
            s_city = null
            WHERE p.s_city = 'UNINCORPORATED'
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update s_city to fill in postal city  
    sql = """
        UPDATE parcels_template_dixie as p SET
            s_city = o.po_name
            FROM zip_codes as o
            WHERE p.s_city is null and o.zip = p.s_zipcode
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()
    
# =======================================================================================
# DIXIE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================    
def process_raw_dixie2() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    #-----------------------------------------------------------------------------------------
    # STRIP BAD CHARS out of raw files
    #-----------------------------------------------------------------------------------------
    # generate a clean file with chars gt 127 removed - damn legal desc chars problem
    raw_file = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\bldg.txt'
    raw_file_clean = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\bldg_clean.txt'
    mycmd = '/srv/projects\\tools\\python\\lib\\strip_chars_gt_127.py ' + raw_file + ' '  + raw_file_clean
    print('Executing: ', mycmd)
    os.system(mycmd)

    raw_file = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\parcels.txt'
    raw_file_clean = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\parcels_clean.txt'
    mycmd = '/srv/projects\\tools\\python\\lib\\strip_chars_gt_127.py ' + raw_file + ' '  + raw_file_clean
    print('Executing: ', mycmd)
    os.system(mycmd)

    raw_file = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\land.txt'
    raw_file_clean = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\land_clean.txt'
    mycmd = '/srv/projects\\tools\\python\\lib\\strip_chars_gt_127.py ' + raw_file + ' '  + raw_file_clean
    print('Executing: ', mycmd)
    os.system(mycmd)

    raw_file = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\sales.txt'
    raw_file_clean = '/srv/mapwise_dev/county/dixie\\processing\\database\\current\\sales_clean.txt'
    mycmd = '/srv/projects\\tools\\python\\lib\\strip_chars_gt_127.py ' + raw_file + ' '  + raw_file_clean
    print('Executing: ', mycmd)
    os.system(mycmd)    

    #-----------------------------------------------------------------------------------------
    # create parcel, building, legal, sales tables
    #-----------------------------------------------------------------------------------------
    sql_file = "/srv/mapwise_dev/county/dixie/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # load data into tables
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_dixie_bldg from 'bldg_clean.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_dixie_parcel from 'parcels_clean.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_dixie_land from 'land_clean.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #sql = "\\copy raw_dixie_misc from 'misc.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = 'psql -d postgis -U postgres -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_dixie_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------    
    # create building sum table
    #-----------------------------------------------------------------------------------------
    sql = """SELECT 
            bldg.pin as pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrbuilt,
            min(cast(bldg.yrblt_eff as integer)) as max_yrbuilt,
            -- max(cast(bldg.stories as integer)) as max_stories,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_dixie_bldg_stats
        from raw_dixie_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # load raw_dixie_parcels into parcels_template
    #-----------------------------------------------------------------------------------------
    # NOTE: substring of legal to chunk it up 
    sql = """INSERT INTO parcels_template_dixie (pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse_d,
            legal_full,legal1,legal2,legal3,legal4,legal5,legal6,
            mrkt_lnd,mrkt_bld,mrkt_impr,mrkt_tot) 
            SELECT 
            pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse_d,
            legal1,
            substring(legal1 from 1 for 254),substring(legal1 from 255 for 254),substring(legal1 from 509 for 254),
            substring(legal1 from 763 for 254),substring(legal1 from 1017 for 254),substring(legal1 from 1271 for 254),
            mrkt_lnd,mrkt_bld,mrkt_impr,mrkt_tot
        FROM raw_dixie_parcel;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # join on building table to bring in building info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_dixie
            SET
            yrblt_act = bldg.min_yrbuilt,
            yrblt_eff = bldg.max_yrbuilt,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths
            -- stories = bldg.max_stories
            FROM raw_dixie_bldg_stats as bldg
            WHERE parcels_template_dixie.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_dixie_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_price,
                vacant,
                instrument,
                qual,
                multi,
                grantor,
                grantee,
                book,
                page,
                docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_dixie_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_dixie AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_dixie as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee
        FROM raw_dixie_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# DUVAL COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_duval() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    #process_raw_fdor(county)


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN duval-sales-current.py')
    mycmd = '/srv/tools/python/parcel_processing/duval/duval-sales-current.py'
    #print mycmd
    os.system(mycmd) 

    print('RUN duval-owner-current.py')
    mycmd = '/srv/tools/python/parcel_processing/duval/duval-owner-current.py'
    #print mycmd
    os.system(mycmd)

    print('RUN duval-unpack-combined-file.py')
    mycmd = '/srv/tools/python/parcel_processing/duval/duval-unpack-combined-file.py'
    #print mycmd
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # REMOVE DUPLICATE LINES FROM sales_new.txt
    #----------------------------------------------------------------------------------------- 
    mycmd = 'sort sales_new.txt | uniq > sales_new2.txt'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # create parcel, building, legal, sales tables
    #-----------------------------------------------------------------------------------------
    sql_file = "/srv/mapwise_dev/county/duval/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # load data into tables
    #-----------------------------------------------------------------------------------------
    # from sales.dex
    # AND get rid of duplicates command
    sql = "\\copy raw_duval_sales from 'sales_new2.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # from sales.dex
    sql = "\\copy raw_duval_owner from 'owner_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # from sales.dex
    sql = "\\copy raw_duval_situs from 'situs.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # from 2015_COMBINED_CERT.DEX
    #sql = "\\copy raw_duval_parcel from 'parcel.txt' with delimiter as E'\\t' null as ''"
    sql = "\\copy parcels_template_duval from 'parcel.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)        

    # building1 - year built, class, value, quality
    sql = "\\copy raw_duval_building1 from 'building1.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # building3 - beds, baths, stories rooms/units
    sql = "\\copy raw_duval_building3 from 'building3.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # building4 - sqft
    sql = "\\copy raw_duval_building4 from 'building4.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # from mary jane extract
    #sql = "\\copy raw_duval_building from 'parcels_building.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # legal
    sql = "\\copy raw_duval_legal from 'legal.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #exit()
	
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------    
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_duval_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual_code ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual_code ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual_code ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual_code ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantor ELSE NULL END) AS sale4_grantor,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual_code ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantor ELSE NULL END) AS sale5_grantor,
        Null                
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual_code,
                sale_bk,
                sale_pg,
                --multi,
                grantor,
                --grantee,
                --docnum,
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_duval_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_duval AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_duval as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        --sale4_grantee = denormal.sale4_grantee,
        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor
        --sale5_grantee = denormal.sale5_grantee
        FROM raw_duval_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_duval as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_duval_owner as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # join on luse 4-digit table to bring in code descriptions
    sql = """UPDATE parcels_template_duval
            SET
            luse_d = luse.luse_desc
            FROM codes_luse_four_digit as luse
            WHERE parcels_template_duval.luse = luse.luse and county = 'DUVAL';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # legal
    sql = """UPDATE parcels_template_duval
            SET
            legal1 = legal.legal1,
            legal2 = legal.legal2,
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_duval_legal as legal
            WHERE parcels_template_duval.pin  = legal.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # BUILDING INFO

    # year built - just first record for now
    sql = """UPDATE parcels_template_duval
            SET
            yrblt_act = bldg.yrblt_act,
            yrblt_eff = bldg.yrblt_eff
            FROM raw_duval_building1 as bldg
            WHERE parcels_template_duval.pin  = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
   
    # update num_bed - summarize for all buildings
    sql = """SELECT 
            bldg.pin, 
            sum(cast(split_part(bldg.bld_ut_unit ,'.',1) as integer)) as sum_units
        INTO raw_duval_building3_sum
        from raw_duval_building3 as bldg WHERE bld_ut_type = 'BR'
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # update num_bed
    sql = """UPDATE parcels_template_duval
            SET
            num_bed = b.sum_units
            FROM raw_duval_building3_sum as b
            WHERE parcels_template_duval.pin = b.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update num_bath - summarize for all buildings
    sql = """
            SELECT 
            bldg.pin, 
            sum(cast(split_part(bldg.bld_ut_unit ,'.',1) as integer)) as sum_units
        INTO raw_duval_building3b_sum
        from raw_duval_building3 as bldg WHERE bld_ut_type = 'BT'
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # update num_bath
    sql = """UPDATE parcels_template_duval
            SET
            num_bath = b.sum_units
            FROM raw_duval_building3b_sum as b
            WHERE parcels_template_duval.pin = b.pin and b.sum_units < 32000;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update stories - MAX for all buildings
    sql = """TRUNCATE raw_duval_building3_sum;
            SELECT 
            bldg.pin, 
            max(cast(split_part(bldg.bld_ut_unit ,'.',1) as integer)) as sum_units
        INTO raw_duval_building3c_sum
        from raw_duval_building3 as bldg WHERE bld_ut_type = 'SH'
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # update stories
    sql = """UPDATE parcels_template_duval
            SET
            stories = b.sum_units
            FROM raw_duval_building3c_sum as b
            WHERE parcels_template_duval.pin = b.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()      
    
    # update building sq feet info
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(bldg.sqft_eff as integer)) as sum_sqft_eff,
            count(*) as num_bldg
        INTO raw_duval_building4_sum
        from raw_duval_building4 as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """UPDATE parcels_template_duval
            SET
            sqft_htd = b.sum_sqft_htd,
            sqft_tot = b.sum_sqft_tot,
            sqft_adj = b.sum_sqft_eff,
            num_bldg = b.num_bldg
            FROM raw_duval_building4_sum as b
            WHERE parcels_template_duval.pin = b.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # UPDATE situs info
    sql = """UPDATE parcels_template_duval
            SET
            s_number  = s.s_number,
            s_pdir  = s.s_pdir,
            s_name = s.s_name,
            s_type = s.s_type,
            s_unit = s.s_unit,
            s_address = s.s_address,
            s_city = s.s_city,
            s_zipcode = s.s_zipcode
            FROM raw_duval_situs as s
            WHERE parcels_template_duval.pin = s.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # UPDATE subdivision info
    sql = """UPDATE parcels_template_duval
            SET
            subdiv_id  = s.subdiv_id,
            subdiv_nm  = s.subdiv_nm
            FROM raw_duval_parcel as s
            WHERE parcels_template_duval.pin = s.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# ESCAMBIA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_escambia() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/escambia/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN escambia-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/escambia/escambia-convert-sales.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN escambia-convert-sales-owner.py')
    mycmd = '/srv/tools/python/parcel_processing/escambia/escambia-convert-sales-owner.py'
    print(mycmd)
    os.system(mycmd)    

    # CERTIFIED FILE
    #print 'RUN escambia-raw-sales.py'
    #mycmd = '/srv/tools/python/parcel_processing/duval/escambia-raw-sales.py'
    #os.system(mycmd)
    #print mycmd

    # CERTIFIED FILE
    #print 'RUN escambia-raw-bldg.py'
    #mycmd = '/srv/tools/python/parcel_processing/duval/escambia-raw-bldg.py'
    #os.system(mycmd)
    #print mycmd    
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_escambia_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_escambia_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # CERTIFIED
    sql = "\\copy raw_escambia_bldg from 'parcels_cert_bldg.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #exit()

    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    sql = """
        UPDATE parcels_template_escambia as p SET
            o_name1 = f.o_name1,
            o_name2 = f.o_name2,
            o_address1 = f.o_address1,
            o_address2 = f.o_address2,
            o_address3 = f.o_address3,
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = null,
            o_country = null
            FROM raw_escambia_owner as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update building info from raw certified file
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            count(*) as num_bldg
        INTO raw_escambia_bldg_sum
        from raw_escambia_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """
        UPDATE parcels_template_escambia as p SET
            sqft_htd = f.sum_sqft_htd,
            sqft_tot = f.sum_sqft_tot,
            num_bldg = f.num_bldg
            FROM raw_escambia_bldg_sum as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     


    
    # close communication with the database
    cursor.close()
    connection.close()

# =======================================================================================
# FLAGLER COUNTY RAW - FDOR + WEB SALES DOWNLOAD VERSION
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_flagler() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/flagler/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN flagler-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/flagler/flagler-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN flagler-bldg.py')
    mycmd = '/srv/tools/python/parcel_processing/flagler/flagler-bldg.py'
    os.system(mycmd)
    print(mycmd)    
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_flagler_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_flagler_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_flagler as p SET
            o_name1 = o.o_name1,
            o_name2 = o.o_name2,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_flagler_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # create building sum table
    #-----------------------------------------------------------------------------------------
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            min(cast(bldg.yrblt_eff as integer)) as min_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(bldg.sqft_adj as integer)) as sum_sqft_adj, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths,
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_flagler_bldg_stats
        from raw_flagler_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------    
    # join on building table to bring in building info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_flagler
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.min_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd,
            sqft_adj = bldg.sum_sqft_adj, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds,
            stories = bldg.max_stories
            FROM raw_flagler_bldg_stats as bldg
            WHERE parcels_template_flagler.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()   

    #-----------------------------------------------------------------------------------------
    # FDOR source - move building sqft to adjusted
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_flagler as p SET
            sqft_adj = sqft_htd
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    sql = """
        UPDATE parcels_template_flagler as p SET
            sqft_htd = null
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()     


    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# FLAGLER COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_flagler_scrape() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------        
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/flagler/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    # load data into tables    
    #sql = "\\copy raw_flagler_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_flagler_parcel from 'parcels.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #sql = "\\copy raw_flagler_land from 'land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #sql = "\\copy raw_flagler_misc from 'misc.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = 'psql -d postgis -U postgres -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_flagler_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    # load raw_flagler_parcels into parcels_template
    # NOTE: substring of legal to chunk it up 
    sql = """INSERT INTO parcels_template_flagler (pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address, luse_d,
            legal_full,
            legal1,legal2,legal3,legal4,legal5,legal6,
            mrkt_lnd, mrkt_ag, mrkt_bld, mrkt_impr, mrkt_tot, assd_tot, exempt_tot, homestead) 
            SELECT 
            pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address, luse_d,
            legal1,
            substring(legal1 from 1 for 254),substring(legal1 from 255 for 254), substring(legal1 from 509 for 254),
            substring(legal1 from 763 for 254),substring(legal1 from 1017 for 254),substring(legal1 from 1271 for 254),
            mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot, assd_tot, exempt_tot, homestead
        FROM raw_flagler_parcel;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    #-----------------------------------------------------------------------------------------
    # add building and info from FDOR data
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_flagler as p SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt,
            sqft_htd = f.tot_lvg_area,
            lusedor = f.dor_uc
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 28 and p.pin = f.parcel_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # zero pad where necessary
    sql = """
        UPDATE parcels_template_flagler as p SET
            lusedor = '0' || lusedor
            WHERE length(lusedor) = 1;

        UPDATE parcels_template_flagler as p SET
            SET lusedor = substring(lusedor,2,2)
            WHERE length(lusedor) = 3;            
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # PIN_CLEAN
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_flagler as p SET
            pin_clean = replace(pin,'-','')
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # STR
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_flagler as p SET
            s_section = CAST(substr(pin,1,2) as int),
            s_township = substr(pin,4,2),
            s_range = substr(pin,7,2)
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_flagler_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        Null
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_price,
                vacant,
                instrument,
                qual,
                multi,
                grantor,
                --grantee,
                book,
                page,
                docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_flagler_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_flagler AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_flagler as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee
        FROM raw_flagler_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# FRANKLIN COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_fdor_franklin() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/franklin/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN franklin-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/franklin/franklin-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_franklin_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_franklin as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_franklin_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # close communication with the database
    cursor.close()
    connection.close()
    


# =======================================================================================
# GADSDEN COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_gadsden() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/gadsden/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN gadsden-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/gadsden/gadsden-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_gadsden_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_gadsden as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_gadsden_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# GILCHRIST COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_gilchrist() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/gilchrist/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN gilchrist-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/gilchrist/gilchrist-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_gilchrist_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # 3/8/2022 - update pin to make it clean
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE raw_gilchrist_sales_dwnld SET
            pin = pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_gilchrist as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_gilchrist_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()


# =======================================================================================
# GLADES COUNTY RAW - FDOR + WEB SALES DOWNLOAD VERSION
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_glades() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/glades/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN glades-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/glades/glades-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_glades_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in Glades sales download

    sql = """
        UPDATE parcels_template_glades as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_glades_sales_dwnld as o
            WHERE p.pin = replace(o.pin,'-','')
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# GLADES COUNTY RAW - SCRAPED VERSION
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_glades_scrape() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/glades/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    # load data into tables    
    #sql = "\\copy raw_glades_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_glades_parcel from 'parcels.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #sql = "\\copy raw_glades_land from 'land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #sql = "\\copy raw_glades_misc from 'misc.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = 'psql -d postgis -U postgres -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_glades_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create building sum table
    #sql = """SELECT 
    #        bldg.pin as pin, 
    #        min(cast(bldg.yrblt_act as integer)) as min_yrbuilt, 
    #        sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
    #        sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
    #        sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
    #        sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
    #    INTO raw_glades_bldg_stats
    #    from raw_glades_bldg as bldg
    #    group by bldg.pin;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # load raw_glades_parcels into parcels_template
    # NOTE: substring of legal to chunk it up 
    sql = """INSERT INTO parcels_template_glades (pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse,luse_d,lusedor,
            --legal_full,legal1,legal2,legal3,legal4,legal5,legal6,
            mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot,assd_tot,exempt_tot,taxable_tot) 
            SELECT 
            pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse,luse_d,lusedor,
            --legal1,
            --substring(legal1 from 1 for 254),substring(legal1 from 255 for 254),substring(legal1 from 509 for 254),
            --substring(legal1 from 763 for 254),substring(legal1 from 1017 for 254),substring(legal1 from 1271 for 254),
            mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot,assd_tot,exempt_tot,taxable_tot
        FROM raw_glades_parcel;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # join on building table to bring in building info
    #sql = """UPDATE parcels_template_glades
    #        SET
    #        yrblt_act = bldg.min_yrbuilt,  
    #        sqft_htd = bldg.sum_sqft_htd, 
    #        sqft_tot = bldg.sum_sqft_tot, 
    #        num_bath = bldg.sum_num_baths,
    #        num_bed = bldg.sum_num_beds
    #        FROM raw_glades_bldg_stats as bldg
    #        WHERE parcels_template_glades.pin = bldg.pin;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()  

    #-----------------------------------------------------------------------------------------
    # add building and info from FDOR data
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_glades as p SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt,
            sqft_htd = f.tot_lvg_area,
            s_address = f.phy_addr1,
            s_city = f.phy_city,
            s_zipcode = f.phy_zipcd
            --lusedor = f.dor_uc
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 32 and p.pin = f.parcel_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE parcels_template_glades as p SET
            s_number = CAST(split_part(f.phy_addr1, ' ', 1) as int)
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 32 and p.pin = f.parcel_id and split_part(f.phy_addr1, ' ', 1) ~ '^[0-9]+$'
            -- CAST(split_part(f.phy_addr1, ' ', 1) as int) > 0
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # zero pad where necessary
    sql = """
        UPDATE parcels_template_glades as p SET
            lusedor = '0' || lusedor
            WHERE length(lusedor) = 1;

        UPDATE parcels_template_glades as p SET
            SET lusedor = substring(lusedor,2,2)
            WHERE length(lusedor) = 3;              
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     
    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_glades_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_price,
                vacant,
                instrument,
                qual,
                multi,
                grantor,
                grantee,
                book,
                page,
                docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_glades_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_glades AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_glades as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee
        FROM raw_glades_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

# =======================================================================================
# GULF COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_gulf() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/gulf/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN gulf-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/gulf/gulf-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_gulf_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_gulf as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_gulf_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()

# =======================================================================================
# HAMILTON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hamilton() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/hamilton/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN hamilton-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/hamilton/hamilton-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_hamilton_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_hamilton as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_hamilton_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()

# =======================================================================================
# HARDEE COUNTY RAW - FDOR + WEB SALES DOWNLOAD VERSION
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hardee() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/hardee/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN hardee-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/hardee/hardee-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_hardee_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_hardee as p SET
            o_name1 = o.o_name1,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_hardee_sales_dwnld as o
            WHERE p.pin = o.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# HARDEE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hardee_scraped() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/hardee/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    # load data into tables    
    sql = "\\copy raw_hardee_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_hardee_parcel from 'parcels.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_hardee_land from 'land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_hardee_land_file from 'source_data/raw_data/land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    
    
    #sql = "\\copy raw_hardee_misc from 'misc.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = 'psql -d postgis -U postgres -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_hardee_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create building sum table
    sql = """SELECT 
            bldg.pin as pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrbuilt, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_hardee_bldg_stats
        from raw_hardee_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # load raw_hardee_parcels into parcels_template
    # NOTE: substring of legal to chunk it up 
    sql = """INSERT INTO parcels_template_hardee (pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse,luse_d,lusedor,
            legal_full,legal1,legal2,legal3,legal4,legal5,legal6,
            mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot) 
            SELECT 
            pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse,luse_d,lusedor,
            legal1,
            substring(legal1 from 1 for 254),substring(legal1 from 255 for 254),substring(legal1 from 509 for 254),
            substring(legal1 from 763 for 254),substring(legal1 from 1017 for 254),substring(legal1 from 1271 for 254),
            mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot
        FROM raw_hardee_parcel;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_hardee
            SET
            yrblt_act = bldg.min_yrbuilt,  
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_hardee_bldg_stats as bldg
            WHERE parcels_template_hardee.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_hardee_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_price,
                vacant,
                instrument,
                qual,
                multi,
                grantor,
                grantee,
                book,
                page,
                docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_hardee_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_hardee AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_hardee as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee
        FROM raw_hardee_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # Update pin_clean
    sql = "update parcels_template_hardee set pin_clean = replace(pin, '-', '')"
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# HENDRY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hendry() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/hendry/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------


    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    #sql = "\\copy raw_hendry_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_hendry_sales_dwnld from 'source_data/sales_current.csv'  CSV NULL as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    # make sure the sales are in yyyy-mm-dd format
    sql = """
        UPDATE raw_hendry_sales_dwnld SET sale_date = split_part(sale_date, '/', 3) || '-' || split_part(sale_date, '/', 1) || '-' || split_part(sale_date, '/', 2);
        
        UPDATE raw_hendry_sales_dwnld SET sale_date = split_part(sale_date, '-', 1) || '-0' || split_part(sale_date, '-', 2) || '-' || split_part(sale_date, '-', 3)
            WHERE length(split_part(sale_date, '-', 2)) = 1;

        UPDATE raw_hendry_sales_dwnld SET sale_date = split_part(sale_date, '-', 1) || '-' || split_part(sale_date, '-', 2) || '-0' || split_part(sale_date, '-', 3)
            WHERE length(split_part(sale_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # strip monetary decoration    
    sql = """
        UPDATE raw_hendry_sales_dwnld SET sale_amt = replace(sale_amt, '$', '');
        UPDATE raw_hendry_sales_dwnld SET sale_amt = replace(sale_amt, '.00', '');
        UPDATE raw_hendry_sales_dwnld SET sale_amt = replace(sale_amt, ',', '');        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # PIN	Name	Address1	Address2	City	State	ZIP
    #sql = "\\copy raw_hendry_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    #sql = "\\copy raw_hendry_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    #exit()
        
        
    #-----------------------------------------------------------------------------------------
    # set pin_clen
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE raw_hendry_sales_dwnld
            SET pin = replace(replace(replace(pin,'-',''), ' ',''),'.','');
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()     
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # set pin_clen
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_hendry
            SET pin_clean = replace(replace(replace(pin,'-',''), ' ',''),'.','');
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in Hendry sales download

    sql = """
        UPDATE parcels_template_hendry as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_hendry_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    #exit()

    
# =======================================================================================
# HENDRY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hendry_RAW_OLD() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/hendry/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------     

    # sales table
    print('RUN hendry-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/hendry/hendry-sales.py'
    print(mycmd)
    os.system(mycmd)
    
    # land table
    print('RUN hendry-land.py')
    mycmd = '/srv/tools/python/parcel_processing/hendry/hendry-land.py'
    print(mycmd)
    os.system(mycmd)

    # NAL table    
    print('RUN hendry-nal.py')
    mycmd = '/srv/tools/python/parcel_processing/hendry/hendry-nal.py'
    print(mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_hendry from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)


    sql = "\\copy raw_hendry_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_hendry_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd) 
    
    #-----------------------------------------------------------------------------------------
    # USE FDOR CERTIFIED VALUES - !!!! CHANGE EACH YEAR !!!!
    #-----------------------------------------------------------------------------------------
    # Problem - reviewing 2013 certifed values - raw data from Hendry not matching up
    # Solution - drop back to using fdor certified values
    sql = """UPDATE parcels_template_hendry as p
        SET
            mrkt_tot = fdor.jv,
            mrkt_lnd = fdor.lnd_val,
            mrkt_ag = fdor.jv_class_use,
            mrkt_impr = fdor.spec_feat_val,
            assd_tot = fdor.av_nsd,
            taxable_tot = fdor.tv_nsd
        FROM parcels_fdor_2024 as fdor
        WHERE p.pin = fdor.parcel_id"""

    print(sql)
    cursor.execute(sql)
    connection.commit()
        
    
    #-----------------------------------------------------------------------------------------
    # LOAD NORNALIZED SALES INTO DENORMALIZED SALES TABLE
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_hendry_sales_denormal 
    SELECT 
        sales_normal.altkey,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_price ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.vacant ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.instrument ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.qual ELSE NULL END) AS sale4_qual,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.multi ELSE NULL END) AS sale4_multi,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.book ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.page ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_price ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.vacant ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.instrument ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.qual ELSE NULL END) AS sale5_qual,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.multi ELSE NULL END) AS sale5_multi,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.book ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.page ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_price,
                vacant,
                instrument,
                qual,
                multi,
                grantor,
                grantee,
                book,
                page,
                docnum,
                --row_number() OVER (PARTITION BY altkey ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_hendry_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_hendry AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_hendry as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        
        FROM raw_hendry_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# HERNANDO COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hernando() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # PRE-PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #del xx.txt
    
    mycmd = ''.join(["sed -e 's:\t\tMERGED TO KEY:\tMERGED TO KEY/:g' ",pathSourceData,'/ERAFILE-FULL.TXT > ',pathSourceData,'/ERAFILE-FULL_strip.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathSourceData,'/ERAFILE-FULL_strip.txt > ',pathSourceData,'/ERAFILE-FULL_strip2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/ERAFILE-FULL_strip.txt > ',pathProcessing,'/source_data/ERAFILE-FULL_strip2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN hernando-convert-generic.py')
    mycmd = '/srv/tools/python/parcel_processing/hernando/hernando-erafile-current.py'
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_hernando from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    

    #exit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    
# =======================================================================================
# HIGHLANDS COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_highlands() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
 
    # create condo and subdiv files
    sql_file = "/srv/mapwise_dev/county/highlands/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/vac_impr.txt > ',pathProcessing,'/source_data/vac_impr2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN highlands-convert-generic.py')
    mycmd = '/srv/tools/python/parcel_processing/highlands/highlands-convert-generic.py'
    print(mycmd)
    os.system(mycmd) 

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_highlands from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # sales file is not used
    
    sql = "\\copy raw_highlands_land from 'source_data/raw_data/land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # pin is padded with spaced
    sql = "UPDATE raw_highlands_land SET strap = trim(strap)"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # add building info from FDOR data
    #-----------------------------------------------------------------------------------------
    # highlands provides effective area to fdor
    sql = """
        UPDATE parcels_template_highlands as p SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt,
            sqft_adj = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE d_county = 'HIGHLANDS' and p.pin = f.parcel_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    
# =======================================================================================
# HILLSBOROUGH COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_hillsborough() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
 
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/hillsborough/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/hillsborough/processing/database/current/source_data/allsales.csv'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = 'rm /srv/mapwise_dev/county/hillsborough/processing/database/current/source_data/parcel.csv'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/hillsborough/processing/database/current/source_data/parcel.csv /srv/mapwise_dev/county/hillsborough/processing/vector/propapp/current/source_data/parcel.dbf'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/hillsborough/processing/database/current/source_data/allsales.csv /srv/mapwise_dev/county/hillsborough/processing/vector/propapp/current/source_data/allsales.dbf'
    print(mycmd)
    os.system(mycmd)
    

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    
    # this deletes a column from csv file. Sometimes approasiuers will add en extra column, or 2 or 3 or more between exports they provide to the public.
    # instead of changing python code to increment / decrement all the fields, just delete the extra data!
    #cut -d, -f1 --complement parcel.csv > parcel_cut.csv
    mycmd = ''.join(["cut -d, -f1 --complement ",pathProcessing,'/source_data/parcel.csv > ',pathProcessing,'/source_data/parcel_cut.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # 7/3 removed parcel_cut logic
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/parcel_cut.csv > ',pathProcessing,'/source_data/parcel2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/allsales.csv > ',pathProcessing,'/source_data/allsales2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/allsales2.csv > ',pathProcessing,'/source_data/allsales3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)     
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # parcels_sales.txt
    print('\nRUN hillsborough-allsales.py')
    mycmd = '/srv/tools/python/parcel_processing/hillsborough/hillsborough-allsales.py'
    print(mycmd)
    os.system(mycmd)
    

    # parcels_new.txt
    print('\nRUN hillsborough-convert-parcel-atts.py')
    mycmd = '/srv/tools/python/parcel_processing/hillsborough/hillsborough-convert-parcel-atts.py'
    print(mycmd)
    os.system(mycmd)
     

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_hillsborough from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_hillsborough_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_hillsborough_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_hillsborough_land_luse from 'source_data/raw_data/lu_lnd_use.unl' with CSV HEADER DELIMITER '|' NULL as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)    
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # LOAD NORNALIZED SALES INTO DENORMALIZED SALES TABLE
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_hillsborough_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,
        
        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_amt,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_docnum,
                sale_grantor,
                sale_grantee,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_hillsborough_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_hillsborough AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 



    #-----------------------------------------------------------------------------------------
    # COPY DENORMALIZED SALES vals into parcels_template_hillsborough
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_hillsborough as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,
        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        FROM raw_hillsborough_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # add building info from FDOR data
    #-----------------------------------------------------------------------------------------
    # highlands provides effective area to fdor
    sql = """
        UPDATE parcels_template_hillsborough as p SET
            sqft_tot = f.tot_lvg_area
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 39 and p.pin2 = f.parcel_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
      
    
    # close communication with the database
    cursor.close()
    connection.close()

    

# =======================================================================================
# HOLMES COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_holmes() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/holmes/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN holmes-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/holmes/holmes-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_holmes_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in Holmes sales download

    sql = """
        UPDATE parcels_template_holmes as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_holmes_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# INDIAN_RIVER COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_indian_river() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # PRE-PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------  
    
    #mycmd = ''.join(["sed -e 's:\t\tMERGED TO KEY:\tMERGED TO KEY/:g' ",pathSourceData,'/ERAFILE-FULL.TXT > ',pathSourceData,'/ERAFILE-FULL_strip.txt'])
    mycmd = 'fix_csv_cr.sh source_data/WebExport_PROPERTY.TXT source_data/WebExport_PROPERTY2.TXT "\t" 20'
    print('Executing: ', mycmd)
    os.system(mycmd)  

    # 5/14/24 - now having issues with OWNER file# removed extra line feedss for about 4 records and it worked
    # Tried the fix below and it didn;t work - different in number of fields per record.
    mycmd = 'fix_csv_cr.sh source_data/WebExport_OWNER.TXT source_data/WebExport_OWNER2.TXT "\t" 20'
    print('Executing: ', mycmd)
    os.system(mycmd)     
    
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN indian_river-property.py')
    mycmd = '/srv/tools/python/parcel_processing/indian_river/indian-river-property.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN indian_river-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/indian_river/indian-river-sales.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN indian_river-owner.py')
    # input:
    # output: 
    mycmd = '/srv/tools/python/parcel_processing/indian_river/indian-river-owner.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN indian_river-values.py')
    mycmd = '/srv/tools/python/parcel_processing/indian_river/indian-river-values.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN indian_river-land.py')
    mycmd = '/srv/tools/python/parcel_processing/indian_river/indian-river-land.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN indian_river-nal.py')
    mycmd = '/srv/tools/python/parcel_processing/indian_river/indian-river-nal.py'
    print(mycmd)
    os.system(mycmd)

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/indian_river/processing/database/sql_files/create_raw_tables.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_indian_river from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    sql = "\\copy raw_indian_river_values from 'parcels_values.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_indian_river_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_indian_river_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_indian_river_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    
    
    sql = "\\copy raw_indian_river_nal from 'parcels_nal.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()

    #-----------------------------------------------------------------------------------------
    # UPDATE land use from nal
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_indian_river
            SET
            lusedor = nal.lusedor
            FROM raw_indian_river_nal as nal
            WHERE parcels_template_indian_river.pin = nal.pin ;
            
            UPDATE parcels_template_indian_river
            SET
            luse = '0400',
            luse_d = 'Condominiums'
            FROM raw_indian_river_nal as nal
            WHERE parcels_template_indian_river.pin = nal.pin AND parcels_template_indian_river.lusedor = '04'
            """
    print(sql)
    cursor.execute(sql)
    connection.commit()
	
    #-----------------------------------------------------------------------------------------
    # UPDATE owner info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_indian_river
            SET
            o_name1 = owner.o_name1,
            o_name2 = owner.o_name2,
            o_name3 = owner.o_name3,
            o_address1 = owner.o_address1,
            o_address2 = owner.o_address2,
            o_address3 = owner.o_address3,
            o_city = owner.o_city,
            o_state = owner.o_state,
            o_zipcode = owner.o_zipcode,
            o_zipcode4 = owner.o_zipcode4
            FROM raw_indian_river_owner as owner
            WHERE parcels_template_indian_river.altkey = owner.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # UPDATE values
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_indian_river
            SET
            mrkt_bld = values.mrkt_bld,
            mrkt_impr = values.mrkt_impr,
            mrkt_lnd = values.mrkt_lnd,
            mrkt_ag = values.mrkt_ag,
            mrkt_tot = values.mrkt_tot,
            assd_tot = values.assd_tot,
            exempt_tot = values.exempt_tot,
            taxable_tot = values.taxable_tot,
            homestead = values.homestead,
            tax_amt1 = values.tax_amt1
            FROM raw_indian_river_values as values
            WHERE parcels_template_indian_river.altkey = values.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # UPDATE land use from land file
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_indian_river
            SET
            luse = land.luse,
            luse_d = land.luse_d,
            lusedor = land.lusedor
            FROM raw_indian_river_land as land
            WHERE parcels_template_indian_river.altkey = land.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()          
    
    # update luse_d from LUT
    sql = """UPDATE parcels_template_indian_river as interim
        SET 
        luse_d = luse.luse_desc
        FROM codes_luse_four_digit as luse
        WHERE interim.luse = luse.luse and county = 'INDIAN_RIVER';
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # get building info from FDOR - Quick Fix
    # UNLESS WE NEED THE LATEST
    # FIGURE IT OUT LATER TO GET FROM RAW DATA
    # update assessed and taxable totals from FDOR !!!!!! CHANGE for 2016 !!!!
    sql = """UPDATE parcels_template_indian_river as interim
        SET 
        --assd_tot = fdor.av_nsd,
        --taxable_tot = fdor.tv_nsd,
        --mrkt_ag = fdor.jv_class_use
        yrblt_eff = fdor.eff_yr_blt,
        yrblt_act = fdor.act_yr_blt,
        sqft_htd = fdor.tot_lvg_area,
        res_units = fdor.no_res_unts,
        num_bldg = fdor.no_buldng,
        s_address = fdor.phy_addr1,
        s_city = fdor.phy_city,
        s_zipcode = fdor.phy_zipcd
        FROM parcels_fdor_2024 as fdor
        WHERE interim.pin = fdor.parcel_id and fdor.co_no = 41;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
 
    sql = """UPDATE parcels_template_indian_river as interim
        SET  
            legal1 = substring(legal_full FROM 1 FOR 255),
            legal2 = substring(legal_full FROM 256 FOR 255),
            legal3 = substring(legal_full FROM 511 FOR 255),
            legal4 = substring(legal_full FROM 766 FOR 255),
            legal5 = substring(legal_full FROM 1021 FOR 255),
            legal6 = substring(legal_full FROM 1276 FOR 255)
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_indian_river_sales_denormal 
    SELECT 
        sales_normal.altkey,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual_code ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual_code ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual_code ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.vacant ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.instrument ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.qual_code ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.book ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.page ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.vacant ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.instrument ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.qual_code ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.book ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.page ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                vacant,
                instrument,
                qual_code,
                book,
                page,
                --multi,
                grantor,
                grantee,
                docnum,
                --row_number() OVER (PARTITION BY altkey ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_indian_river_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_indian_river AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_indian_river as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        
        FROM raw_indian_river_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    
    # close communication with the database
    cursor.close()
    connection.close()


    #exit()
    
# =======================================================================================
# JACKSON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_jackson() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/jackson/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN jackson-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/jackson/jackson-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_jackson_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_jackson as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_jackson_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()   

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# JEFFERSON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_jefferson() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/jefferson/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN jefferson-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/jefferson/jefferson-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_jefferson_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_jefferson as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_jefferson_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# LAFAYETTE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_lafayette() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/lafayette/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    #sql = "\\copy raw_lafayette_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_lafayette_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' WITH CSV HEADER delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_lafayette_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # make sure the sales are in yyyy-mm-dd format
    # make pin a clean version
    sql = """
        UPDATE raw_lafayette_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_lafayette_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_lafayette_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;

        UPDATE raw_lafayette_sales_export SET pin = replace(pin,'-','');
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #exit()
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names and mailing addresses are included in the sales export
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    #
    # new 3/15/2022
    sql = """
        UPDATE parcels_template_lafayette as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            --o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_lafayette_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # old
    sql = """
        UPDATE parcels_template_lafayette as p SET
            o_name1 = o.o_name1,
            o_address1 = null,
            o_address2 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null
            FROM raw_lafayette_sales_export as o
            WHERE p.pin = o.pin and o.sale1_date > '2021-09-01'
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # split out o_city, o_state, o_zipcode
    sql = """
        UPDATE parcels_template_lafayette as p SET
            o_city = trim(substring(o_address2 from 1 for 20)),
            o_state = substring(o_address2 from 21 for 2),
            o_zipcode = substring(o_address2 from 24 for 5)
            WHERE o_city = '' and o_state = ''
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# LAKE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# NOTE !!!- The code has hard-coded years in it !!!!
# =======================================================================================
def process_raw_lake() :

    # Process shapefile

    # Process new sales file from PA

    # Process FDOR?

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    


    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/lake/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/lake/processing/database/current/source_data/Taxparcels.csv'
    print(mycmd)
    #os.system(mycmd)
        
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/lake/processing/database/current/source_data/Taxparcels.csv /srv/mapwise_dev/county/lake/processing/vector/propapp/current/source_data/Taxparcels.dbf'
    #print mycmd
    #os.system(mycmd)   

    # csvkit command
    #mycmd = 'in2csv ./source_data/2021_Sales.xls > ./source_data/2021_Sales.csv'
    #print mycmd	
    #os.system(mycmd)
    
    # csvkit command
    #mycmd = 'in2csv ./source_data/2022_Sales.xls > ./source_data/2022_Sales.csv'
    #print mycmd	
    #os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    
    # NOTE - WATCH OUT for changing extensions from txt to csv

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/NALExtractPublic.csv > ',pathProcessing,'/source_data/NALExtractPublic2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Sales.csv > ',pathProcessing,'/source_data/Sales2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:NULL::g' ",pathProcessing,'/source_data/Sales2.csv > ',pathProcessing,'/source_data/Sales3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # Golden ascii cleansing
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/Sales3.csv > ',pathProcessing,'/source_data/Sales4.csv'])
    # mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/SalesData.csv > ',pathProcessing,'/source_data/SalesData2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:NULL::g' ",pathProcessing,'/source_data/Bldg.csv > ',pathProcessing,'/source_data/Bldg2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Taxparcels.csv > ',pathProcessing,'/source_data/Taxparcels2.csv'])
    print('Executing: ', mycmd)
    #os.system(mycmd)
    
    # Golden ascii cleansing
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/Legal_with_Living.txt > ',pathProcessing,'/source_data/Legal_with_Living2.csv'])
    # mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/SalesData.csv > ',pathProcessing,'/source_data/SalesData2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------

    print('RUN lake-address-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-address-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-nal-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-nal-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-sales-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-bldg-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-bldg-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-land-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-land-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-legal-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-legal-csv.py'
    print(mycmd)
    os.system(mycmd)
    


    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_lake_address from 'address_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy parcels_template_lake from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_lake_land from 'land_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_lake_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_lake_building from 'bldg_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_lake_legal from 'legal_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()   


    #-----------------------------------------------------------------------------------------
    # UPDATE PIN
    #-----------------------------------------------------------------------------------------
    #sql = "UPDATE parcels_template2_lake SET pin_clean = pin"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    #sql = "UPDATE raw_lake_sales SET pin = replace(pin,'-','')"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    #exit()       

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    #process_raw_fdor(county)

    # clean up s_city
    sql = """
        UPDATE parcels_template_lake as p SET
            s_city = replace(s_city,' FL','')
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    # update luse and luse_d from land table
    sql = """
        UPDATE parcels_template_lake as p SET
            luse = land_luse,
            luse_d = land_luse_d
            FROM raw_lake_land as lnd
            WHERE lnd.altkey = p.altkey
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # update s_address
    sql = """
        UPDATE parcels_template_lake as p SET
            s_number = a.s_number,
            s_pdir = a.s_pdir,
            s_name = a.s_name,
            s_type = a.s_type,
            s_sdir = a.s_sdir,
            s_address = a.s_address
            FROM raw_lake_address as a
            WHERE a.altkey = p.altkey
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # update legal from legal table
    # Only 1 line per legal file
    sql = """
        UPDATE parcels_template_lake as p SET
            legal1 = leg.legal
            FROM raw_lake_legal as leg
            WHERE leg.pin = p.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # create building sum table
    sql = """SELECT 
            bldg.altkey, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd --, 
            -- sum(cast(trunc(cast(bldg.beds as numeric)) as integer)) as sum_num_beds,
            -- sum(cast(trunc(cast(bldg.fullbaths as numeric)) as integer)) as sum_num_baths
        INTO raw_lake_building_sum
        from raw_lake_building as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_lake
            SET
            yrblt_act = bldg.min_yrblt_act,  
            sqft_htd = bldg.sum_sqft_htd --, 
            -- num_bath = bldg.sum_num_baths,
            -- num_bed = bldg.sum_num_beds
            FROM raw_lake_building_sum as bldg
            WHERE parcels_template_lake.altkey = bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_lake_sales_denormal 
    SELECT 
        sales_normal.altkey,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --sale_multi,
                --sale_grantor,
                sale_grantee,
                --docnum,
                --row_number() OVER (PARTITION BY altkey ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_lake_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_lake AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_lake as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        FROM raw_lake_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    
    
    #exit()



# =======================================================================================
# LAKE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# NOTE !!!- The code has hard-coded years in it !!!!
# =======================================================================================
def process_raw_lake_2022_01_01() :

    # Process shapefile

    # Process new sales file from PA

    # Process FDOR?

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    


    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/lake/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/lake/processing/database/current/source_data/Taxparcels.csv'
    print(mycmd)
    os.system(mycmd)
        
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/lake/processing/database/current/source_data/Taxparcels.csv /srv/mapwise_dev/county/lake/processing/vector/propapp/current/source_data/Taxparcels.dbf'
    print(mycmd)
    os.system(mycmd)   

    # csvkit command
    mycmd = 'in2csv ./source_data/2021_Sales.xls > ./source_data/2021_Sales.csv'
    print(mycmd)	
    os.system(mycmd)
    
    # csvkit command
    mycmd = 'in2csv ./source_data/2022_Sales.xls > ./source_data/2022_Sales.csv'
    print(mycmd)	
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/2022_Sales.csv > ',pathProcessing,'/source_data/2022_Sales2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/2021_Sales.csv > ',pathProcessing,'/source_data/2021_Sales2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Taxparcels.csv > ',pathProcessing,'/source_data/Taxparcels2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------

    print('RUN lake-sales-2021.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-sales-2021.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-sales-2022.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-sales-2022.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN lake-parcels-current.py')
    mycmd = '/srv/tools/python/parcel_processing/lake/lake-parcels-current.py'
    print(mycmd)
    os.system(mycmd)
       
      
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template2_lake from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_lake_sales from 'sales_2022.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_lake_sales from 'sales_2021.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_lake_building from 'source_data/D38X.txt' with CSV HEADER delimiter as '|' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # UPDATE PIN
    #-----------------------------------------------------------------------------------------
    sql = "UPDATE parcels_template2_lake SET pin_clean = pin"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "UPDATE raw_lake_sales SET pin = replace(pin,'-','')"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()       

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # Update FDOR data with data from latest parcel shp
    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_lake as p SET
            o_name1 = f.o_name1,
            o_address1 = f.o_address1,
            o_address2 = null, -- fdor has most o_address1's here
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_country = f.o_country,
            subdiv_id = f.subdiv_id,
            --subdiv_id2 = f.subdiv_id2,
            subdiv_nm = f.subdiv_nm,
            luse = f.luse, -- not sure why but many luse codes in fdor version are wrong, eg select * from parcels_fdor_2024 where co_no = 45 and alt_key = '2515953'
            luse_d = f.luse_d,
            lusedor = f.lusedor,
            yrblt_act = f.yrblt_act
            --s_address = f.phy_addr1,
            --s_city = f.phy_city,
            --s_zipcode = f.phy_zipcd
            FROM parcels_template2_lake as f
            WHERE p.altkey = f.altkey
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # clean up s_city
    sql = """
        UPDATE parcels_template_lake as p SET
            s_city = replace(s_city,' FL','')
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # create building sum table
    sql = """SELECT 
            bldg.altkey, 
            min(cast(bldg.bldgyearbuilt as integer)) as min_yrblt_act, 
            sum(cast(bldg.totallivgarea as integer)) as sum_sqft_htd, 
            sum(cast(trunc(cast(bldg.beds as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.fullbaths as numeric)) as integer)) as sum_num_baths
        INTO raw_lake_building_sum
        from raw_lake_building as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_lake
            SET
            yrblt_act = bldg.min_yrblt_act,  
            sqft_htd = bldg.sum_sqft_htd, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_lake_building_sum as bldg
            WHERE parcels_template_lake.altkey = bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    #exit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    
# =======================================================================================
# LEE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_lee() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm -r /srv/mapwise_dev/county/lee/processing/database/current/source_data/parcels.csv'
    print(mycmd)
    os.system(mycmd)  
    
    mycmd = 'ogr2ogr -overwrite -f "CSV" /srv/mapwise_dev/county/lee/processing/database/current/source_data/parcels.csv /srv/mapwise_dev/county/lee/processing/database/current/source_data/parcels.DBF'
    print(mycmd)
    os.system(mycmd) 
    
    #mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/allsales.csv > ',pathProcessing,'/source_data/allsales2.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    mycmd = ''.join(["tail -n +2 ",pathProcessing,"/source_data/parcels.csv | sort  | uniq > ",pathProcessing,"/source_data/parcels1.csv"])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #tr -cd '\11\12\15\40-\133\135-\176' < Legals.txt > Legals2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/parcels1.csv > ',pathProcessing,'/source_data/parcels2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN lee-convert-current.py')
    mycmd = '/srv/tools/python/parcel_processing/lee/lee-convert-current.py'
    print(mycmd) 
    os.system(mycmd)
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_lee from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd) 
    os.system(mycmd)

    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()

# =======================================================================================
# LEON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_leon() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------        
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/leon/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    
    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    # mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'\\source_data\\CERT.txt > ',pathProcessing,'\\source_data\\CERT2.txt'])
    # Cannot use tr because it does one for one search / replace or delete
    # TODO: SWITCH TO NEW LAYOUT!!!!!
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Certified_Data.csv > ',pathProcessing,'/source_data/CERT2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # HUGE!
    # use -c as complement set to replace chars like you think should happen!
    # replace instead of delete in order to maintain column locations, e.g. deleting a char would move the column position of data after it -1.
    # tr -c '\11\12\15\40-\176' ' ' < CERT2.txt > CERT3.txt
    
    mycmd = ''.join(["tr -c '\\11\\12\\15\\40-\\133\\135-\\176' ' ' < ",pathProcessing,'/source_data/CERT2.txt > ',pathProcessing,'/source_data/CERT3.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # need to figure out a way to not delete char, but rather replace with a space
    #mycmd = ''.join(['cat ',pathProcessing,'/source_data/CERT2.txt | ',"tr '\\11\\12\\15\\40-\\133\\135-\\176' ' ' > ",pathProcessing,'/source_data/CERT3.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/SalesData.csv > ',pathProcessing,'/source_data/SalesData2.csv'])
    # mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/SalesData.csv > ',pathProcessing,'/source_data/SalesData2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/SalesHistory.csv > ',pathProcessing,'/source_data/SalesHistory2.csv'])
    ##mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/SalesHistory.csv > ',pathProcessing,'/source_data/SalesHistory2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

  
    
    print('RUN leon-parcels-current.py')
    mycmd = '/srv/tools/python/parcel_processing/leon/leon-parcels-current.py'
    print(mycmd)
    os.system(mycmd)
    

    print('RUN leon-sales-current.py')
    mycmd = '/srv/tools/python/parcel_processing/leon/leon-sales-data-csv.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN leon-sales-history.py')
    mycmd = '/srv/tools/python/parcel_processing/leon/leon-sales-history-csv.py'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_leon from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_leon_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_leon_sales from 'sales_history.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # uncomment me to troubleshoot
    # like if a script fails and/or processed data doesn't properly load in a table
    # /srv/tools/bash/parcels/scripts_county/leon/leon_3_download_attributes.sh
    # 
    # check if all raw files are there
    # make sure there are head files of the raw data
    
    #exit()
	
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_leon_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee          
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_amt,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_grantor,
                sale_grantee,
                sale_bk,
                sale_pg,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_leon_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_leon AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_leon as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_leon_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

    
# =======================================================================================
# LEVY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_levy() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/levy/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN levy-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/levy/levy-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_levy_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_levy as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_levy_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# LEVY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_levy_scrape() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------        
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/levy/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS FILES
    #-----------------------------------------------------------------------------------------
    
    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    # mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'\\source_data\\CERT.txt > ',pathProcessing,'\\source_data\\CERT2.txt'])
    # Cannot use tr because it does one for one search / replace or delete
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/parcels.txt > ',pathProcessing,'/parcels2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/sales.txt > ',pathProcessing,'/sales2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)    

    
    # load data into tables    
    #sql = "\\copy raw_levy_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_levy_parcel from 'parcels2.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #sql = "\\copy raw_levy_land from 'land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #sql = "\\copy raw_levy_misc from 'misc.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = 'psql -d postgis -U postgres -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_levy_sales from 'sales2.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    # load raw_levy_parcels into parcels_template
    # NOTE: substring of legal to chunk it up 
    sql = """INSERT INTO parcels_template_levy (pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address, luse, luse_d, lusedor,
            legal_full,
            legal1,legal2,legal3,legal4,legal5,legal6,
            mrkt_lnd, mrkt_ag, mrkt_bld, mrkt_impr, mrkt_tot, assd_tot, taxable_tot) 
            SELECT 
            pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address, luse, luse_d, lusedor,
            legal1,
            substring(legal1 from 1 for 254),substring(legal1 from 255 for 254), substring(legal1 from 509 for 254),
            substring(legal1 from 763 for 254),substring(legal1 from 1017 for 254),substring(legal1 from 1271 for 254),
            mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot, assd_tot, taxable_tot
        FROM raw_levy_parcel;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    #-----------------------------------------------------------------------------------------
    # add building and info from FDOR data
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_levy as p SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt,
            sqft_htd = f.tot_lvg_area,
            s_address = f.phy_addr1,
            s_city = f.phy_city,
            s_zipcode = f.phy_zipcd
            --lusedor = f.dor_uc
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 48 and p.pin = f.parcel_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE parcels_template_levy as p SET
            s_number = CAST(split_part(f.phy_addr1, ' ', 1) as int)
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 48 and p.pin = f.parcel_id and split_part(f.phy_addr1, ' ', 1) ~ '^[0-9]+$'
            -- CAST(split_part(f.phy_addr1, ' ', 1) as int) > 0
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # zero pad where necessary
    sql = """
        UPDATE parcels_template_levy as p SET
            lusedor = '0' || lusedor
            WHERE length(lusedor) = 1;

        UPDATE parcels_template_levy as p SET
            SET lusedor = substring(lusedor,2,2)
            WHERE length(lusedor) = 3;              
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # PIN_CLEAN
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_levy as p SET
            pin_clean = replace(pin,'-','')
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # STR
    #-----------------------------------------------------------------------------------------
    # STR is not in the pin - its in the legal in a structured way - need to code it up to get it   

    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_levy_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_price,
                vacant,
                instrument,
                qual,
                multi,
                grantor,
                grantee,
                book,
                page,
                docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_levy_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_levy AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_levy as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee
        FROM raw_levy_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

    
# =======================================================================================
# LIBERTY COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_liberty() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/liberty/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN liberty-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/liberty/liberty-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_liberty_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # 2022 version: FDOR pin has one part of pin with space instead of dash and it doesn;t match the sales download pin
    # FDOR = '019-1S-4W-00006 000'
    # Sales = '019-1S-4W-00006-000'
    # Havent double-cehcked, but assuming all pins are same length
    #-----------------------------------------------------------------------------------------
    #sql = """
    #    UPDATE raw_liberty_sales_dwnld as p SET
    #        pin = concat(substr(pin,1,15), ' ',substr(pin,17,19))
    #;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_liberty as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_liberty_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# MADISON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_madison() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/madison/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN madison-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/madison/madison-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_madison_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_madison as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_madison_sales_dwnld as o
            WHERE p.pin = o.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    # close communication with the database
    cursor.close()
    connection.close()

# =======================================================================================
# MANATEE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_manatee() :      
    
    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/manatee/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # parcels_new.txt and parcels_sales.txt are now read-only
    
    print('\nRUN manatee-parcels.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-parcels.py'
    os.system(mycmd)
    print(mycmd)

    print('\nRUN manatee-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-sales.py'
    print(mycmd)
    os.system(mycmd)  
        
    print('\nRUN manatee-owner.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-owner.py'
    print(mycmd)
    os.system(mycmd)

    print('\nRUN manatee-land.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-land.py'
    print(mycmd)
    os.system(mycmd)

    print('\nRUN manatee-agland.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-agland.py'
    print(mycmd)
    os.system(mycmd)
    
    print('\nRUN manatee-aedit.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-aedit.py'
    print(mycmd)
    os.system(mycmd)

    print('\nRUN manatee-legdat.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-legdat.py'
    print(mycmd)
    os.system(mycmd)    
     
    print('\nRUN manatee-aprval.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-aprval.py'
    print(mycmd)
    os.system(mycmd)

    print('\nRUN manatee-asmt.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-asmt.py'
    print(mycmd)
    os.system(mycmd)    

    print('\nRUN manatee-dwell.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-dwell.py'
    print(mycmd)
    os.system(mycmd)    

    print('\nRUN manatee-comdat.py')
    mycmd = '/srv/tools/python/parcel_processing/manatee/manatee-comdat.py'
    print(mycmd)
    os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_manatee from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_manatee_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_manatee_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_agland from 'parcels_agland.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_agland_codes from 'source_data/raw_data/soil_codes.csv' with CSV HEADER null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_manatee_aedit from 'parcels_aedit.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_legal from 'parcels_legal.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_aprval from 'parcels_aprval.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_asmt from 'parcels_asmt.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_manatee_dwell from 'parcels_dwell.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_manatee_comdat from 'parcels_comdat.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #exit()
	
    #-----------------------------------------------------------------------------------------
    # Update owner info
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_manatee as p SET
            o_name1 = f.o_name1,
            o_name2 = f.o_name2,
            o_address1 = f.o_address1,
            o_address2 = f.o_address2,
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = f.o_zipcode4
            --o_country = f.o_country
            FROM raw_manatee_owner as f
            WHERE p.pin_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # Update land info
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_manatee as p SET
            zoning = f.zoning
            FROM raw_manatee_land as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    

    #-----------------------------------------------------------------------------------------
    # add building and other info from FDOR data
    # Process more of this raw data later - its in too many tables!
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_manatee as p SET
            yrblt_eff = f.eff_yr_blt,
            yrblt_act = f.act_yr_blt,
            sqft_htd = f.tot_lvg_area,
            num_bldg = f.no_buldng,
            mrkt_tot = f.jv,
            mrkt_lnd = f.lnd_val,
            mrkt_ag = f.jv_class_use,
            mrkt_impr = f.spec_feat_val,
            assd_tot = f.av_nsd,
            taxable_tot = f.tv_nsd,
            homestead = f.exmpt_01, -- homestead value
            legal1 = f.s_legal,
            s_township = f.twn,
            s_range = f.rng, 
            s_section = cast(f.sec as int)
            
            FROM parcels_fdor_2024 as f
            WHERE f.co_no = 51 and p.pin = f.parcel_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # add building and other info from FDOR data
    # Process more of this raw data later - its in too many tables!
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_manatee as p SET
            subdiv_id = f.subdiv_id,
            subdiv_nm = f.subdiv_nm,
            legal1 = f.legal1
            FROM raw_manatee_legal as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    #-----------------------------------------------------------------------------------------
    # add building and other info from FDOR data
    # Process more of this raw data later - its in too many tables!
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_manatee as p SET
            mrkt_bld = f.mrkt_bld,
            exempt_tot = f.exempt_tot
            -- sqft_htd = f.sqft_htd
            -- subdiv_nm = f.subdiv_nm,
            -- legal1 = f.legal1
            FROM raw_manatee_aprval as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # add building and other info from FDOR data
    # Process more of this raw data later - its in too many tables!
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_manatee as p SET
            homestead = f.homestead,
            mrkt_ag = f.mrkt_ag,
            assd_tot = f.assd_tot
            -- subdiv_nm = f.subdiv_nm,
            -- legal1 = f.legal1
            FROM raw_manatee_asmt as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(bldg.sqft_adj as integer)) as sum_sqft_adj,
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths,
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_manatee_bldg_stats
        from raw_manatee_dwell as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table
    sql = """
        INSERT INTO raw_manatee_bldg_stats (pin, min_yrblt_act, max_yrblt_eff, sum_sqft_htd, sum_sqft_tot)
        SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot
        from raw_manatee_comdat as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_manatee
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot,
            sqft_adj = bldg.sum_sqft_adj,
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds,
            stories = bldg.max_stories
            FROM raw_manatee_bldg_stats as bldg
            WHERE parcels_template_manatee.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     
    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_manatee_sales_denormal 
    SELECT 
        sales_normal.pin_clean,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_ornum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_ornum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_ornum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_ornum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,
        
        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_ornum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee
        
        FROM
            (SELECT 
                pin_clean,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                sale_grantor,
                sale_grantee,
                sale_ornum,
                row_number() OVER (PARTITION BY pin_clean ORDER BY sale_date desc) AS i
                FROM raw_manatee_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_manatee AS interim ON sales_normal.pin_clean = interim.pin_clean
        GROUP BY sales_normal.pin_clean;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_manatee as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = CAST(split_part(denormal.sale4_date, '-', 1) as int),
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = CAST(split_part(denormal.sale5_date, '-', 1) as int),
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        
        FROM raw_manatee_sales_denormal as denormal
        WHERE interim.pin_clean = denormal.pin_clean;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    

# =======================================================================================
# MARION COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
# This version uses raw downloadable file as base, then supplement with FDOR
# So FDOR gets put into parcels_template 
def process_raw_marion() :


    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    print("COUNTY: ",county)
    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/marion/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)  

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------    

    print('RUN marion-parcels-merlin-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-parcels-merlin-csv.py'
    print(mycmd)
    os.system(mycmd)

    # process WEB SALES DOWNLOAD FILE
    print('RUN marion-sales-2025.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-sales-2025.py'
    #print mycmd
    os.system(mycmd)
    
    print('RUN marion-sales-2024.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-sales-2024.py'
    print(mycmd)
    os.system(mycmd)   
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    sql = "\\copy parcels_template2_marion from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_marion_sales_dwnld from 'parcels_sales_2024_dnld.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_marion_sales_dwnld from 'parcels_sales_2025_dnld.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)     
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    # need an index to make it go faster
    sql = """CREATE INDEX idx_parcels_template_marion ON parcels_template_marion USING btree (pin);"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # Update FDOR data with data from latest parcel shp
    # THIS IS ONLY TO FILL IN RECORDS THAT MAY BE MISSING FROM THE FDOR VERSION
    #
    # Lake note - see if applies to Marion
    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    #-----------------------------------------------------------------------------------------
    # FURTHER FLESH THIS OUT
    sql = """
        INSERT INTO parcels_template_marion SELECT p.s_section,p.s_township,p.s_range,p.subdiv_id,p.subdiv_nm,p.subdiv_nm2,
            p.block_pin,p.lot_pin,p.block_legal,p.lot_legal,p.fips,p.pin_geom,
            p.pin,p.pin_clean,p.pin2,p.pin2_clean,p.altkey,p.altkey_clean,p.upin,p.pin_fdor,
            p.acres_deed,p.acres_gis,p.condo,p.condo_method,p.condo_key,p.name_misc,
            p.owner_occupied, p.foreign_owner,p.o_name1,p.o_name2,p.o_name3,p.o_address1,p.o_address2,p.o_address3,p.o_city,p.o_state,p.o_country,p.o_zipcode,p.o_zipcode4,
            p.s_number,p.s_pdir,p.s_name,p.s_type,p.s_sdir,p.s_unit,p.s_address,p.s_city,p.s_state,p.s_zipcode,p.s_zipcode4,
            p.sale1_amt,p.sale1_year,p.sale1_date,p.sale1_date_date,p.sale1_vac,p.sale1_typ,p.sale1_qual,p.sale1_multi,p.sale1_bk,p.sale1_pg,p.sale1_docnum,p.sale1_grantor,p.sale1_grantee,
            p.sale2_amt,p.sale2_year,p.sale2_date,p.sale2_date_date,p.sale2_vac,p.sale2_typ,p.sale2_qual,p.sale2_multi,p.sale2_bk,p.sale2_pg,p.sale2_docnum,p.sale2_grantor,p.sale2_grantee,
            p.sale3_amt,p.sale3_year,p.sale3_date,p.sale3_date_date,p.sale3_vac,p.sale3_typ,p.sale3_qual,p.sale3_multi,p.sale3_bk,p.sale3_pg,p.sale3_docnum,p.sale3_grantor,p.sale3_grantee,
            p.sale4_amt,p.sale4_year,p.sale4_date,p.sale4_date_date,p.sale4_vac,p.sale4_typ,p.sale4_qual,p.sale4_multi,p.sale4_bk,p.sale4_pg,p.sale4_docnum,p.sale4_grantor,p.sale4_grantee,
            p.sale5_amt,p.sale5_year,p.sale5_date,p.sale5_date_date,p.sale5_vac,p.sale5_typ,p.sale5_qual,p.sale5_multi,p.sale5_bk,p.sale5_pg,p.sale5_docnum,p.sale5_grantor,p.sale5_grantee,
            p.mrkt_bld,p.mrkt_impr,p.mrkt_lnd,p.mrkt_ag,p.mrkt_tot,p.assd_tot,p.exempt_tot,p.taxable_tot,p.homestead,
            p.tax_amt1,p.tax_amt2,p.tax_amt3,
            p.num_bldg,p.res_units,p.sqft_htd,p.sqft_tot,p.sqft_adj,p.stories,p.yrblt_act,p.yrblt_eff,p.num_bed,p.num_bath,p.num_bath_half,
            p.luse,p.luse_d,p.lusedor,p.lusedor_d,p.zoning,
            p.legal_full,p.legal1,p.legal2,p.legal3,p.legal4,p.legal5,p.legal6,p.d_date,p.d_county,p.sale1q_amt,p.sale1q_year,p.sale1q_date,p.sale1q_date_date
        FROM parcels_template2_marion as p LEFT JOIN parcels_template_marion as f ON p.pin = f.pin 
        WHERE f.pin is null
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # Update exiting FDOR records with additional info from raw data
    sql = """
        UPDATE parcels_template_marion as f SET
            s_section = p.s_section,
            s_township = p.s_township,
            s_range = p.s_range,
            subdiv_id = p.subdiv_id,
            subdiv_nm = p.subdiv_nm,
            acres_deed = p.acres_deed,
            o_name1 = p.o_name1,
            o_name2 = p.o_name2,
            o_name3 = p.o_name3,
            o_address1 = p.o_address1,
            o_address2 = p.o_address2,
            o_address3 = p.o_address3,
            o_city = p.o_city,
            o_state = p.o_state,
            o_zipcode = p.o_zipcode,
            o_zipcode4 = p.o_zipcode4,
            o_country = p.o_country,
            --p.s_number,p.s_pdir,p.s_name,p.s_type,p.s_sdir,p.s_unit,p.s_address,p.s_city,p.s_state,p.s_zipcode,p.s_zipcode4,
            tax_amt1 = p.tax_amt1,
            num_bed = p.num_bed,
            num_bath = p.num_bath,
            luse = p.luse,
            luse_d = p.luse_d,
            zoning = p.zoning,
            legal_full = p.legal_full
        FROM parcels_template2_marion as p
        WHERE p.pin = f.pin 
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_marion as p SET
            o_name1 = o.o_name1,
            o_name2 = null,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_address3 = null,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4,
            FROM raw_marion_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()


    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()
    
# =======================================================================================
# MARION COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
# this relies on some purchased data and does not use FODR at all
def process_raw_marion_OLD() :


    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    print("COUNTY: ",county)
    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/marion/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm -r /srv/mapwise_dev/county/marion/processing/database/current/source_data/OAS_parcels.csv'
    os.system(mycmd)
    print(mycmd)
    
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/marion/processing/database/current/source_data/OAS_parcels.csv /srv/mapwise_dev/county/marion/processing/database/current/source_data/OAS_parcels.dbf'
    os.system(mycmd)
    print(mycmd)    

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------    

    print('RUN marion-parcels-oas-dbf.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-parcels-oas-dbf.py'
    os.system(mycmd)
    print(mycmd)  

    print('RUN marion-raw-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-raw-sales.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN marion-raw-building.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-raw-building.py'
    os.system(mycmd)
    print(mycmd)     

    # process WEB SALES DOWNLOAD FILE MCPASalesSearch.csv
    #print 'RUN marion-sales-2016.py'
    #mycmd = '/srv/tools/python/parcel_processing/marion/marion-sales-2016.py'
    #print mycmd
    #os.system(mycmd)    
       
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    sql = "\\copy parcels_template_marion from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    os.system(mycmd)
    

    sql = "\\copy raw_marion_sales_normal_temp from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    os.system(mycmd)

    sql = "\\copy raw_marion_bldg from 'parcels_building.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    os.system(mycmd)    
    
    sql = "\\copy raw_marion_sales_dwnld from 'parcels_sales_dnld.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    os.system(mycmd)      

    # INSERT download sales into raw sales table
    sql = """INSERT INTO raw_marion_sales_normal_temp
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg
            FROM raw_marion_sales_dwnld;
            """
    print(sql)
    cursor.execute(sql)
    connection.commit()
	
    #-----------------------------------------------------------------------------------------
    # JOIN TABLES
    #-----------------------------------------------------------------------------------------
    
    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act, 
            sum(cast(bldg.res_units as integer)) as sum_res_units,
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd,
            count(*) as sum_num_bldg
            -- max(cast(bldg.stories as integer)) as max_stories
        INTO raw_marion_bldg_stats
        from raw_marion_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_marion
            SET
            yrblt_act = bldg.min_yrblt_act,  
            res_units = bldg.sum_res_units, 
            sqft_tot = bldg.sum_sqft_tot,
            sqft_htd = bldg.sum_sqft_htd,
            num_bldg = bldg.sum_num_bldg
            -- stories = bldg.max_stories
            FROM raw_marion_bldg_stats as bldg
            WHERE parcels_template_marion.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    # So, denormlize the recent sales
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_marion_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_multi ELSE NULL END) AS sale4_multi,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_multi ELSE NULL END) AS sale5_multi,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null           
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_multi,
                --grantor,
                --grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_marion_sales_normal_temp WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_marion AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_marion as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        --sale4_grantor = denormal.sale4_grantor,
        --sale4_grantee = denormal.sale4_grantee
        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg
        --sale5_docnum = denormal.sale5_docnum,
        --sale5_grantor = denormal.sale5_grantor,
        --sale5_grantee = denormal.sale5_grantee
        FROM raw_marion_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    
# =======================================================================================
# MARION COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_marion_FDOR() :


    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    print("COUNTY: ",county)
    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/marion/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm -r /srv/mapwise_dev/county/marion/processing/database/current/source_data/OAS_parcels.csv'
    os.system(mycmd)
    print(mycmd)
    
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/marion/processing/database/current/source_data/OAS_parcels.csv /srv/mapwise_dev/county/marion/processing/database/current/source_data/OAS_parcels.dbf'
    os.system(mycmd)
    print(mycmd)    

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------    

    print('RUN marion-parcels-oas-dbf.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-parcels-oas-dbf.py'
    os.system(mycmd)
    print(mycmd)

    # process WEB SALES DOWNLOAD FILE MCPASalesSearch.csv
    print('RUN marion-sales-2016.py')
    mycmd = '/srv/tools/python/parcel_processing/marion/marion-sales-2016.py'
    print(mycmd)
    os.system(mycmd)    
       
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    sql = "\\copy parcels_template2_marion from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_marion_sales_dwnld from 'parcels_sales_dnld.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)      
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # Update FDOR data with data from latest parcel shp
    # THIS IS ONLY TO FILL IN RECORDS THAT MAY BE MISSING FROM THE FDOR VERSION
    #
    # Lake note - see if applies to Marion
    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    #-----------------------------------------------------------------------------------------
    # FURTHER FLESH THIS OUT
    sql = """
        INSERT INTO parcels_template_marion SELECT p.s_section,p.s_township,p.s_range,p.subdiv_id,p.subdiv_nm,p.subdiv_nm2,
            p.block_pin,p.lot_pin,p.block_legal,p.lot_legal,
            p.pin,p.pin_clean,p.pin2,p.pin2_clean,p.altkey,p.altkey_clean,p.upin,p.pin_fdor,
            p.acres_deed,p.acres_gis,p.condo,p.condo_method,p.condo_key,p.name_misc,
            p.owner_occupied, p.foreign_owner,p.o_name1,p.o_name2,p.o_name3,p.o_address1,p.o_address2,p.o_address3,p.o_city,p.o_state,p.o_country,p.o_zipcode,p.o_zipcode4,
            p.s_number,p.s_pdir,p.s_name,p.s_type,p.s_sdir,p.s_unit,p.s_address,p.s_city,p.s_state,p.s_zipcode,p.s_zipcode4,
            p.sale1_amt,p.sale1_year,p.sale1_date,p.sale1_date_date,p.sale1_vac,p.sale1_typ,p.sale1_qual,p.sale1_multi,p.sale1_bk,p.sale1_pg,p.sale1_docnum,p.sale1_grantor,p.sale1_grantee,
            p.sale2_amt,p.sale2_year,p.sale2_date,p.sale2_date_date,p.sale2_vac,p.sale2_typ,p.sale2_qual,p.sale2_multi,p.sale2_bk,p.sale2_pg,p.sale2_docnum,p.sale2_grantor,p.sale2_grantee,
            p.sale3_amt,p.sale3_year,p.sale3_date,p.sale3_date_date,p.sale3_vac,p.sale3_typ,p.sale3_qual,p.sale3_multi,p.sale3_bk,p.sale3_pg,p.sale3_docnum,p.sale3_grantor,p.sale3_grantee,
            p.sale4_amt,p.sale4_year,p.sale4_date,p.sale4_date_date,p.sale4_vac,p.sale4_typ,p.sale4_qual,p.sale4_multi,p.sale4_bk,p.sale4_pg,p.sale4_docnum,p.sale4_grantor,p.sale4_grantee,
            p.sale5_amt,p.sale5_year,p.sale5_date,p.sale5_date_date,p.sale5_vac,p.sale5_typ,p.sale5_qual,p.sale5_multi,p.sale5_bk,p.sale5_pg,p.sale5_docnum,p.sale5_grantor,p.sale5_grantee,
            p.mrkt_bld,p.mrkt_impr,p.mrkt_lnd,p.mrkt_ag,p.mrkt_tot,p.assd_tot,p.exempt_tot,p.taxable_tot,p.homestead,
            p.tax_amt1,p.tax_amt2,p.tax_amt3,
            p.num_bldg,p.res_units,p.sqft_htd,p.sqft_tot,p.sqft_adj,p.stories,p.yrblt_act,p.yrblt_eff,p.num_bed,p.num_bath,p.num_bath_half,
            p.luse,p.luse_d,p.lusedor,p.lusedor_d,p.zoning,
            p.legal_full,p.legal1,p.legal2,p.legal3,p.legal4,p.legal5,p.legal6,p.d_date,p.d_county,p.sale1q_amt,p.sale1q_year,p.sale1q_date,p.sale1q_date_date
        FROM parcels_template2_marion as p LEFT JOIN parcels_template_marion as f ON p.pin = f.pin 
        WHERE f.pin is null
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_marion as p SET
            o_name1 = o.o_name1,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_marion_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# MARTIN COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_martin() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
 
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/martin/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    #-----------------------------------------------------------------------------------------
    # CONVERT XLS to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    # 10/13/2024 MANUAL EXPORT
    #mycmd = 'in2csv ./source_data/UCAV_FINAL_2024.xlsx > ./source_data/UCAV.csv'
    #print mycmd	
    print("USING 2024 FINAL TAXROLL INFO - CHECK ME AT END OF 2025!")
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #-----------------------------------------------------------------------------------------    
    # 
    
    # replace 
    mycmd = ''.join(['sed -e "s:NULL::g" ',pathProcessing,'/source_data/real_land.csv > ',pathProcessing,'/source_data/real_land2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/real_master.csv > ',pathProcessing,'/source_data/real_master2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # replace 
    mycmd = ''.join(['sed -e "s:NULL::g" ',pathProcessing,'/source_data/real_master2.csv > ',pathProcessing,'/source_data/real_master3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    
    # THIS IS NOT WORKING - only does first line it finds - why?
    # replace -\r\n with - in realimprov
    mycmd = ''.join(['sed -e "s:-\\r\\n:-:g" ',pathProcessing,'/source_data/real_improv.csv > ',pathProcessing,'/source_data/real_improv2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # replace 
    mycmd = ''.join(['sed -e "s:NULL::g" ',pathProcessing,'/source_data/real_improv2.csv > ',pathProcessing,'/source_data/real_improv3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/real_improv3.csv > ',pathProcessing,'/source_data/real_improv4.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)


    # parcels_new.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/fulllegal.csv > ',pathProcessing,'/source_data/fulllegal2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # parcels_new.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/real_transfers.csv > ',pathProcessing,'/source_data/real_transfers2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #mycmd = ''.join(['sed -e "s:\\t: :g" ',pathProcessing,'/source_data/allparcels.csv > ',pathProcessing,'/source_data/allparcels2.csv'])
    

    # replace Overhead Door -\r\n with Overhead Door -
    #mycmd = ''.join(['sed -e "s:Overhead Door -\\012:Overhead Door -:g" -e "s:Overhead Door - \\n:Overhead Door -:g" ',pathProcessing,'/source_data/Real_improv.csv > ',pathProcessing,'/source_data/Real_improv2.csv'])
    
    # 12/2020 - manually replacing -\r\n with - in notepad - haven;t figured out good sed alternative yet
    # maybe this - https://unix.stackexchange.com/questions/114943/can-sed-replace-new-line-characters
    #mycmd = ''.join(['sed -e "s:-\\r\\n:-:g" ',pathProcessing,'/source_data/Real_improv.csv > ',pathProcessing,'/source_data/Real_improv2.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # bldg.txt
    print('RUN martin-current-realimprov.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-realimprov.py'
    os.system(mycmd)

    # land.txt
    print('RUN martin-current-realland.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-realland.py'
    os.system(mycmd)
    
    # transfers.txt
    print('RUN martin-current-transfers.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-transfers.py'
    os.system(mycmd)

    # parcels_new.txt    
    print('RUN martin-current-realmaster.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-realmaster.py'
    os.system(mycmd)

    # parcels_values.txt
    print('RUN martin-current-ucav.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-ucav.py'
    os.system(mycmd)


    # fulllegal.txt
    #print 'RUN martin-current-fulllegal.py'
    #mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-fulllegal.py'
    #os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_martin from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    
    sql = "\\copy raw_martin_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)

    # sales
    # Martin has de-normalized sales in real_land.txt
    sql = "\\copy raw_martin_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)

    # values
    # Martin has de-normalized sales in real_land.txt
    sql = "\\copy raw_martin_values from 'parcels_values.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)

    # legal
    sql = "\\copy raw_martin_legal_denormal from 'legal.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)       

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # CREATE BLDG SUM
    #-----------------------------------------------------------------------------------------
    # This query uses SELECT INTO syntax which is unusual from the way i normally do things
    sql = """
        SELECT 
            bldg.altkey, 
            max(bldg.stories) as max_stories, 
            min(bldg.yrblt_act) as min_yrblt_act, 
            min(bldg.yrblt_eff) as min_yrblt_eff,
            --sum(bldg.sqft_htd) as sum_sqft_htd,
            --sum(bldg.sqft_tot) as sum_sqft_tot,
            --sum(bldg.num_bed) as sum_num_bed, 
            sum(bldg.num_bath) as sum_num_bath,
            sum(bldg.num_bath_half) as sum_num_bath_half
        INTO raw_martin_bldg_sum
        FROM raw_martin_bldg as bldg
        GROUP BY bldg.altkey;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # COPY SUBDIVISION vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------
    # this table is updated once every year or so

    sql = """UPDATE parcels_template_martin
            SET
            subdiv_nm = subdiv.subdiv_nm,  
            subdiv_id = subdiv.subdiv_id
            FROM raw_martin_subdiv as subdiv
            WHERE parcels_template_martin.subdiv_id = replace(subdiv.subdiv_id, '-','');"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # COPY BLDG vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_martin
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.min_yrblt_eff,            
            --sqft_htd = bldg.sum_sqft_htd,
            --sqft_tot = bldg.sum_sqft_tot,
            stories = bldg.max_stories,
            --num_bath = bldg.sum_num_bath,
            --num_bed = bldg.sum_num_bed,
            num_bath_half = bldg.sum_num_bath_half
            FROM raw_martin_bldg_sum as bldg
            WHERE parcels_template_martin.altkey = bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # COPY VALUES vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_martin
            SET
            mrkt_lnd = val.mrkt_lnd,  
            mrkt_bld = val.mrkt_bld, 
            mrkt_tot = val.mrkt_tot, 
            assd_tot = val.assd_c_tot,
            exempt_tot = val.exempt_tot,
            taxable_tot = val.taxable_c_tot
            FROM raw_martin_values as val
            WHERE parcels_template_martin.pin = val.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # COPY LEGAL vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    # TODO - more work needed to properly parse legal file, see martin.txt parcel notes
    sql = """UPDATE parcels_template_martin
            SET
            legal_full = legal.legal_full,  
            legal1 = legal.legal1, 
            legal2 = legal.legal2, 
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_martin_legal_denormal as legal
            WHERE parcels_template_martin.altkey = legal.altkey;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()     

    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_martin_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee
        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                sale_grantor,
                sale_grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_martin_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_martin AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 




    #-----------------------------------------------------------------------------------------
    # COPY DENORMALIZED SALES vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_martin as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        --sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        --sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_martin_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 
        


    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# MARTIN COUNTY RAW - DBF version
# the SHPs are not updated on the same schedule - sometimes its ahead, and sometimes its behind!
# shapefile versions of attributes because these include more records (confidential)
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_martin_SHP() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
 
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/martin/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm -r /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_master.csv'
    os.system(mycmd)
    print(mycmd)
    
    mycmd = 'rm -r /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_land.csv'
    os.system(mycmd)
    print(mycmd)

    mycmd = 'rm -r /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_improvement.csv'
    os.system(mycmd)
    print(mycmd)

    #-------------------------------------    
    
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_master.csv /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_master.dbf'
    os.system(mycmd)
    print(mycmd)
    
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_land.csv /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_land.dbf'
    os.system(mycmd)
    print(mycmd)

    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_improvement.csv /srv/mapwise_dev/county/martin/processing/database/current/source_data/real_improvement.dbf'
    os.system(mycmd)
    print(mycmd)

  

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # bldg.txt
    print('RUN martin-current-realimprov-dbf.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-realimprov-dbf.py'
    os.system(mycmd)
    print(mycmd)

    # sales.txt
    print('RUN martin-current-realland-dbf.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-realland-dbf.py'
    os.system(mycmd)
    print(mycmd)

    # parcels_new.txt
    print('RUN martin-current-realmaster-dbf.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-realmaster-dbf.py'
    os.system(mycmd)
    print(mycmd)

    # parcels_values.txt
    print('RUN martin-current-ucav.py')
    mycmd = '/srv/tools/python/parcel_processing/martin/martin-current-ucav.py'
    os.system(mycmd)
    print(mycmd)         

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_martin from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_martin_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # sales
    # Martin has de-normalized sales in real_land.txt
    sql = "\\copy raw_martin_sales_denormal from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # values
    # Martin has de-normalized sales in real_land.txt
    sql = "\\copy raw_martin_values from 'parcels_values.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)


    #-----------------------------------------------------------------------------------------
    # CREATE BLDG SUM
    #-----------------------------------------------------------------------------------------
    # This query uses SELECT INTO syntax which is unusual from the way i normally do things
    sql = """
        SELECT 
            bldg.pin as pin, 
            max(bldg.stories) as max_stories, 
            min(bldg.yrblt_act) as min_yrblt_act, 
            sum(bldg.sqft_htd) as sum_sqft_htd, 
            sum(bldg.num_bed) as sum_num_bed, 
            sum(bldg.num_bath) as sum_num_bath,
            sum(bldg.num_bath_half) as sum_num_bath_half
        INTO raw_martin_bldg_sum
        FROM raw_martin_bldg as bldg
        GROUP BY bldg.pin;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    


    #-----------------------------------------------------------------------------------------
    # COPY SUBDIVISION vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------
    # this table is updated once every year or so

    sql = """UPDATE parcels_template_martin
            SET
            subdiv_nm = subdiv.subdiv_nm,  
            subdiv_id = subdiv.subdiv_id
            FROM raw_martin_subdiv as subdiv
            WHERE parcels_template_martin.subdiv_id = subdiv.subdiv_id;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # COPY BLDG vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_martin
            SET
            yrblt_act = bldg.min_yrblt_act,  
            sqft_htd = bldg.sum_sqft_htd, 
            stories = bldg.max_stories, 
            num_bath = bldg.sum_num_bath,
            num_bed = bldg.sum_num_bed,
            num_bath_half = bldg.sum_num_bath_half
            FROM raw_martin_bldg_sum as bldg
            WHERE parcels_template_martin.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # COPY VALUES vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_martin
            SET
            mrkt_lnd = val.mrkt_lnd,  
            mrkt_bld = val.mrkt_bld, 
            mrkt_tot = val.mrkt_tot, 
            assd_tot = val.assd_c_tot,
            exempt_tot = val.exempt_tot,
            taxable_tot = val.taxable_c_tot
            FROM raw_martin_values as val
            WHERE parcels_template_martin.pin = val.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    #-----------------------------------------------------------------------------------------
    # COPY DENORMALIZED SALES vals into parcels_template_martin
    #-----------------------------------------------------------------------------------------

    sql = """UPDATE parcels_template_martin as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee
        FROM raw_martin_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()
    
# =======================================================================================
# MIAMI-DADE COUNTY RAW FDOR
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_miami_dade() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = 'MIAMI-DADE'
    county_lower = 'miami_dade'

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------        
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/miami_dade/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/PublicSalesExtractAllYears.csv > ',pathProcessing,'/source_data/PublicSalesExtractAllYears2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/PublicParcelExtract.csv > ',pathProcessing,'/source_data/PublicParcelExtract2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/PublicLegalExtract.csv > ',pathProcessing,'/source_data/PublicLegalExtract2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/temp/MunRoll_00_RE_redux_2020_01_17.csv > ',pathProcessing,'/source_data/temp/MunRoll_00_RE_redux_2020_01_17a.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # process raw data
    #-----------------------------------------------------------------------------------------
    print('RUN miami-dade-parcels-current.py')
    mycmd = '/srv/tools/python/parcel_processing/miami_dade/miami-dade-parcels-current.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN miami-dade-sales-all.py')
    mycmd = '/srv/tools/python/parcel_processing/miami_dade/miami-dade-sales-all.py'
    print(mycmd)
    os.system(mycmd)    

    print('RUN miami-dade-legal.py')
    mycmd = '/srv/tools/python/parcel_processing/miami_dade/miami-dade-legal.py'
    print(mycmd)
    os.system(mycmd)
    
    #print 'RUN miami-dade-munroll-legal.py'
    #mycmd = '/srv/tools/python/parcel_processing/miami_dade/miami-dade-munroll-legal.py'
    #print mycmd
    #os.system(mycmd)

    #print 'RUN miami-dade-munroll-temp.py'
    #mycmd = '/srv/tools/python/parcel_processing/miami_dade/miami-dade-munroll-temp.py'
    #print mycmd
    #os.system(mycmd)
    
    
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_miami_dade from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    

    sql = "\\copy raw_miami_dade_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_miami_dade_legal_normal from 'parcels_legal.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #sql = "\\copy raw_miami_dade_munroll_temp from 'parcels_mun_temp.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # LOAD NORNALIZED SALES INTO DENORMALIZED SALES TABLE
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_miami_dade_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,
        
        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_amt,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_grantor,
                sale_grantee,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_miami_dade_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_miami_dade AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    #-----------------------------------------------------------------------------------------
    # update sale info
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_miami_dade as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = CAST(split_part(denormal.sale1_date, '-', 1) as int),
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = CAST(split_part(denormal.sale2_date, '-', 1) as int),
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = CAST(split_part(denormal.sale3_date, '-', 1) as int),
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = CAST(split_part(denormal.sale4_date, '-', 1) as int),
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = CAST(split_part(denormal.sale5_date, '-', 1) as int),
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        

        FROM raw_miami_dade_sales_denormal as denormal
        WHERE interim.pin_clean = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

        
    #-----------------------------------------------------------------------------------------
    # LOAD NORMALIZED LEGAL INTO DENORMALIZED TABLE
    #-----------------------------------------------------------------------------------------    
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_miami_dade_legal_denormal 
    SELECT 
        legal_normal.pin,
        -- section 1
        MAX(CASE WHEN legal_normal.i = 1 THEN legal_normal.legal ELSE NULL END) AS legal1,

        -- section 2
        MAX(CASE WHEN legal_normal.i = 2 THEN legal_normal.legal ELSE NULL END) AS legal2,

        -- section 3
        MAX(CASE WHEN legal_normal.i = 3 THEN legal_normal.legal ELSE NULL END) AS legal3,
        
        -- section 4
        MAX(CASE WHEN legal_normal.i = 4 THEN legal_normal.legal ELSE NULL END) AS legal4,

        -- section 5
        MAX(CASE WHEN legal_normal.i = 5 THEN legal_normal.legal ELSE NULL END) AS legal5,

        -- section 6
        MAX(CASE WHEN legal_normal.i = 6 THEN legal_normal.legal ELSE NULL END) AS legal6
        
        FROM
            (SELECT 
                pin,
                line_num,
                legal,
                row_number() OVER (PARTITION BY pin ORDER BY line_num asc) AS i
                FROM raw_miami_dade_legal_normal WHERE legal is not null
            ) AS legal_normal
            INNER JOIN 
                parcels_template_miami_dade AS interim ON legal_normal.pin = interim.pin
        GROUP BY legal_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update legal info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_miami_dade as interim
        SET -- all legal columns
        legal1 = legal.legal1,
        legal2 = legal.legal2,
        legal3 = legal.legal3,
        legal4 = legal.legal4,
        legal5 = legal.legal5,
        legal6 = legal.legal6,
        legal_full = concat(' ', legal.legal1, legal.legal2, legal.legal3, legal.legal4, legal.legal5, legal.legal6), 
        subdiv_nm = legal.legal1
        FROM raw_miami_dade_legal_denormal as legal
            WHERE interim.pin = legal.pin;"""

    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # update owner info from sales file
    #-----------------------------------------------------------------------------------------
    # QUESTION: WHY IS THIS o_address3?
    sql = """UPDATE parcels_template_miami_dade as interim
        SET -- 
        o_name1 = owner.o_name1,
        o_name2 = owner.o_name2,
        o_name3 = owner.o_name3,
        -- WHY IS THIS o_address3?
        o_address1 = owner.o_address1,
        o_city = owner.o_city,
        o_state = owner.o_state,
        o_zipcode = owner.o_zipcode,
        o_country = owner.o_country
        FROM raw_miami_dade_sales as owner
        WHERE interim.pin_clean = owner.pin;""" 

    sqlW = """UPDATE parcels_template_miami_dade as interim
        SET -- 
        o_name1 = owner.o_name1,
        o_name2 = owner.o_name2,
        o_name3 = owner.o_name3,
        o_address1 = owner.o_address1,
        o_address2 = owner.o_address2,
        o_city = owner.o_city,
        o_state = owner.o_state,
        o_zipcode = owner.o_zipcode,
        o_country = owner.o_country
        FROM raw_miami_dade_munroll_temp as owner
        WHERE interim.pin_clean = owner.pin;""" 
        
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # update STR from FDOR
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_miami_dade as interim
        SET 
        s_section = CAST(f.sec as int4),
        s_township = f.twn,
        s_range = f.rng
        FROM parcels_fdor_2024 as f
        WHERE interim.pin_clean = f.parcel_id and f.co_no = 23 and f.twn != '00';""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # update luse_d from LUT
    sql = """UPDATE parcels_template_miami_dade as interim
        SET 
        luse_d = luse.luse_desc
        FROM codes_luse_four_digit as luse
        WHERE interim.luse = luse.luse and county = 'MIAMI-DADE';
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
        # nullify s_city = 'UNINCORPORATED'  
    sql = """
        UPDATE parcels_template_miami_dade as p SET
            s_city = null
            WHERE upper(p.s_city) = 'UNINCORPORATED'
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update s_city to fill in postal city  
    sql = """
        UPDATE parcels_template_miami_dade as p SET
            s_city = o.po_name
            FROM zip_codes as o
            WHERE p.s_city is null and o.zip = p.s_zipcode
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()  

    #exit()

# =======================================================================================
# MIAMI-DADE COUNTY RAW FDOR
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_fdor_miami_dade() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    
    # manually update sales file


    # load updated sales info into xx table


    # update sales in ???


    # cd L:\mapwise_dev\county\okeechobee\processing\database\current\source_data
    # psql -d postgis -U postgres -c "\copy raw_okeechobee_sales_owner_export from 'owner_YTD_20120809.txt' with delimiter as E'\t' null as ''"

    # No PIN with the owners, so need to join on owner name!


    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# MONROE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_monroe() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------        
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/monroe/processing/database/sql_files/create_raw_tables.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT XLS to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    # 2/26/2023 - conversion failing, switch to raw .txt file which is a CSV file
    #mycmd = 'in2csv ./source_data/TAXROLL.xlsx > ./source_data/TAXROLL.csv'
    #print mycmd	
    #os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    #mycmd = 'rm -r /srv/mapwise_dev/county/monroe/processing/database/current/source_data/parcels.csv'
    #print mycmd
    #os.system(mycmd)

    # delete existing files
    #mycmd = 'rm /srv/mapwise_dev/county/monroe/processing/database/current/source_data/taxroll.csv'
    #print mycmd
    #os.system(mycmd)    

    # old
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/monroe/processing/database/current/source_data/parcels.csv /srv/mapwise_dev/county/monroe/processing/vector/propapp/current/source_data/PARCEL_PUBLIC.dbf'
    #print mycmd
    #os.system(mycmd)

    # 3/2018 - seems like its certified data
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/monroe/processing/database/current/source_data/taxroll.csv /srv/mapwise_dev/county/monroe/processing/vector/propapp/current/source_data/MCPAO.gdb TAXROLL' 
    #print mycmd
    #os.system(mycmd)    
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    
    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    # mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'\\source_data\\CERT.txt > ',pathProcessing,'\\source_data\\CERT2.txt'])
    # Cannot use tr because it does one for one search / replace or delete
    #mycmd = ''.join(['sed -e "s:\\\:/:g" ',pathProcessing,'/source_data/CERT.txt > ',pathProcessing,'/source_data/CERT2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # GOLDEN ASCII CLEANSING COMMAND - this was most recently used
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/TAXROLL.txt > ',pathProcessing,'/source_data/taxroll2.txt'])
    #mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/TAXROLL.csv > ',pathProcessing,'/source_data/taxroll2.csv'])
    #mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/SalesHistory.txt > ',pathProcessing,'/source_data/SalesHistory2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # 3/2018 - latest 
    print('RUN monroe-parcels-taxroll-pipe.py')
    mycmd = '/srv/tools/python/parcel_processing/monroe/monroe-parcels-taxroll-pipe.py'
    os.system(mycmd)
    
    # 3/2018 - seems like its certified data 
    #print 'RUN monroe-parcels-taxroll-fgdb-csv.py'
    #mycmd = '/srv/tools/python/parcel_processing/monroe/monroe-parcels-taxroll-fgdb-csv.py'
    #os.system(mycmd)
 


    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template2_monroe from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()

    # Remove one friggin duplicate
    sql = """
        DELETE FROM parcels_template2_monroe 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY altkey), ctid 
                FROM parcels_template2_monroe) x 
                WHERE x.row_number > 1));
    """
    #print sql    
    #cursor.execute(sql)
    #connection.commit()    

    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    # !!!!! UPDATE THIS EVERY YEAR !!!!!!
    #         
    # 10/2019 - pin format in fdor version is different
    # SSTT RR <pin>, but this gets handled in monroe code section
    print("UPDATE ME EACH YEAR - 2023 current year")
    sql = """
        INSERT INTO raw_monroe_sales 
            SELECT CONCAT(s_section, s_township, ' ', s_range, ' ', REPLACE(pin,'-','')) as pin, pin_clean, altkey,
            sale1_amt, substring(sale1_date,1,4)::int, sale1_date, 
            sale1_bk, sale1_pg, sale1_typ
            FROM parcels_template2_monroe 
            WHERE sale1_amt > 0 and sale1_date > '2023-09-01'
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # raw taxroll file is secondary, e.g. parcels_template2_monroe
    # override FDOR version for:
    #   owner name, address, site_address, luse_d, etc
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    # fdor version uses parcelno. I currently have rechar as the main pin
    sql = """
        UPDATE parcels_template_monroe as p SET
            o_name1 = f.o_name1,
            o_address1 = f.o_address1,
            o_address2 = null, -- fdor has most o_address1's here
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_country = f.o_country,
            subdiv_id = f.subdiv_id,
            --subdiv_id2 = f.subdiv_id2,
            subdiv_nm = f.subdiv_nm,
            luse = f.luse, -- not sure why but many luse codes in fdor version are wrong, eg select * from parcels_fdor_2024 where co_no = 45 and alt_key = '2515953'
            luse_d = f.luse_d,
            lusedor = f.lusedor,
            yrblt_act = f.yrblt_act,
            s_number = f.s_number,
            s_address = f.s_address,
            s_city = f.s_city,
            s_zipcode = f.s_zipcode,
            s_unit = f.s_unit,
            name_misc = f.name_misc
            FROM parcels_template2_monroe as f
            WHERE p.altkey = f.altkey
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    #exit()

 
# =======================================================================================
# MONROE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_monroe_OLD() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------        
    # create parcel, building, legal, sales tables
    #sql_file = "/srv/mapwise_dev/county/monroe/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    #mycmd = pg_psql + ' -f "' + sql_file + '"'
    #print mycmd
    #os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    
    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    # mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'\\source_data\\CERT.txt > ',pathProcessing,'\\source_data\\CERT2.txt'])
    # Cannot use tr because it does one for one search / replace or delete
    #mycmd = ''.join(['sed -e "s:\\\:/:g" ',pathProcessing,'/source_data/CERT.txt > ',pathProcessing,'/source_data/CERT2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/taxroll.txt > ',pathProcessing,'/source_data/taxroll2.txt'])
    #mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/SalesHistory.txt > ',pathProcessing,'/source_data/SalesHistory2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
  
    
    print('RUN monroe-parcels-current.py')
    mycmd = '/srv/tools/python/parcel_processing/monroe/monroe-parcels-current.py'
    os.system(mycmd)
    print(mycmd)
 


    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_monroe from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Remove one friggin duplicate
    sql = """
        DELETE FROM parcels_template_monroe 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY altkey), ctid 
                FROM parcels_template_monroe) x 
                WHERE x.row_number > 1));
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()    


    
# =======================================================================================
# NASSAU COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_nassau() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/nassau/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # EXPORT CSV
    #-----------------------------------------------------------------------------------------    
    # 	
    # csvkit command
    # 3/15/2022 - switched back to xls
    # 11/7/2022 - switched back to csv!
    # 2/26/2023 - switched back to xls!
    #mycmd = 'in2csv ./source_data/ISRecentSales.xls > ./source_data/sales.csv'
    #print mycmd	
    #os.system(mycmd)
    
    # just change the name - now provided as csv instead of xls
    #mycmd = 'mv ./source_data/ISRecentSales.csv  ./source_data/sales.csv'
    #print mycmd	
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN nassau-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/nassau/nassau-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_nassau_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    sql = """
        UPDATE parcels_template_nassau as p SET
            o_name1 = f.o_name1,
            o_name2 = null,
            o_name3 = null,
            o_address1 = f.o_address1,
            o_address2 = f.o_address2, -- just in case address processing failed?
            o_address3 = null, 
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = f.o_zipcode4,
            o_country = null
            FROM raw_nassau_sales as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()

# =======================================================================================
# OKALOOSA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_okaloosa() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/okaloosa/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF TO CSV
    #----------------------------------------------------------------------------------------- 
    mycmd = 'rm /srv/mapwise_dev/county/okaloosa/processing/database/current/source_data/public1.csv'
    print(mycmd)
    os.system(mycmd)
    
    # The geometry file must be regularly downloaded and updated for tax roll purposes.
    # 2025-02-07 - set to autodownload.
    mycmd = 'ogr2ogr -overwrite -f "CSV" /srv/mapwise_dev/county/okaloosa/processing/database/current/source_data/public1.csv /srv/mapwise_dev/county/okaloosa/processing/vector/propapp/current/source_data/public.dbf'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/public1.csv > ',pathProcessing,'/source_data/public.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS CSV FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN okaloosa-parcels.py')
    # input: public.csv
    # output: parcels_new.txt
    mycmd = '/srv/tools/python/parcel_processing/okaloosa/okaloosa-parcels.py'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN okaloosa-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/okaloosa/okaloosa-convert-sales-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    # LATER - make raw county file the main one and fdor supplement
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template2_okaloosa from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_okaloosa_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    # No owner info in web download
    sql = """
        UPDATE parcels_template_okaloosa as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_okaloosa_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_okaloosa as p SET
            o_name1 = o.o_name1,
            o_name2 = o.o_name2,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_okaloosa_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    #-----------------------------------------------------------------------------------------
    # TEMP FIX - copy a few values into parcels_template
    # LATER - switch to county version being main file and fdor as supplement
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_okaloosa as p SET
            sqft_htd = o.sqft_htd,
            sqft_tot = o.sqft_tot,
            sqft_adj = o.sqft_adj,
            num_bed = o.num_bed,
            num_bath = o.num_bath
            FROM parcels_template2_okaloosa as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # INSERT records from parcel shapefile that are not in the fdor version due to combines or splits since FDOR data
    #-----------------------------------------------------------------------------------------
    sql = """
        INSERT INTO parcels_template_okaloosa select a.* FROM 
            parcels_template2_okaloosa as a LEFT JOIN parcels_template_okaloosa as b 
            ON a.pin = b.pin where  b.pin is null    
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# OKEECHOBEE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_okeechobee() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/okeechobee/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------


    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    #sql = "\\copy raw_okeechobee_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_okeechobee_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #exit()
    
    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_okeechobee_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_okeechobee_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_okeechobee_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_okeechobee_sales_export SET sale2_date = split_part(sale2_date, '/', 3) || '-' || split_part(sale2_date, '/', 1) || '-' || split_part(sale2_date, '/', 2);
        
        UPDATE raw_okeechobee_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-0' || split_part(sale2_date, '-', 2) || '-' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 2)) = 1;

        UPDATE raw_okeechobee_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-' || split_part(sale2_date, '-', 2) || '-0' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_okeechobee_sales_export SET sale3_date = split_part(sale3_date, '/', 3) || '-' || split_part(sale3_date, '/', 1) || '-' || split_part(sale3_date, '/', 2);
        
        UPDATE raw_okeechobee_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-0' || split_part(sale3_date, '-', 2) || '-' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 2)) = 1;

        UPDATE raw_okeechobee_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-' || split_part(sale3_date, '-', 2) || '-0' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()   
  

    #-----------------------------------------------------------------------------------------
    # 10/2020 - pin now has dashes and main pin does not
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE raw_okeechobee_sales_export
            SET pin = replace(pin,'-','');
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    # PIN	Name	Address1	Address2	City	State	ZIP
    #sql = "\\copy raw_okeechobee_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_okeechobee_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    
    #-----------------------------------------------------------------------------------------
    # set pin_clen
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_okeechobee
            SET pin_clean = replace(pin,'-','');
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
 
    
    #-----------------------------------------------------------------------------------------
    # update sale info
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_okeechobee as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = CAST(split_part(denormal.sale1_date, '-', 1) as int),
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = CAST(split_part(denormal.sale2_date, '-', 1) as int),
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = CAST(split_part(denormal.sale3_date, '-', 1) as int),
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee,
    
        
        o_name1 = denormal.o_name1
        FROM raw_okeechobee_sales_export as denormal
        WHERE interim.pin_clean = replace(denormal.pin,'-','');""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales excport, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_okeechobee as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_okeechobee_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    #exit()

# =======================================================================================
# ORANGE COUNTY RAW - SUMMARY FILE
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_orange() :


    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/orange/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # Export to ascii
    #-----------------------------------------------------------------------------------------	
    # csvkit command
    #mycmd = 'in2csv ./source_data/allparcels.xlsx > ./source_data/allparcels.csv'
    #print mycmd
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # convert any tabs to spaces
    #-----------------------------------------------------------------------------------------
    #mycmd = ''.join(['sed -e "s:\\t: :g" ',pathProcessing,'/source_data/allparcels.csv > ',pathProcessing,'/source_data/allparcels2.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/allparcels.csv > ',pathProcessing,'/source_data/allparcels2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN orange-convert-current.py')
    mycmd = '/srv/tools/python/parcel_processing/orange/orange-convert-current.py'
    print(mycmd)
    os.system(mycmd) 

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_orange from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # LAND USE UPDATES
    #-----------------------------------------------------------------------------------------

    # condos are missing land use codes, so get them from fdor (update any missing land use codes)
    sql = """UPDATE parcels_template_orange
            SET
            lusedor = substring(CAST(luse.dor_uc as text), 2, 2)
            FROM parcels_fdor_2024 as luse
            WHERE parcels_template_orange.pin_clean = luse.parcel_id and co_no = 58 and lusedor is null;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """UPDATE parcels_template_orange
            SET
            lusedor = '04'
            WHERE lusedor is null and subdiv_nm like '%CONDO%';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join on luse 4-digit table to bring in code descriptions
    sql = """UPDATE parcels_template_orange
            SET
            luse_d = luse.luse_desc
            FROM codes_luse_four_digit as luse
            WHERE parcels_template_orange.luse = luse.luse and county = 'ORANGE';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join to address points to bring in s_unit for now - allparcels file doesn;t have s_unit (although shapefile does)
    sql = """UPDATE parcels_template_orange as p 
        SET s_unit = s.s_unit
        FROM address_points as s
        WHERE s.d_county = 'ORANGE' and p.pin_clean = s.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    #exit()

# =======================================================================================
# OSCEOLA COUNTY RAW - SUMMARY FILE
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_osceola() :

    # potential scraping notes
    # http://ira.property-appraiser.org/PropertySearch/ajax/ParcelSearch.aspx?ParcelID=012628397100010120&SubdivisionCode=&StreetName=&SaleType=&SalePriceLow=&SalePriceHigh=&SaleDateLow=&SaleDateHigh=&YearBuiltLow=&YearBuiltHigh=&BuildingValueLow=&BuildingValueHigh=&HeatedSqFtLow=&HeatedSqFtHigh=&ActualSqFtLow=&ActualSqFtHigh=&Bedrooms=&LandValueLow=&LandValueHigh=&AcreageValueLow=&AcreageValueHigh=&LandUseCode=&TaxDistrictCode=&orderByColumnIndex=0&page=&returncount=true&advanced=true
    # returns html record
    # an arcgis server is spitting out the info
    # http://ira.property-appraiser.org/arcgis/rest/services/AGS_TaxMap/MapServer/0 - has a lot of fields

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/osceola/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/osceola/processing/database/current/source_data/OsceolaTaxParcels.csv'
    print(mycmd)
    os.system(mycmd)

    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/osceola/processing/database/current/source_data/OsceolaTaxParcels.csv /srv/mapwise_dev/county/osceola/processing/vector/propapp/current/source_data/OsceolaTaxParcels.dbf'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------

    # the PA keeps switching around how many fields appear the good stuff.
    print('RUN osceola-dbf-csv-summary.py')
    # Input: OsceolaTaxParcels.csv
    # Output: parcels_new.txt
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-dbf-csv-summary_FIELD06.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN osceola-owner.py')
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-owner.py'
    print(mycmd)
    os.system(mycmd) 
    
    print('RUN osceola-mailing.py')
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-mailing.py'
    print(mycmd)
    os.system(mycmd) 
    
    print('RUN osceola-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-sales.py'
    print(mycmd)
    os.system(mycmd)    

    print('RUN osceola-land.py')
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-land.py'
    print(mycmd)
    os.system(mycmd)    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_osceola from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_osceola_owner from 'owner_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_osceola_mailing from 'mailing_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_osceola_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_osceola_land_ag from 'parcels_land_ag.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_osceola_land_codes from 'source_data/raw_data/land_use_codes.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)      

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_osceola_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee
        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                sale_grantor,
                sale_grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_osceola_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_osceola AS interim ON sales_normal.pin = interim.pin_clean
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_osceola as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_osceola_sales_denormal as denormal
        WHERE interim.pin_clean = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    # Update mailing address   
    sql = """
        UPDATE parcels_template_osceola as p
            SET
                o_address1 = m.o_address1,
                o_address2 = m.o_address2,
                o_city = m.o_city,
                o_state = m.o_state,
                o_zipcode = m.o_zipcode,
                o_country = m.o_country
            FROM raw_osceola_mailing as m
            WHERE p.pin_clean = m.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # Update owner name   
    # add additional owners by selecting on linenum = 2 to update o_name2, etc?
    sql = """
        UPDATE parcels_template_osceola as p
            SET
                o_name1 = m.o_name1,
                o_name2 = null,
                o_name3 = null
            FROM raw_osceola_owner as m
            WHERE p.pin_clean = m.pin and m.line_num = 1;
            
        UPDATE parcels_template_osceola as p
            SET
                o_name2 = m.o_name1
            FROM raw_osceola_owner as m
            WHERE p.pin_clean = m.pin and m.line_num = 2;  

        UPDATE parcels_template_osceola as p
            SET
                o_name3 = m.o_name1
            FROM raw_osceola_owner as m
            WHERE p.pin_clean = m.pin and m.line_num = 3;
            
    """ 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    
    # only need to fix a mistake from earlier processing I think    
    # bring in lusedor info
    #sql = """
    #    UPDATE parcels_template_osceola as p
    #        SET
    #            lusedor = CAST(f.dor_uc as text)
    #        FROM parcels_fdor_2013 as f
    #        WHERE p.pin = f.parcel_id AND f.co_no = 59;
    #
    #    UPDATE parcels_template_osceola AS p
    #        SET
    #            lusedor = '0' || lusedor
    #        WHERE length(lusedor) = 1;            
    #"""    
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
# =======================================================================================
# OSCEOLA COUNTY RAW - SUMMARY FILE
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_osceola_shp_summary() :

    # potential scraping notes
    # http://ira.property-appraiser.org/PropertySearch/ajax/ParcelSearch.aspx?ParcelID=012628397100010120&SubdivisionCode=&StreetName=&SaleType=&SalePriceLow=&SalePriceHigh=&SaleDateLow=&SaleDateHigh=&YearBuiltLow=&YearBuiltHigh=&BuildingValueLow=&BuildingValueHigh=&HeatedSqFtLow=&HeatedSqFtHigh=&ActualSqFtLow=&ActualSqFtHigh=&Bedrooms=&LandValueLow=&LandValueHigh=&AcreageValueLow=&AcreageValueHigh=&LandUseCode=&TaxDistrictCode=&orderByColumnIndex=0&page=&returncount=true&advanced=true
    # returns html record
    # an arcgis server is spitting out the info
    # http://ira.property-appraiser.org/arcgis/rest/services/AGS_TaxMap/MapServer/0 - has a lot of fields

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/osceola/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    #mycmd = 'rm -r /srv/mapwise_dev/county/osceola/processing/database/current/source_data/parcels.csv'
    #os.system(mycmd)
    #print mycmd
    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/osceola/processing/database/current/source_data/parcels.csv /srv/mapwise_dev/county/osceola/processing/vector/propapp/current/source_data/osceola.dbf'
    #os.system(mycmd)
    #print mycmd

    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    #mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'\\source_data\\parcels.csv\\osceola.csv > ',pathProcessing,'\\source_data\\parcels.csv\\osceola2.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN osceola-convert-current.py')
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-convert-current.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN osceola-convert-land.py')
    mycmd = '/srv/tools/python/parcel_processing/osceola/osceola-convert-land.py'
    os.system(mycmd)
    print(mycmd)    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_osceola from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_osceola_land_ag from 'parcels_land_ag.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_osceola_land_codes from 'source_data/raw_data/land_use_codes.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)      

    # only need to fix a mistake from earlier processing I think    
    # bring in lusedor info
    #sql = """
    #    UPDATE parcels_template_osceola as p
    #        SET
    #            lusedor = CAST(f.dor_uc as text)
    #        FROM parcels_fdor_2013 as f
    #        WHERE p.pin = f.parcel_id AND f.co_no = 59;
    #
    #    UPDATE parcels_template_osceola AS p
    #        SET
    #            lusedor = '0' || lusedor
    #        WHERE length(lusedor) = 1;            
    #"""    
    #print sql
    #cursor.execute(sql)
    #connection.commit()

   
# =======================================================================================
# OSCEOLA COUNTY FDOR + WEB SALES
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_fdor_osceola() :

    # potential scraping notes
    # http://ira.property-appraiser.org/PropertySearch/ajax/ParcelSearch.aspx?ParcelID=012628397100010120&SubdivisionCode=&StreetName=&SaleType=&SalePriceLow=&SalePriceHigh=&SaleDateLow=&SaleDateHigh=&YearBuiltLow=&YearBuiltHigh=&BuildingValueLow=&BuildingValueHigh=&HeatedSqFtLow=&HeatedSqFtHigh=&ActualSqFtLow=&ActualSqFtHigh=&Bedrooms=&LandValueLow=&LandValueHigh=&AcreageValueLow=&AcreageValueHigh=&LandUseCode=&TaxDistrictCode=&orderByColumnIndex=0&page=&returncount=true&advanced=true
    # returns html record
    # an arcgis server is spitting out the info
    # http://ira.property-appraiser.org/arcgis/rest/services/AGS_TaxMap/MapServer/0 - has a lot of fields

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/osceola/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    #sql = "\\copy raw_osceola_sales_export from 'source_data/sales_dnld_20080601_20091231.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    #sql = "\\copy raw_osceola_sales_export from 'source_data/sales_dnld_2009.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    #sql = "\\copy raw_osceola_sales_export from 'sales_dnld_20111001_20111231.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # CHANGE THIS EVERY YEAR AT CERTIFIED TIME?
    # SaleDate	Price	V/I	Qual	OR	Book	Page	Name	Street#	StreetName	City	ZIP	PIN	Sec	Twp	Rng	Use	AssdValue	TaxValue
    # where did fdor sales leave off for 2012 certified? FDOR has 208 out 604 9/2012 sales, so get 9/2012 to current

    # PROBLEM: web download does not produce proper CSV files or proper delimited text files
    # e.g. the s_address field sometimes contains s_address, s_city ( and sometimes has unit thrown in also delimited w/ comma
    # SOLUTION: Somehow, excel is able to deal with this. So, download excel version, then export that to tab-delimited    
    sql = "\\copy raw_osceola_sales_export from 'source_data/sales_dnld_2012-09-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # sales are already in yyyy-mm-dd format
    

    # updates to sales data handling is done in parcels_raw_fdor

    # NOTE: NEED to get o_address...
    # PIN	Name	Address1	Address2	City	State	ZIP
    #sql = "\\copy raw_osceola_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2012-09-01_2012-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # Only owner name available from sales download - need to scrape to get owner mailing
    # or figure out how to get AGS to export it
    sql = """
        UPDATE parcels_template_osceola as p SET
            o_name1 = o.o_name1,
            o_address1 = '',
            o_address2 = '',
            o_city = '',
            o_state = '',
            o_zipcode = ''
            FROM raw_osceola_sales_export as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    
    # close communication with the database
    cursor.close()
    connection.close()

    exit()
    
    
# =======================================================================================
# PALM BEACH COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# 1/20/2018 - change the way its done - do not use county provided PA data, except to fill in where needed
# the AA files are the most recent and now used as the base
# supplement from certified to add things like buiulding info, etc
# AA File - updated monthly
#   - rec10 - parcel, owner, sales (last 4)
#   - rec20 - legal
#   - rec40 - valuations
# PAS405 file - certified
#   - everything AA files have plus:
#       - land
#       - building
#       - situs
#       - 5 sales
# Use downloaded county version for:
#   - ??
# No longer using FDOR - gets out of date too fast:
# =======================================================================================
def process_raw_palm_beach() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()      
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/palm_beach/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    # 10/6/2021 - single propertydata.csv file now provided.

    #mycmd = 'ogr2ogr -overwrite -f "CSV" /srv/mapwise_dev/county/palm_beach/processing/database/current/source_data/condodata.csv /srv/mapwise_dev/county/palm_beach/processing/vector/propapp/current/source_data/condodata.dbf'
    #print mycmd
    #os.system(mycmd)

    #mycmd = 'ogr2ogr -overwrite  -f "CSV" /srv/mapwise_dev/county/palm_beach/processing/database/current/source_data/propertydata.csv /srv/mapwise_dev/county/palm_beach/processing/vector/propapp/current/source_data/propertydata.dbf'
    #print mycmd
    #os.system(mycmd)
        

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    #mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathTopDir,'/current/source_data/condodata.csv > ',pathTopDir,'/current/source_data/condodata2.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)    
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/Property_Information_Table.csv > ',pathProcessing,'/source_data/propertydata2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathTopDir,'/current/source_data/propertydata2.csv > ',pathTopDir,'/current/source_data/propertydata3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathTopDir,'/current/source_data/PAS405_CERT2024_20241105.TXT > ',pathTopDir,'/current/source_data/PAS405_CERT2024_20241105_2.TXT'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathTopDir,'/current/source_data/REC10_CERT2024.TXT > ',pathTopDir,'/current/source_data/REC10_CERT2024_2.TXT'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathTopDir,'/current/source_data/REC20_CERT2024.TXT > ',pathTopDir,'/current/source_data/REC20_CERT2024_2.TXT'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathTopDir,'/current/source_data/REC40_CERT2024.TXT > ',pathTopDir,'/current/source_data/REC40_CERT2024_2.TXT'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # one friggin dash ruins the whole party
    #mycmd = ''.join(["sed -e 's:-:0:g' ",pathProcessing,'/source_data/REC40_2.TXT > ',pathProcessing,'/source_data/REC40_3.TXT'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

   
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------

    # certified files
    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-bldgdet-cert.py -- OUTPUT = parcels_bldgdet.txt') 
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-bldgdet-cert.py'
    os.system(mycmd)

    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-land-cert.py -- OUTPUT = parcels_land.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-land-cert.py'
    os.system(mycmd)

    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-owner-cert.py -- OUTPUT = parcels_owner.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-owner-cert.py'
    os.system(mycmd)

    # parcel file has STR, SUBDIV_ID,BLOCK_PIN, LOT_PIN. site address, LUSE, and valuation info
    # parcels_template_palm_beach
    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-parcel-cert.py -- OUTPUT = parcels_parcel.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-parcel-cert.py'
    os.system(mycmd)

    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-sales-cert.py -- OUTPUT = parcels_sales.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-sales-cert.py'
    os.system(mycmd)

    # AA rec10 file - preliminary file owner name and addresses and sales
    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-aa-rec10.py -- OUTPUT = parcels_aa_rec10.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-aa-rec10.py'
    os.system(mycmd)

    # AA rec20 file - preliminary file legal
    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-aa-rec20.py -- OUTPUT = parcels_aa_rec20.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-aa-rec20.py'
    os.system(mycmd)    

    # AA rec40 file - preliminary file valuations
    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-aa-rec40.py -- OUTPUT = parcels_aa_rec40.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-aa-rec40.py'
    os.system(mycmd)     
    
    # parcel update files from county
    # these get loaded into parcels_template2
    # 1/20/2012 - now includes condos
    print('RUN /srv/tools/python/parcel_processing/palm_beach/palm-beach-parcels-atts.py | INPUT = propertydata3.csv | OUTPUT = parcels_new.txt')
    mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-parcels-atts.py'
    os.system(mycmd)
    
    # old
    #print 'RUN palm-beach-parcels-atts-condos.py | INPUT = condodata2.csv | OUTPUT = parcels_new_condos.txt''
    #mycmd = '/srv/tools/python/parcel_processing/palm_beach/palm-beach-parcels-atts-condos.py'
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    sql = "\\copy raw_palm_beach_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_palm_beach_bldg from 'parcels_bldgdet.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_palm_beach_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_palm_beach_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)


    # this cannot be loaded into parcels_template_palm_beach
    sql = "\\copy raw_palm_beach_parcel from 'parcels_parcel.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # from county downloadable files
    sql = "\\copy parcels_template_palm_beach from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #sql = "\\copy parcels_template2_palm_beach from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # from old condo file
    #sql = "\\copy parcels_template2_palm_beach from 'parcels_new_condos.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd) 

    # Actually, should we never switch? Just overwite other info if you want it in the MapWise version of the data.
    # !!!! ONLY SWITCH TO using REC10 as main parcel file when REC10 file is newer than  certified data
    # REC10 file has STR, LUSE, and OWNER NAME AND MAILING
    # preliminary data has CONFIDENTIAL in PIN slot of its a confidential record - WTF - so can;t use it at all
    # from latest preliminary aa rec10 file
    sql = "\\copy parcels_template2_palm_beach from 'parcels_aa_rec10.txt' with delimiter as E'\\t' null as ''"
    #sql = "\\copy parcels_template_palm_beach from 'parcels_aa_rec10.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # from latest preliminary aa rec20 file
    sql = "\\copy raw_palm_beach_aa_rec20 from 'parcels_aa_rec20.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    # from latest preliminary aa rec40 file
    sql = "\\copy raw_palm_beach_aa_rec40 from 'parcels_aa_rec40.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)  

    sql = "\\copy raw_palm_beach_subdiv from 'source_data/raw_data/ResProj_Subdivision.txt' with CSV HEADER delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)  

    #exit()

    #-----------------------------------------------------------------------------------------
    # UPDATE TABLES
    #-----------------------------------------------------------------------------------------
    # update common subdivision names
    sql = """UPDATE parcels_template_palm_beach as p
            SET
            subdiv_nm2 = s.comm_name
            FROM subdiv_palm_beach_names as s 
        WHERE p.subdiv_nm = s.legal_name AND s.comm_name IS NOT NULL;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff,
            max(cast(bldg.stories as integer)) as max_stories,
            sum(cast(bldg.res_units as integer)) as sum_units,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_palm_beach_bldg_stats
        from raw_palm_beach_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table
    sql = """UPDATE parcels_template_palm_beach
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff,
            stories = bldg.max_stories,
            res_units = bldg.sum_units,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_palm_beach_bldg_stats as bldg
            WHERE parcels_template_palm_beach.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # THIS UPDATES Legal info from preliminary data
    # If this file is older than certified file, then we get older Legal data!
    # join on rec20 table
    sql = """UPDATE parcels_template_palm_beach
            SET
            legal_full = legal.legal_full,
            legal1 = legal.legal1,
            legal2 = legal.legal2,
            legal3 = legal.legal3
            FROM raw_palm_beach_aa_rec20 as legal
            WHERE parcels_template_palm_beach.pin = legal.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # THIS UPDATES Valuation info from preliminary data
    # If this file is older than certified file, then we get older Valuation data!
    # join on rec40 table
    #sql = """UPDATE parcels_template_palm_beach
    #        SET
    #            mrkt_tot = values.mrkt_tot,
    #            mrkt_lnd = values.mrkt_lnd,
    #            mrkt_bld = values.mrkt_bld,
    #            mrkt_ag = values.mrkt_ag,
    #            exempt_tot = values.exempt_tot,
    #            assd_tot = values.assd_tot,
    #            taxable_tot = values.taxable_tot,
    #            homestead = values.soh_tot
    #        FROM raw_palm_beach_aa_rec40 as values
    #        WHERE parcels_template_palm_beach.pin = values.pin;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    
    # join on land table
    sql = """UPDATE parcels_template_palm_beach
            SET
            condo_key = land.condo_key,
            name_misc = land.name_misc,
            zoning = land.zoning
            FROM raw_palm_beach_land as land
            WHERE parcels_template_palm_beach.pin = land.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #3/9/2017
    #Update palm beach to use raw PA data for site address


    # !!! double check which is being loaded into parcels_template_palm_beach and parcels_template2_palm_beach
    # !!! Do not do this if county version is main file
    # Bring in data from county version
    # join on parcel table
    # situs
    # owner - changed 11/2019 - AA files are not up to date always
    # may need to switch back to DBF files being the main source - unless we start paying for AA files monthly - $80 a pop?
    sql = """UPDATE parcels_template_palm_beach as p
            SET
            --s_section = parcel.s_section,
            --s_township = parcel.s_township,
            --s_range = parcel.s_range,
            --subdiv_id = parcel.subdiv_id,
            --block_pin = parcel.block_pin,
            --lot_pin = parcel.lot_pin,
            --name_misc = parcel.name_misc,
            
            o_name1 = parcel.o_name1,
            o_name2 = parcel.o_name2,
            o_address1 = parcel.o_address1,
            o_address2 = parcel.o_address2,
            o_address3 = parcel.o_address3,
            o_city = parcel.o_city,
            o_state = parcel.o_state,
            o_zipcode = parcel.o_zipcode,
            o_zipcode4 = parcel.o_zipcode4,

            s_number = parcel.s_number,
            s_pdir = parcel.s_pdir,
            s_name = parcel.s_name,
            s_type = parcel.s_type,
            s_sdir = parcel.s_sdir,
            --s_unit = parcel.s_unit,
            s_address = parcel.s_address,
            s_city = parcel.s_city,
            s_zipcode = parcel.s_zipcode
            
            --luse = parcel.luse,
            --luse_d = parcel.luse_d,
            --lusedor = parcel.lusedor,
            --condo = parcel.condo
            --mrkt_bld = parcel.mrkt_bld,
            --mrkt_impr = parcel.mrkt_impr,
            --mrkt_lnd = parcel.mrkt_lnd,
            --mrkt_ag = parcel.mrkt_ag,
            --mrkt_tot = parcel.mrkt_tot
            
            -- FROM raw_palm_beach_parcel as parcel
            FROM parcels_template2_palm_beach as parcel
            WHERE p.pin = parcel.pin;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    # !!! If using certified file as main parcel file, then don't do this
    # !!! If using county version as main parcel file, then do this
    # fill in some blanks - issues with county parcel file missing old and new records
    # join on parcel table
    # valuation values are already present in parcels_template_palm_beach 
    sql = """UPDATE parcels_template_palm_beach as p
            SET
            s_section = parcel.s_section,
            s_township = parcel.s_township,
            s_range = parcel.s_range,
            subdiv_id = parcel.subdiv_id,
            block_pin = parcel.block_pin,
            lot_pin = parcel.lot_pin,
            name_misc = parcel.name_misc,
            luse = parcel.luse,
            luse_d = parcel.luse_d,
            lusedor = parcel.lusedor,
            condo = parcel.condo,
            mrkt_bld = parcel.mrkt_bld,
            mrkt_impr = parcel.mrkt_impr,
            mrkt_lnd = parcel.mrkt_lnd,
            mrkt_ag = parcel.mrkt_ag,
            mrkt_tot = parcel.mrkt_tot,  
            s_number = parcel.s_number,
            s_pdir = parcel.s_pdir,
            s_name = parcel.s_name,
            s_type = parcel.s_type,
            s_sdir = parcel.s_sdir,
            s_unit = parcel.s_unit,
            s_address = parcel.s_address,
            s_city = parcel.s_city,
            s_zipcode = parcel.s_zipcode
            
            FROM raw_palm_beach_parcel as parcel
            WHERE p.pin = parcel.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # 1/1/2022 - county version of parcels stopped providing s_zipcode.
    # TEMP SOLUTION???? 5/10/21 - file from GIS dEPT: s_zipcode = o_zipcode
    sql = """UPDATE parcels_template_palm_beach as p
            SET
            s_zipcode = parcel.s_zipcode
            FROM raw_palm_beach_parcel as parcel
            WHERE p.pin = parcel.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
   
    # WE MAY NEED TO JUST CREATE A PRELIMINERY VS CERRTIFIED VERSION OF ALL OF PALM_BEACH
    
    # !!! THIS ASSUMES parcels_template_palm_beach is sourced from rec10
    # !!! ALTERNATE WAY IS parcels_template2_palm_beach is sourced from rec10
    # !!! SO FLIP parcels_template2_palm_beach AND parcels_template_palm_beach
    # BUT WE HAVE WE CAN'T use REC10 until its newer than CERT
    # 
    # PROBLEM: parcels_template_palm_beach is sourced from rec10
    #   - rec10 - updated monthly? 4 sales are in rec10, but we just bring in the first one
    #   - raw_palm_beach_sales - certified sales and already denormalized
    #   - parcels_template2_palm_beach - most recent sale info, only one field 
    # SOLUTION: UPDATE parcels_template_palm_beach   
    #   - if sale1 in parcels_template_palm_beach = sale1 in parcels_template2_palm_beach, then null it
    #   - if sale1 in parcels_template_palm_beach != sale1 in parcels_template2_palm_beach, then copy it in
    #       - this assumes these sale is a more recent one
    #       - do we need logic to make sure we are only getting sale dates > certified sales?
    #
    # first, check and see if sale present in rec10 is also in parcels_template2_palm_beach.
    # if it is, delete the sale from parcels_template2_palm_beach
    sql = """UPDATE parcels_template2_palm_beach as interim
        SET -- all sales columns
        sale1_date = null,
        sale1_year = null,
        sale1_amt = null,
        sale1_typ = null,
        sale1_qual = null,
        sale1_bk = null,
        sale1_pg = null
        FROM parcels_template_palm_beach as denormal
        WHERE interim.pin = denormal.pin AND
            interim.sale1_amt is not null AND
            interim.sale1_date is not null AND
            interim.sale1_amt = denormal.sale1_amt AND
            interim.sale1_bk = denormal.sale1_bk AND
            interim.sale1_pg = denormal.sale1_pg;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # !!!  THIS ASSUMES parcels_template_palm_beach is sourced from rec10
    # 
    # second, check and see if sale present in rec10 is also in parcels_template2_palm_beach.
    # if it is NOT, copy over sale from parcels_template2_palm_beach
    sql = """UPDATE parcels_template_palm_beach as interim
        SET -- all sales columns
        sale1_date = denormal.sale1_date,
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_qual = denormal.sale1_qual,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg
        FROM parcels_template2_palm_beach as denormal
        WHERE interim.pin = denormal.pin AND
            interim.sale1_amt is not null AND
            interim.sale1_date is not null AND
            interim.sale1_amt != denormal.sale1_amt AND
            interim.sale1_bk != denormal.sale1_bk AND
            interim.sale1_pg != denormal.sale1_pg;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()    

    # bring denormalized sales info into parcels_template WHERE sale1_amt is not null
    sql = """UPDATE parcels_template_palm_beach as interim
        SET -- all sales columns
        sale2_date = cast(denormal.sale1_date as text),
        sale2_year = denormal.sale1_year,
        sale2_amt = denormal.sale1_amt,
        sale2_typ = denormal.sale1_typ,
        sale2_qual = denormal.sale1_qual,
        sale2_bk = denormal.sale1_bk,
        sale2_pg = denormal.sale1_pg,

        sale3_date = cast(denormal.sale2_date as text),
        sale3_year = denormal.sale2_year,
        sale3_amt = denormal.sale2_amt,
        sale3_typ = denormal.sale2_typ,
        sale3_qual = denormal.sale2_qual,
        sale3_bk = denormal.sale2_bk,
        sale3_pg = denormal.sale2_pg,

        sale4_date = cast(denormal.sale3_date as text),
        sale4_year = denormal.sale3_year,
        sale4_amt = denormal.sale3_amt,
        sale4_typ = denormal.sale3_typ,
        sale4_qual = denormal.sale3_qual,
        sale4_bk = denormal.sale3_bk,
        sale4_pg = denormal.sale3_pg,

        sale5_date = cast(denormal.sale4_date as text),
        sale5_year = denormal.sale4_year,
        sale5_amt = denormal.sale4_amt,
        sale5_typ = denormal.sale4_typ,
        sale5_qual = denormal.sale4_qual,
        sale5_bk = denormal.sale4_bk,
        sale5_pg = denormal.sale4_pg        
        FROM raw_palm_beach_sales as denormal        
        WHERE interim.pin = denormal.pin and interim.sale1_amt is not null and interim.sale1_date is not null;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # bring denormalized sales info into parcels_template WHERE sale1_amt is null
    sql = """UPDATE parcels_template_palm_beach as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_qual = denormal.sale1_qual,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,

        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_qual = denormal.sale2_qual,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,

        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_qual = denormal.sale3_qual,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_qual = denormal.sale4_qual,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_qual = denormal.sale5_qual,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg
        FROM raw_palm_beach_sales as denormal
        WHERE interim.pin = denormal.pin and interim.sale1_amt is null and interim.sale1_date is null;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # make sure pin_clean is there
    sql = """UPDATE parcels_template_palm_beach
            SET
            pin_clean = replace(pin, '-','');"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()


    #exit() 


    # remove temp files
    mycmd = ''.join(['rm ',pathProcessing,'/source_data/propertydata2.csv'])
    #os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/propertydata3.csv'])
    #os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/condodata2.csv'])
    #os.system(mycmd) 

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/PAS405_CERT2019_20181017_2.TXT'])
    #os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/REC10_2.TXT'])
    #os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/REC20_2.TXT'])
    #os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/REC40_2.TXT'])
    #os.system(mycmd)    



# =======================================================================================
# pasco COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_pasco() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    # remove tabs in ftp_name.txt
    #mycmd = ''.join(['sed -e "s:\t::g" ',pathProcessing,'\\source_data\\ftp_name.txt > ',pathProcessing,'\\source_data\\ftp_name2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # TEST
    #mycmd = ''.join(['sed -e "s:\t::g" ',pathProcessing,'\\source_data\\ftp_legal.txt > ',pathProcessing,'\\source_data\\ftp_legal2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)    
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/pasco/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT FILES
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    # no need to remove - its being overwritten
    # 11/2023 - damn straight need to remove it otherwise we get an error: 
    mycmd = 'rm /srv/mapwise_dev/county/pasco/processing/database/current/source_data/pasco_parcels.csv'
    print(mycmd)
    os.system(mycmd)
    
    # CONVERT DBF to CSV via ogr2ogr
    #mycmd = 'ogr2ogr -overwrite -skipfailures -f "CSV" /srv/mapwise_dev/county/pasco/processing/database/current/source_data/pasco_parcels.csv /srv/mapwise_dev/county/pasco/processing/vector/propapp/current/source_data/pasco_parcels.dbf'
    # 11/2023 doing this to drop extra shape fields added
    
    # 7/2024 - this needs to be reviewed periodically - 2x a year?
    # get chatgpt to translate the resuts on an ogrinfo query that lists the fields in the table
    # and convert that to a comma delimnited list
    # TODO: Create a python program that gets the fields in a shapefile and returns 
    #  a comma delimited list of the fields.
    
    mycmd = 'ogr2ogr -overwrite -skipfailures -f "CSV" -select "PARCEL_ID, PARCEL, LAND_USE_C, LAND_USE_D, JUST_VALUE, ASSD_VAL_S, ASSD_VAL_C, EXEMPT_AMO, EXEMPT_A_1, TAXABLE_VA, TAXABLE__1, AG_LAND_VA, LAND_VALUE, LAND_SQ_FT, EFFECTIVE_, ACTUAL_YEA, LIVING_ARE, GROSS_AREA, NUMBER_BUI, NUMBER_RES, HAS_POOL, OWNER_NAME, OWNER_NA_1, MAILING_AD, MAILING__1, MAILING_CI, MAILING_ST, MAILING_ZI, MAILING_CO, NEIGHBORHO, TAX_AREA, CENSUS_BLO, SITE_CITY, SITE_ZIP, HAS_HOMEST, SALE_BOOK, SALE_PAGE, SALE_AMOUN, SALE_QUALI, SALE_VACAN, PREVIOUS_O, LEGAL_DESC, JURISDICTI" /srv/mapwise_dev/county/pasco/processing/database/current/source_data/pasco_parcels.csv /srv/mapwise_dev/county/pasco/processing/vector/propapp/current/source_data/pasco_parcels.dbf pasco_parcels'
    print(mycmd)
    os.system(mycmd)
    
    # csvkit command
    # 2/2023 - this is not finishing correctly and not sure what the error is
    # manually open in excel and export to csv from there
    print('!!!!!!!!!!!!!!!!!!!!\n\n\n')
    print('Make sure parcel_summary.xlsx was manually converted to CSV via excel export.')
    print('\n\n!!!!!!!!!!!!!!!!!!!!\n\n\n')
    #mycmd = 'in2csv ./source_data/parcel_summary.xlsx > ./source_data/parcel_summary.csv'
    #print mycmd	
    #os.system(mycmd)

    # convert file to UTF-8 from Windows-1252
    #mycmd = "iconv -f cp1252 -t utf8 ./source_data/parcel_summary.csv > ./source_data/parcel_summary_utf8.csv"
    #print mycmd	
    #os.system(mycmd)
    
    
    # Remove header
    # 2025-02-04 - Get this - header already being removed in python!
    # Just skip it in python!
    # sed is mangling the file for some unknown reason
    # NEW RULE - don't use sed to remove a header
    # NEW QA RULE - check to see if sed is mangling a file!!!!
    # NEW RESEARCH - this is sed v4.4, apprently there are newer versions! latest is 4.8?
    #    see if this manging behaviour changed.
    
    # NEW RULE: When exporting out of excel to CSV - set the character set to UTF-8
    
    #-----------------------------------------------------------------------------------------
    # Remove duplicate records
    #-----------------------------------------------------------------------------------------
    # need to remove first line (header) as well
    #mycmd = "sed '1d' ./source_data/parcel_summary.csv | sort -u  > ./source_data/parcel_summary2.csv"
    #mycmd = "sed '1d' ./source_data/parcel_summary.csv  > ./source_data/parcel_summary3.csv"
    #print mycmd	
    #os.system(mycmd)

    # 2025-02-05 - try skipping sort -u because it may be causing unwanted side effects
    # sort with -u option returns unique records sorted by ???
    #mycmd = "sort -u ./source_data/parcel_summary2.csv > ./source_data/parcel_summary3.csv"
    #print mycmd	
    #os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #-----------------------------------------------------------------------------------------

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/parcel_summary.csv > ',pathSourceData,'/parcel_summary4.csv'])
    # tr -cd '\11\12\15\40-\133\135-\176' < /srv/mapwise_dev/county/pasco/processing/database/current/source_data/parcel_summary3.csv > /srv/mapwise_dev/county/pasco/processing/database/current/source_data/parcel_summary4.csv
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/legal.csv > ',pathSourceData,'/legal_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd) 

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/owners.csv > ',pathSourceData,'/owners_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/subdivision_index.csv > ',pathSourceData,'/subdivision_index_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd) 
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------

    print('RUN pasco-land-csv.py -- FILE land.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-land-csv.py'
    print(mycmd)
    os.system(mycmd)

    # MANUAL EXPORT FROM parcel_summary.xlsx
    print('RUN pasco-parcel-summary-csv.py -- IN FILE parcel_summary.csv OUT FILE parcels_new.txt')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-parcel-summary-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN pasco-shp-current.py -- FILE pasco_parcels.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-shp-current.py'
    print(mycmd)
    os.system(mycmd)

    # legal
    print('RUN pasco-legal-csv.py -- FILE legal.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-legal-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    # owner name and mailing
    print('RUN pasco-owners-csv.py -- FILE owners_2.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-owners-csv.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN pasco-sales-all-csv.py -- FILE sales_all.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-sales-all-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN pasco-site-addresses-csv.py -- FILE site_addresses.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-site-addresses-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN pasco-subdivision-index-csv.py -- FILE pasco-subdivision_index.csv')
    mycmd = '/srv/tools/python/parcel_processing/pasco/pasco-subdivision-index-csv.py'
    print(mycmd)
    os.system(mycmd)


    
    #exit()

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_pasco from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_pasco_shp_atts from 'parcels_shp_atts.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)  

    sql = "\\copy raw_pasco_subdiv from 'parcels_subdiv.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_pasco_address from 'parcels_address.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # load new sales table 
    sql = "\\copy raw_pasco_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # load new owner table 
    sql = "\\copy raw_pasco_owner from 'parcels_owners.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # 11/2020 - LAND TABLE NOT CURRENTLY USED!
    # load land table 
    sql = "\\copy raw_pasco_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # load legal table 
    sql = "\\copy raw_pasco_legal from 'parcels_legal.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()

    #-----------------------------------------------------------------------------------------
    # UPDATE BUILDING INFO FROM SHP_ATTS
    #-----------------------------------------------------------------------------------------    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_pasco
            SET
            yrblt_act = bldg.yrblt_act,
            yrblt_eff = bldg.yrblt_eff, 
            sqft_htd = bldg.sqft_htd, 
            --sqft_tot = bldg.sqft_tot, 
            --num_bath = bldg.num_bath,
            --num_bed = bldg.num_bed,
            num_bldg = bldg.num_bldg
            --luse = bldg.luse,
            --lusedor = bldg.lusedor
            FROM raw_pasco_shp_atts as bldg
            WHERE parcels_template_pasco.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    #-----------------------------------------------------------------------------------------
    # join on sub table to bring in sub info
    #----------------------------------------------------------------------------------------- 
    sql = """UPDATE parcels_template_pasco as p
            SET
            subdiv_nm = sub.subdiv_nm,
            subdiv_nm2 = sub.subdiv_nm2
            FROM raw_pasco_subdiv as sub
            WHERE p.s_range || p.s_township || p.s_section || p.subdiv_id = sub.subdiv_id;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # join on land table to bring in sub info
    #----------------------------------------------------------------------------------------- 
    sql = """UPDATE parcels_template_pasco as p
            SET
            zoning = land.zoning
            FROM raw_pasco_land as land
            WHERE p.pin = land.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # join on legal table to bring in sub info
    #----------------------------------------------------------------------------------------- 
    sql = """UPDATE parcels_template_pasco as p
            SET
            legal_full = legal.legal_full,
            legal1 = legal.legal1,
            legal2 = legal.legal2,
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_pasco_legal as legal
            WHERE p.pin = legal.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #----------------------------------------------------------------------------------------- 
    # join on situs table to bring in situs info
    #----------------------------------------------------------------------------------------- 
    sql = """UPDATE parcels_template_pasco
            SET
            s_number = situs.s_number,
            s_pdir = situs.s_pdir,
            s_name = situs.s_name,
            s_type = situs.s_type,
            s_sdir = situs.s_sdir,
            s_unit = situs.s_unit,
            s_address = situs.s_address,
            s_city = situs.s_city,
            s_zipcode = situs.s_zipcode,
            s_zipcode4 = situs.s_zipcode4
            FROM raw_pasco_address as situs
            WHERE parcels_template_pasco.pin = situs.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #----------------------------------------------------------------------------------------- 
    # join on owner table to bring in owner info
    #----------------------------------------------------------------------------------------- 
    sql = """UPDATE parcels_template_pasco
            SET
            o_name1 = owner.o_name1,
            o_name2 = owner.o_name2,
            o_address1 = owner.o_address1,
            o_address2 = owner.o_address2,
            o_city = owner.o_city,
            o_state = owner.o_state,
            o_zipcode = owner.o_zipcode,
            o_country = owner.o_country
            FROM raw_pasco_owner as owner
            WHERE parcels_template_pasco.pin = owner.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #exit()
    
    # So, denormlize the recent sales
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_pasco_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_multi ELSE NULL END) AS sale4_multi,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_multi ELSE NULL END) AS sale5_multi,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null           
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_multi,
                --grantor,
                --grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_pasco_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_pasco AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_pasco as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        --sale4_grantor = denormal.sale4_grantor,
        --sale4_grantee = denormal.sale4_grantee
        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg
        --sale5_docnum = denormal.sale5_docnum,
        --sale5_grantor = denormal.sale5_grantor,
        --sale5_grantee = denormal.sale5_grantee
        FROM raw_pasco_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    
    # remove temp files
    mycmd = ''.join(['rm ',pathProcessing,'/source_data/dr590csv_2.txt'])
    os.system(mycmd)

    # remove temp files
    mycmd = ''.join(['rm ',pathProcessing,'/source_data/naldata_2.csv'])
    os.system(mycmd)
 

# =======================================================================================
# PINELLAS COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_pinellas() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/pinellas/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PRE-PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #del xx.txt

    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathSourceData,'/RP_PROPERTY_INFO.csv > ',pathSourceData,'/RP_PROPERTY_INFO2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathSourceData,'/RP_SALES.csv > ',pathSourceData,'/RP_SALES2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathSourceData,'/RP_OS_SALES.csv > ',pathSourceData,'/RP_OS_SALES2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/RP_PROPERTY_INFO2.csv > ',pathSourceData,'/RP_PROPERTY_INFO3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)    
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    
    # TODO - process the land file???
    
    #print 'RUN pinellas-land-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-land-current.py'
    #print mycmd
    #os.system(mycmd)
    
    print('RUN pinellas-property-info-current.py -- input: RP_BUILDING.csv -- output: parcel_bldg.txt')
    mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-property-info-current.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN pinellas-parcel-value-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-parcel-value-current.py'
    #print mycmd
    #os.system(mycmd)
    
    #print 'RUN pinellas-property-value-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-property-value-current.py'
    #print mycmd
    #os.system(mycmd)

    print('RUN pinellas-sale-current.py -- input:  -- output: ')
    mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-sale-current.py'
    print(mycmd)
    os.system(mycmd)
    
    # For whatever reason, the "old" file has all sales and the "new file" has only last 3 or 4 years.
    # And the file formats are different!
    print('RUN pinellas-sale-old.py -- input:  -- output: ')
    mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-sale-old.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN pinellas-situs-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-situs-current.py'
    #print mycmd
    #os.system(mycmd)

    print('RUN pinellas-bldg-current -- input:  -- output: .py')
    mycmd = '/srv/tools/python/parcel_processing/pinellas/pinellas-bldg-current.py'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    
    # Not loading land file???
    
    sql = "\\copy parcels_template_pinellas from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)   

    #sql = "\\copy raw_pinellas_parcel_value from 'parcel_value.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    #sql = "\\copy raw_pinellas_situs from 'parcel_situs.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_pinellas_bldg from 'parcel_bldg.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
        
    # load "old" sales
    sql = "\\copy raw_pinellas_sales from 'sale_new2.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE parcels_template with related data
    #-----------------------------------------------------------------------------------------  
 
    #connection.commit()
    

    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act, 
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd,
            count(*) as sum_num_bldg,
            max(cast(bldg.stories as integer)) as max_stories
        INTO raw_pinellas_bldg_stats
        from raw_pinellas_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_pinellas
            SET
            yrblt_act = bldg.min_yrblt_act,  
            yrblt_eff = bldg.max_yrblt_eff, 
            sqft_tot = bldg.sum_sqft_tot,
            sqft_htd = bldg.sum_sqft_htd,
            num_bldg = bldg.sum_num_bldg,
            stories = bldg.max_stories
            FROM raw_pinellas_bldg_stats as bldg
            WHERE parcels_template_pinellas.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     


    # 4/2024 - no longer valid
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_pinellas
            SET
            s_number = situs.s_number,
            s_pdir = situs.s_pdir,
            s_name = situs.s_name,
            s_type = situs.s_type,
            s_sdir = situs.s_sdir,
            s_unit = situs.s_unit,
            s_address = situs.s_address,
            s_city = situs.s_city,
            s_zipcode = situs.s_zipcode
            -- s_zipcode4 = situs.s_zipcode4
            FROM raw_pinellas_situs as situs
            WHERE parcels_template_pinellas.pin = situs.pin ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_pinellas_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual_code ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual_code ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual_code ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.vacant ELSE NULL END) AS sale4_vac,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.qual_code ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.book ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.page ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.vacant ELSE NULL END) AS sale5_vac,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.qual_code ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.book ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.page ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantee ELSE NULL END) AS sale5_grantee
        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                vacant,
                --instrument,
                qual_code,
                book,
                page,
                --multi,
                grantor,
                grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_pinellas_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_pinellas AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_pinellas as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        --sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        --sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        --sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        --sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        --sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_pinellas_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    # fix anomoly in sale amnt for 1 parcel
    # 6,933,305,125 for a single family home
    sql = "UPDATE parcels_template_pinellas set sale3_amt = sale3_amt / 10 where pin = '153028750780040150'"
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    # remove temp files
    mycmd = ''.join(['rm ',pathProcessing,'/source_data/owner_mail2.csv'])
    os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/owner_mail3.csv'])
    os.system(mycmd)
    

    
# =======================================================================================
# polk COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_polk() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    # remove tabs in ftp_name.txt
    #mycmd = ''.join(['sed -e "s:\t::g" ',pathProcessing,'\\source_data\\ftp_name.txt > ',pathProcessing,'\\source_data\\ftp_name2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    # doesn't work - doing it n python instead
    # remove embedded newline in ftp_name.txt
    #mycmd = ''.join(['sed -e "s:\\r\\n::g" ',pathProcessing,'/source_data/ftp_parcel.txt > ',pathProcessing,'/source_data/ftp_parcel2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # convert any backslashes to forward slashes
    #del hillsborough_noheader3.txt
    #mycmd = ''.join(['sed -e "s:\\\:/:g" ',pathSourceData,'/ftp_legal.txt > ',pathSourceData,'/ftp_legal2.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # strip_chars_gt_127_space.py    
    #mycmd = ''.join(['L:/projects/tools/python/lib/strip_chars_gt_127_space.py ',pathSourceData,'/ftp_legal2.txt ',pathSourceData,'/ftp_legal3.txt'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    

    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/ftp_owner.txt > ',pathProcessing,'/source_data/ftp_owner2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # GOLDEN ASCII CLEANSING COMMAND
    # tr -cd '\11\12\15\40-\133\135-\176' < ftp_legal.txt > ftp_legal2.txt
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/ftp_legal.txt > ',pathProcessing,'/source_data/ftp_legal2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/polk/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN polk-raw-2012-08-owner.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-owner.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN polk-raw-2012-08-parcel.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-parcel.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN polk-raw-2012-08-bldg.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-bldg.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN polk-raw-2012-08-sub.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-sub.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN polk-raw-2012-08-legal.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-legal.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN polk-raw-2012-08-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-sales.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN polk-raw-2011-08-situs.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-situs.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN polk-raw-2011-08-land.py')
    mycmd = '/srv/tools/python/parcel_processing/polk/polk-raw-2012-08-land.py'
    print(mycmd)
    os.system(mycmd)       

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_polk from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_polk_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_polk_legal_normal from 'parcels_legal.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_polk_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_polk_sub from 'parcels_sub.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_polk_situs from 'parcels_situs.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # load new sales table 
    sql = "\\copy raw_polk_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_polk_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)     
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # LOAD NORMALIZED LEGAL INTO DENORMALIZED TABLE
    #-----------------------------------------------------------------------------------------    
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_polk_legal_denormal 
    SELECT 
        legal_normal.pin,
        -- section 1
        MAX(CASE WHEN legal_normal.i = 1 THEN legal_normal.legal ELSE NULL END) AS legal1,

        -- section 2
        MAX(CASE WHEN legal_normal.i = 2 THEN legal_normal.legal ELSE NULL END) AS legal2,

        -- section 3
        MAX(CASE WHEN legal_normal.i = 3 THEN legal_normal.legal ELSE NULL END) AS legal3,
        
        -- section 4
        MAX(CASE WHEN legal_normal.i = 4 THEN legal_normal.legal ELSE NULL END) AS legal4,

        -- section 5
        MAX(CASE WHEN legal_normal.i = 5 THEN legal_normal.legal ELSE NULL END) AS legal5,

        -- section 6
        MAX(CASE WHEN legal_normal.i = 6 THEN legal_normal.legal ELSE NULL END) AS legal6
        
        FROM
            (SELECT 
                pin,
                line_num,
                legal,
                row_number() OVER (PARTITION BY pin ORDER BY line_num asc) AS i
                FROM raw_polk_legal_normal WHERE legal is not null
            ) AS legal_normal
            INNER JOIN 
                parcels_template_polk AS interim ON legal_normal.pin = interim.pin
        GROUP BY legal_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_polk
        SET
            legal1 = legal.legal1,
            legal2 = legal.legal2,
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6,
            legal_full = concat(' ', legal.legal1, legal.legal2, legal.legal3, legal.legal4, legal.legal5, legal.legal6)
        FROM raw_polk_legal_denormal as legal
        WHERE parcels_template_polk.pin = legal.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths,
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_polk_bldg_stats
        from raw_polk_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_polk
            SET
            yrblt_act = bldg.min_yrblt_act,  
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds,
            stories = bldg.max_stories
            FROM raw_polk_bldg_stats as bldg
            WHERE parcels_template_polk.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    # join on sub table to bring in sub info
    sql = """UPDATE parcels_template_polk
            SET
            subdiv_nm = sub.subdiv_nm
            FROM raw_polk_sub as sub
            WHERE parcels_template_polk.subdiv_id = sub.subdiv_id and parcels_template_polk.subdiv_id != '000000';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_polk
            SET
            o_name1 = owner.o_name1,
            o_name2 = owner.o_name2,
            o_address1 = owner.o_address1,
            o_address2 = owner.o_address2,
            o_address3 = owner.o_address3,
            o_city = owner.o_city,
            o_state = owner.o_state,
            o_zipcode = owner.o_zipcode,
            o_zipcode4 = owner.o_zipcode4
            FROM raw_polk_owner as owner
            WHERE parcels_template_polk.pin = owner.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_polk
            SET
            s_number = situs.s_number,
            s_pdir = situs.s_pdir,
            s_name = situs.s_name,
            s_type = situs.s_type,
            s_sdir = situs.s_sdir,
            s_unit = situs.s_unit,
            s_address = situs.s_address,
            s_city = situs.s_city,
            s_zipcode = situs.s_zipcode,
            s_zipcode4 = situs.s_zipcode4
            FROM raw_polk_situs as situs
            WHERE parcels_template_polk.pin = situs.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_polk_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual_code ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual_code ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual_code ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.vacant ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.instrument ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.qual_code ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.book ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.page ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.vacant ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.instrument ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.qual_code ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.book ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.page ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                vacant,
                instrument,
                qual_code,
                book,
                page,
                --multi,
                grantor,
                grantee,
                --docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_polk_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_polk AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_polk as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        FROM raw_polk_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()

    
# =======================================================================================
# PUTNAM COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# NOTE: This version uses 5/2015 process
# =======================================================================================
def process_raw_putnam() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/putnam/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    #
    # csvkit command
    # do this in the acquisition code
    #mycmd = 'in2csv --sheet "" ./source_data/CAMBL.xlsx > ./source_data/CAMBL.csv'
    #print mycmd	
    #os.system(mycmd)
    
    
    #print 'RUN putnam-convert-sales-csv.py'
    #mycmd = '/srv/tools/python/parcel_processing/putnam/putnam-convert-sales-csv.py'
    #print mycmd
    #os.system(mycmd)
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    #sql = "\\copy raw_putnam_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    sql = "\\copy raw_putnam_sales from 'source_data/sales_current.csv' CSV null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)


    sql = """
       ALTER TABLE raw_putnam_sales ADD COLUMN sale_typ text;
       ALTER TABLE raw_putnam_sales ADD COLUMN sale_year integer;
       UPDATE raw_putnam_sales SET sale_year = EXTRACT(YEAR FROM sale_date)::int;
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    #sql = "\\copy raw_putnam_owner from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' CSV null as ''"
    sql = "\\copy raw_putnam_owner from 'source_data/owner_current.csv' CSV null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #exit()
    
    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------    
    sql = """
        UPDATE parcels_template_putnam as p SET
            o_name1 = f.o_name1,
            o_name2 = f.o_name2,
            o_address1 = f.o_address1,
            o_address2 = f.o_address2,
            o_address3 = f.o_address3,
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode
            --o_zipcode4 = f.o_zipcode4,
            --o_country = null
            FROM raw_putnam_owner as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
 
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()
    
    
# =======================================================================================
# PUTNAM COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# NOTE: This version uses 5/2015 process
# =======================================================================================
def process_raw_putnam_2022() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/putnam/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    #
    
    
    print('RUN putnam-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/putnam/putnam-convert-sales-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    
    #
    # 3/2019 process:
    #
    # See process for getting recent sales csv from mapping app
    #
    # Run putnam-convert-owner-scrape.py
    # L:\projects\tools\python\parcel_processing\putnam\putnam-convert-owner-scrape.py
    #
    # Run putnam-convert-json-owner.php
    # c:\ms4w_wms1\Apache\cgi-bin\php-cgi.exe l:\projects\tools\python\parcel_processing\putnam\putnam-convert-json-owner.php
    
    # OLD
    # NOTE! Manually Run wget to get sales data -- M:\docs\a_data\parcels\scripts_county\putnam\putnam_3_download_attributes.bat
    # Then run putnam-convert-sales.php, then putnam-convert-owner-scrape.py, then putnam-convert-owner.php
    
    #print 'RUN putnam-convert-sales.php'
    # change working directory to cgi-bin folder so we can run php
    #path =  'c:\\ms4w_wms1\\Apache\\cgi-bin'
    #os.chdir(path)
    #mycmd = 'php-cgi.exe /srv/tools/python/parcel_processing/putnam/putnam-convert-sales.php'
    #print mycmd
    #os.system(mycmd)
    # change working dir back
    #os.chdir(pathProcessing)

    #print 'RUN putnam-convert-sales-owner.py'
    #mycmd = '/srv/tools/python/parcel_processing/putnam/putnam-convert-sales-owner.py'
    #print mycmd
    #os.system(mycmd)    
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_putnam_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    #os.system(mycmd)

    #sql = "\\copy raw_putnam_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # NOTE: epoch conversion is now done on PHP side, but nice example of how to do it in postgres    
    # Convert epoch date to yyyy-mm-dd
    # Pythoin on windows will complain about doing the conversion, but postgres does no
    t
    # SELECT CAST(DATE 'epoch' + -1825403904 * INTERVAL '1 second' as date)
    # SELECT CAST(DATE 'epoch' + -1825403904 * INTERVAL '1 second' as date), EXTRACT(YEAR FROM CAST(DATE 'epoch' + -1825403904 * INTERVAL '1 second' as date))
    #sql = """
    #    UPDATE raw_putnam_sales as p SET
    #        sale_date = CAST(DATE 'epoch' + CAST(sale_date_epoch as real) * INTERVAL '1 second' as date),
    #        sale_year = EXTRACT(YEAR FROM CAST(DATE 'epoch' + CAST(sale_date_epoch as real) * INTERVAL '1 second' as date))
    #;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit() 

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #exit()
    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    sql = """
        UPDATE parcels_template_putnam as p SET
            o_name1 = f.o_name1,
            o_name2 = f.o_name2,
            o_address1 = f.o_address1,
            o_address2 = null,
            o_address3 = null,
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = f.o_zipcode4,
            o_country = null
            FROM raw_putnam_owner as f
            WHERE p.pin = f.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in putnam sales download

    sql = """
        UPDATE parcels_template_putnam as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_putnam_sales as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

 
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()

    
# =======================================================================================
# PUTNAM COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_putnam_OLD2() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/putnam/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # NOTE! Manually Run wget to get sales data, then putnam-convert-sales.php, then putnam-convert-owner-scrape.py, then putnam-convert-owner.php
    
    #print 'RUN putnam-convert-sales.php'
    # change working directory to cgi-bin folder so we can run php
    #path =  'c:\\ms4w_wms1\\Apache\\cgi-bin'
    #os.chdir(path)
    #mycmd = 'php-cgi.exe /srv/tools/python/parcel_processing/putnam/putnam-convert-sales.php'
    #print mycmd
    #os.system(mycmd)
    # change working dir back
    #os.chdir(pathProcessing)

    #print 'RUN putnam-convert-sales-owner.py'
    #mycmd = '/srv/tools/python/parcel_processing/putnam/putnam-convert-sales-owner.py'
    #print mycmd
    #os.system(mycmd)    
    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_putnam_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_putnam_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    print('\nSQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # NOTE: epoch conversion is now done on PHP side, but nice example of how to do it in postgres    
    # Convert epoch date to yyyy-mm-dd
    # Pythoin on windows will complain about doing the conversion, but postgres does not
    # SELECT CAST(DATE 'epoch' + -1825403904 * INTERVAL '1 second' as date)
    # SELECT CAST(DATE 'epoch' + -1825403904 * INTERVAL '1 second' as date), EXTRACT(YEAR FROM CAST(DATE 'epoch' + -1825403904 * INTERVAL '1 second' as date))
    #sql = """
    #    UPDATE raw_putnam_sales as p SET
    #        sale_date = CAST(DATE 'epoch' + CAST(sale_date_epoch as real) * INTERVAL '1 second' as date),
    #        sale_year = EXTRACT(YEAR FROM CAST(DATE 'epoch' + CAST(sale_date_epoch as real) * INTERVAL '1 second' as date))
    #;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit() 

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    sql = """
        UPDATE parcels_template_putnam as p SET
            o_name1 = f.o_name1,
            o_name2 = f.o_name2,
            o_address1 = f.o_address1,
            o_address2 = null,
            o_address3 = null,
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = f.o_zipcode4,
            o_country = null
            FROM raw_putnam_owner as f
            WHERE p.pin = f.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

 
    # close communication with the database
    cursor.close()
    connection.close()

# =======================================================================================
# PUTNAM COUNTY RAW
# - INPUT = Just using FDOR and that;s it
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_putnamX() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # close communication with the database
    cursor.close()
    connection.close()    



# =======================================================================================
# SANTA_ROSA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_santa_rosa() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/santa_rosa/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # CONVERT XLSX FILES to CSV
    #-----------------------------------------------------------------------------------------    
    
    print("\n","NOTE!!! watch out for commenting out xlsx to csv conversion - especially when processing another certified year.")
    
    # just another remindr which year we are processing - update when another years along and update the CSV files.
    
    print("\n Processing 2023 certified \n")
    
    # csvkit command
    mycmd = 'in2csv ./source_data/CAMBL.xlsx > ./source_data/CAMBL.csv'
    print(mycmd)	
    #os.system(mycmd)
    
    # csvkit command
    mycmd = 'in2csv ./source_data/CAMBS.xlsx > ./source_data/CAMBS.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMBT.xlsx > ./source_data/CAMBT.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMBU.xlsx > ./source_data/CAMBU.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMLA.xlsx > ./source_data/CAMLA.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMLE.xlsx > ./source_data/CAMLE.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMPA.xlsx > ./source_data/CAMPA.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMPR.xlsx > ./source_data/CAMPR.csv'
    print(mycmd)	
    #os.system(mycmd)

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMSA.xlsx > ./source_data/CAMSA.csv'
    print(mycmd)	
    #os.system(mycmd)  

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMSUBD.xlsx > ./source_data/CAMSUBD.csv'
    print(mycmd)	
    #os.system(mycmd)  

    # csvkit command
    mycmd = 'in2csv ./source_data/CAMXF.xlsx > ./source_data/CAMXF.csv'
    print(mycmd)	
    #os.system(mycmd)  

    # csvkit command
    mycmd = 'in2csv ./source_data/CFLPE.xlsx > ./source_data/CFLPE.csv'
    print(mycmd)	
    #os.system(mycmd)      
    
    #-----------------------------------------------------------------------------------------
    # REMOVE TRASH
    #-----------------------------------------------------------------------------------------        
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/CAMLE.csv > ',pathProcessing,'/source_data/CAMLE_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN santa_rosa-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa_rosa-convert-sales.py'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------    
    print('RUN santa_rosa-parcel-campa.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-parcel-campa.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-parcel-cflpe.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-parcel-cflpe.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-parcel-campr.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-parcel-campr.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-sales-camsa.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-sales-camsa.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-bldg-cambl.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-bldg-cambl.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-bldg-cambu.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-bldg-cambu.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-bldg-cambs.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-bldg-cambs.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-land-camla.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-land-camla.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN santa_rosa-legal-camle.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa-rosa-legal-camle.py'
    print(mycmd)
    os.system(mycmd)
        
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_santa_rosa from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_parcel_cflpe from 'parcels_parcel_cflpe.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_parcel_campr from 'parcels_parcel_campr.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_sales_camsa from 'parcels_sales_camsa.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_bldg_cambl from 'parcels_bldg_cambl.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_bldg_cambu from 'parcels_bldg_cambu.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_bldg_cambs from 'parcels_bldg_cambs.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_land_camla from 'parcels_land_camla.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_santa_rosa_legal_camle from 'parcels_legal_camle.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    
    sql = "\\copy raw_santa_rosa_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # CERTIFIED
    #sql = "\\copy raw_santa_rosa_bldg from 'parcels_cert_bldg.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)     

    # INSERT download sales into raw sales table
    # web download is in pin format, sales raw is in pin2_clean format
    # "19-2S-27-4938-00F00-0020";"192S27493800F000020";"";"S27219493800F000020"
    # concat(substr(pin,5,1),substr(pin,7,2),substr(pin,4,1),substr(pin,1,2),replace(substr(pin,9,16),'-',''))
    sql = """INSERT INTO raw_santa_rosa_sales_camsa
            (pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg)
            SELECT concat(substr(pin,5,1),substr(pin,7,2),substr(pin,4,1),substr(pin,1,2),replace(substr(pin,9,16),'-','')) as pin, sale_amt, sale_year, sale_date, sale_vac, sale_typ, sale_qual, sale_bk, sale_pg
            FROM raw_santa_rosa_sales_dwnld;
            """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    #process_raw_fdor(county)



    # update parcel
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            o_name1 = f.o_name1,
            o_address1 = f.o_address1,
            o_address2 = f.o_address2,
            o_address3 = f.o_address3,
            o_city = f.o_city,
            o_state = f.o_state,
            o_country = f.o_country,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = f.o_zipcode4
            FROM raw_santa_rosa_parcel_cflpe as f
            WHERE p.pin2_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update parcel with new owner names from web download
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            o_name1 = f.o_name1,
            o_name2 = f.o_name2,
            o_address1 = f.o_address1,
            o_address2 = f.o_address2,
            o_address3 = f.o_address3,
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_zipcode4 = f.o_zipcode4
            FROM raw_santa_rosa_sales_dwnld as f
            WHERE pin2_clean = concat(substr(f.pin,5,1),substr(f.pin,7,2),substr(f.pin,4,1),substr(f.pin,1,2),replace(substr(f.pin,9,16),'-',''))
    ;"""
    
    # santa rosa downloadable data does not include owner name or mailing
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            o_name1 = 'Owner Name Missing',
            o_name2 = null,
            o_address1 = 'Owner Adderess Missing',
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_santa_rosa_sales_dwnld as f
            WHERE pin2_clean = concat(substr(f.pin,5,1),substr(f.pin,7,2),substr(f.pin,4,1),substr(f.pin,1,2),replace(substr(f.pin,9,16),'-',''))
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # update parcel
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            luse = f.luse,
            lusedor = f.lusedor,
            mrkt_lnd = f.mrkt_lnd,
            mrkt_bld = f.mrkt_bld,
            mrkt_impr = f.mrkt_impr,
            mrkt_tot = f.mrkt_tot
            FROM raw_santa_rosa_parcel_campr as f
            WHERE p.pin2_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address from download file
    #-----------------------------------------------------------------------------------------
    #sql = """
    #    UPDATE parcels_template_santa_rosa as p SET
    #        o_name1 = o.o_name1,
    #        o_name2 = o.o_name2,
    #        o_address1 = o.o_address1,
    #        o_address2 = o.o_address2,
    #        o_address3 = o.o_address3,
    #        o_city = o.o_city,
    #        o_state = o.o_state,
    #        o_zipcode = o.o_zipcode,
    #        o_zipcode4 = o.o_zipcode4
    #        FROM raw_santa_rosa_sales_dwnld as o
    #        WHERE p.pin = o.pin
    #;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # NOTE: update owner name and mailing address from FDOR 2020 Preliminary table
    # do this when prelkiminary data comes out in order to put updated owner names and addresses in
    # not happening until 8/1/202 or so
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            o_name1 = o.own_name,
            o_name2 = null,
            o_name3 = null,
            o_address1 = o.own_addr1,
            o_address2 = o.own_addr2,
            o_address3 = null,
            o_city = o.own_city,
            o_state = o.own_state,
            o_zipcode = o.own_zipcd,
            o_country = null
            FROM parcels_fdor_2024 as o
            WHERE p.pin = o.parcel_id and co_no = 67
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # combine building tables
    sql = """INSERT INTO raw_santa_rosa_bldg_cambl SELECT * FROM raw_santa_rosa_bldg_cambu
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # !!!!
    # clear out outragoueous number of bedrooms
    sql = """DELETE FROM raw_santa_rosa_bldg_cambl WHERE num_bed > 5000
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update building info from raw certified file
    sql = """SELECT 
            bldg.pin_clean, 
            sum(cast(bldg.sqft_htd as int)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as int)) as sum_sqft_tot,
            sum(cast(bldg.sqft_adj as int)) as sum_sqft_adj,
            sum(cast(bldg.num_bath as int)) as sum_num_bath,
            sum(cast(bldg.num_bed as int)) as sum_num_bed,
            max(cast(bldg.stories as int)) as max_stories,
            min(cast(bldg.yrblt_act as int)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as int)) as max_yrblt_eff,
            count(*) as num_bldg
        INTO raw_santa_rosa_bldg_sum
        from raw_santa_rosa_bldg_cambl as bldg
        group by bldg.pin_clean;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            sqft_htd = f.sum_sqft_htd,
            sqft_tot = f.sum_sqft_tot,
            sqft_adj = f.sum_sqft_adj,
            num_bath = f.sum_num_bath,
            num_bed = f.sum_num_bed,
            stories = f.max_stories,
            yrblt_act = f.min_yrblt_act,
            yrblt_eff = f.max_yrblt_eff,
            num_bldg = f.num_bldg
            FROM raw_santa_rosa_bldg_sum as f
            WHERE p.pin2_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # update condo heated sq ft from FDOR 2020 Preliminary table
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            sqft_htd = o.tot_lvg_area
            FROM parcels_fdor_2024 as o
            WHERE p.pin = o.parcel_id and co_no = 67 AND p.sqft_htd is null and p.lusedor = '04' 
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update condo heated sq ft from FDOR 2020 Preliminary table
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            assd_tot = o.av_nsd,
            taxable_tot = o.tv_nsd,
            homestead = o.exmpt_01 + o.exmpt_02
            FROM parcels_fdor_2024 as o
            WHERE p.pin = o.parcel_id and co_no = 67
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # zoning
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            zoning = f.zoning
            FROM raw_santa_rosa_land_camla as f
            WHERE p.pin2_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    #-----------------------------------------------------------------------------------------
    # LOAD NORNALIZED SALES INTO DENORMALIZED SALES TABLE
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_santa_rosa_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,
        
        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_amt,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_grantor,
                sale_grantee,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_santa_rosa_sales_camsa WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_santa_rosa AS interim ON sales_normal.pin = interim.pin2_clean
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_santa_rosa as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        FROM raw_santa_rosa_sales_denormal as denormal
        WHERE interim.pin2_clean = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #-----------------------------------------------------------------------------------------
    # LOAD NORMALIZED LEGAL INTO DENORMALIZED TABLE
    #-----------------------------------------------------------------------------------------    
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_santa_rosa_legal_denormal 
    SELECT 
        legal_normal.pin,
        -- section 1
        MAX(CASE WHEN legal_normal.i = 1 THEN legal_normal.legal ELSE NULL END) AS legal1,

        -- section 2
        MAX(CASE WHEN legal_normal.i = 2 THEN legal_normal.legal ELSE NULL END) AS legal2,

        -- section 3
        MAX(CASE WHEN legal_normal.i = 3 THEN legal_normal.legal ELSE NULL END) AS legal3,
        
        -- section 4
        MAX(CASE WHEN legal_normal.i = 4 THEN legal_normal.legal ELSE NULL END) AS legal4,

        -- section 5
        MAX(CASE WHEN legal_normal.i = 5 THEN legal_normal.legal ELSE NULL END) AS legal5,

        -- section 6
        MAX(CASE WHEN legal_normal.i = 6 THEN legal_normal.legal ELSE NULL END) AS legal6
        
        FROM
            (SELECT 
                pin,
                recnum,
                legal,
                row_number() OVER (PARTITION BY pin ORDER BY recnum asc) AS i
                FROM raw_santa_rosa_legal_camle WHERE legal is not null
            ) AS legal_normal
            INNER JOIN 
                parcels_template_santa_rosa AS interim ON legal_normal.pin = interim.pin2_clean
        GROUP BY legal_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on legal table to bring in legal info
    sql = """UPDATE parcels_template_santa_rosa
            SET
            legal_full = legal.legal_full,  
            legal1 = legal.legal1, 
            legal2 = legal.legal2, 
            legal3 = legal.legal3,
            legal4 = legal.legal4,
            legal5 = legal.legal5,
            legal6 = legal.legal6
            FROM raw_santa_rosa_legal_denormal as legal
            WHERE parcels_template_santa_rosa.pin2_clean = legal.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()
        
        
# =======================================================================================
# SANTA_ROSA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_santa_rosa_FDOR() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/santa_rosa/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN santa_rosa-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/santa_rosa/santa_rosa-convert-sales.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_santa_rosa_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # CERTIFIED
    #sql = "\\copy raw_santa_rosa_bldg from 'parcels_cert_bldg.txt' with delimiter as E'\\t' null as ''"
    #print '\nSQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)     
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            pin_clean = replace(pin,'-','')
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            o_name1 = o.o_name1,
            o_name2 = o.o_name2,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_santa_rosa_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update building info from raw certified file
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            count(*) as num_bldg
        INTO raw_santa_rosa_bldg_sum
        from raw_santa_rosa_bldg as bldg
        group by bldg.pin;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    sql = """
        UPDATE parcels_template_santa_rosa as p SET
            sqft_htd = f.sum_sqft_htd,
            sqft_tot = f.sum_sqft_tot
            FROM raw_santa_rosa_bldg_sum as f
            WHERE p.pin = f.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()     
    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()

    
# =======================================================================================
# SARASOTA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================    
def process_raw_sarasota() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # load property.dbf file for condo key to parcel geometry
    #-----------------------------------------------------------------------------------------
    #mycmd = 'ogr2ogr -select "gispid,id" -f "PostgreSQL" PG:" ' + pg_connection + '" -nln raw_sarasota_property /srv/mapwise_dev/county/sarasota/processing/vector/propapp/current/source_data/property.dbf'
    # 12/27/24 - not used anymore
    #mycmd = 'ogr2ogr -select "gispid,id" -f "PostgreSQL" PG:" ' + pg_connection + '" -nln raw_sarasota_property /srv/mapwise_dev/county/sarasota/processing/vector/propapp/current/source_data/property.csv'
    #os.system(mycmd)
    #print mycmd
    
    #-----------------------------------------------------------------------------------------
    # create condo and subdiv files
    #-----------------------------------------------------------------------------------------
    sql_file = "/srv/mapwise_dev/county/sarasota/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathTopDir,'/current/source_data/PropertyOwnerLegal.txt > ',pathTopDir,'/current/source_data/PropertyOwnerLegal_2.txt'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    #print 'RUN sarasota-property-csv.py'
    mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-property-csv.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN sarasota-land-csv.py'
    mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-land-csv.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN sarasota-buildings-csv.py'
    mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-buildings-csv.py'
    print(mycmd)
    os.system(mycmd)    
    
    #print 'RUN sarasota-sketchedarea-csv.py'
    mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-sketchedarea-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    #print 'RUN sarasota-sales-csv.py'
    mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-sales-csv.py'
    print(mycmd)
    os.system(mycmd)

    #print 'RUN sarasota-values-csv.py'
    mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-values-csv.py'
    print(mycmd)
    os.system(mycmd)    

    #print 'RUN sarasota-sales-current-2016-02-22.py'
    #mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-sales-current-2016-02-22.py'
    #print mycmd
    #os.system(mycmd)
    
    #print 'RUN sarasota-sales-historic.py'
    #mycmd = '/srv/tools/python/parcel_processing/sarasota/sarasota-sales-historic.py'
    #print mycmd
    #os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_sarasota from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #sql = "\\copy raw_sarasota_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_sarasota_sales_csv from 'parcels_sales_csv.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #sql = "\\copy raw_sarasota_sales from 'parcels_sales_historic.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_sarasota_values_csv from 'values_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_sarasota_exemptions_csv from 'source_data/Exemptions.txt' with delimiter ',' CSV HEADER null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_sarasota_bldg_csv from 'building_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_sarasota_sketch_csv from 'sketchedarea_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    sql = "\\copy raw_sarasota_land_csv from 'land_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_sarasota_subdiv from 'source_data/SubdivisionCodes.csv' with CSV HEADER null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE values info
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_sarasota as p SET
            mrkt_tot = f.mrkt_tot,
            mrkt_lnd = f.mrkt_lnd,
            mrkt_bld = f.mrkt_bld,
            mrkt_impr = f.mrkt_impr,
            assd_tot = f.assd_tot,
            taxable_tot = f.taxable_tot
            FROM raw_sarasota_values_csv as f
            WHERE p.pin_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    #-----------------------------------------------------------------------------------------
    # CREATE exemption sum table 
    #-----------------------------------------------------------------------------------------
    sql = """SELECT 
            exempt.pin_clean, 
            sum(val) as val
        INTO raw_sarasota_exemptions_sum
        from raw_sarasota_exemptions_csv as exempt
        group by exempt.pin_clean;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------
    # UPDATE exemption info
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_sarasota as p SET
            exempt_tot = f.val
            FROM raw_sarasota_exemptions_sum as f
            WHERE p.pin_clean = f.pin_clean
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE homestead info
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_sarasota as p SET
            homestead = f.val
            FROM raw_sarasota_exemptions_csv as f
            WHERE p.pin_clean = f.pin_clean and ex_code = 910
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # create building sum table
    sql = """SELECT 
            bldg.pin_clean, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths,
            sum(cast(trunc(cast(bldg.num_bath_half as numeric)) as integer)) as sum_num_baths_half,
            max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_sarasota_bldg_stats
        from raw_sarasota_bldg_csv as bldg
        group by bldg.pin_clean;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_sarasota
            SET
            yrblt_act = bldg.min_yrblt_act,  
            num_bath = bldg.sum_num_baths,
            num_bath_half = bldg.sum_num_baths_half,
            num_bed = bldg.sum_num_beds,
            stories = bldg.max_stories
            FROM raw_sarasota_bldg_stats as bldg
            WHERE parcels_template_sarasota.pin_clean = bldg.pin_clean;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # create sketchedarea sum table
    sql = """SELECT 
            bldg.pin_clean, 
            sum(cast(trunc(cast(bldg.sqft_htd as numeric)) as integer)) as sum_sqft_htd,
            sum(cast(trunc(cast(bldg.sqft_tot as numeric)) as integer)) as sum_sqft_tot
        INTO raw_sarasota_sketch_stats
        FROM raw_sarasota_sketch_csv as bldg WHERE sub_area IN ('LLA','MLA','PRM','ULA','UPR')
        GROUP by bldg.pin_clean;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_sarasota
            SET
            sqft_htd = bldg.sum_sqft_htd,
            sqft_tot = bldg.sum_sqft_tot
            FROM raw_sarasota_sketch_stats as bldg
            WHERE parcels_template_sarasota.pin_clean = bldg.pin_clean;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    
    #-----------------------------------------------------------------------------------------
    # UPDATE subdiv info
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_sarasota as p SET
            subdiv_nm = f.subdiv_nm
            FROM raw_sarasota_subdiv as f
            WHERE p.subdiv_id = f.subdiv_id
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_sarasota_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        Null        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                sale_grantor,
                --sale_grantee,
                sale_docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_sarasota_sales_csv WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_sarasota AS interim ON sales_normal.pin = interim.pin_clean
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_sarasota as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_sarasota_sales_denormal as denormal
        WHERE interim.pin_clean = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()

    #exit()


# =======================================================================================
# seminole COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_seminole() :
    
    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()       
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/seminole/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # Extract CSV files from AccessDB file
    #-----------------------------------------------------------------------------------------
    mycmd = 'rm -r /srv/mapwise_dev/county/seminole/processing/database/current/source_data/SeminoleCountyParcelData.csv'
    print(mycmd)
    os.system(mycmd)

    # I think working directory must be same as command for it to run, unless we can fix CLASSPATH issues(?)
    os.chdir('/home/bmay/src/access2csv')
    #mycmd = ''.join(["sed -e 's:\\\::g' ",pathSourceData,'/vcpa_cama_owner.csv > ',pathSourceData,'/vcpa_cama_owner_2.csv'])
    mycmd = '/home/bmay/src/access2csv/access2csv --input /srv/mapwise_dev/county/seminole/processing/database/current/source_data/SeminoleCountyParcelData.accdb --output /srv/mapwise_dev/county/seminole/processing/database/current/source_data/SeminoleCountyParcelData.csv'
    print('Executing: ', mycmd)
    os.system(mycmd)
    os.chdir(pathProcessing)
    


    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    # OLD?
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/parcel_table1.csv > ',pathProcessing,'/source_data/parceltable1a.csv'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)


    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN seminole-sales-current.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-sales-current.py'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    print('RUN seminole-parcel-current.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-parcel-current.py'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    print('RUN seminole-legal-current.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-legal-current.py'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    print('RUN seminole-building.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-building.py'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    print('RUN seminole-land.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-land.py'
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    # The FDOR data goes into the main parcels_template_seminole 
    sql = "\\copy parcels_template_seminole from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)

    sql = "\\copy raw_seminole_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_seminole_legal from 'legal_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_seminole_building from 'bldg_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_seminole_land from 'land_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_seminole_luse from 'source_data/SeminoleCountyParcelData.csv/REALESTATE_DOR.csv' CSV  null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #exit()


    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as min_yrblt_eff,            
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
            --max(cast(trunc(cast(bldg.stories as numeric)) as integer)) as max_stories
        INTO raw_seminole_bldg_stats
        from raw_seminole_building as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------    
    # join on building table to bring in building info
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_seminole
            SET
            yrblt_act = bldg.min_yrblt_act,  
            yrblt_eff = bldg.min_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            --stories = bldg.max_stories
            FROM raw_seminole_bldg_stats as bldg
            WHERE parcels_template_seminole.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    
    # update luse_d from LUT
    sql = """UPDATE parcels_template_seminole as interim
        SET 
        luse = luse.dor,
        lusedor = substring(luse.dor,1,2)
        FROM raw_seminole_luse as luse
        WHERE interim.luse_d = luse.descr;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    #-----------------------------------------------------------------------------------------
    # UPDATE legal and zoning
    #-----------------------------------------------------------------------------------------
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_seminole
            SET
            legal_full = legal.legal,
            legal1 = substring(legal.legal FROM 1 FOR 255),
            legal2 = substring(legal.legal FROM 256 FOR 255),
            legal3 = substring(legal.legal FROM 511 FOR 255),
            legal4 = substring(legal.legal FROM 766 FOR 255),
            legal5 = substring(legal.legal FROM 1021 FOR 255),
            legal6 = substring(legal.legal FROM 1276 FOR 255)
            FROM raw_seminole_legal as legal
            WHERE parcels_template_seminole.pin = legal.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #exit()
    
    # update luse_d from LUT
    sql = """UPDATE parcels_template_seminole as interim
        SET 
        luse_d = luse.luse_desc
        FROM codes_luse_four_digit as luse
        WHERE interim.luse = luse.luse and county = 'SEMINOLE';
    """
    print(sql)
    #cursor.execute(sql)
    #connection.commit()
    
    
    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_seminole_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        Null,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        Null,
        Null
        
        FROM
            (SELECT 
                pin,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_seminole_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_seminole AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_seminole as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        
        FROM raw_seminole_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()

    
# =======================================================================================
# seminole COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_seminole_OLD() :
    
    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()       
    
    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/seminole/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parcel_table1.csv'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parcel_table1.csv /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parceltable1.dbf'
    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parcel_table1.csv /srv/mapwise_dev/county/seminole/processing/vector/propapp/current/source_data/Parcels.gdb ParcelTable1'
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = 'rm /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parcel_table2.csv'
    print('Executing: ', mycmd)
    os.system(mycmd)

    # 5/2016 - PA changed legal fields, now legal has carraige returns (could be handled with line-feeds) so lets not even capture that field    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parcel_table2.csv /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parceltable2.dbf'
    mycmd = 'ogr2ogr -select "PARCEL,SALE_CODE,SALE_DATE,SALE_AMT,VAC_IMP,QUALIFICATION_CODE" -f "CSV" /srv/mapwise_dev/county/seminole/processing/database/current/source_data/parcel_table2.csv /srv/mapwise_dev/county/seminole/processing/vector/propapp/current/source_data/Parcels.gdb ParcelTable2'
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/parcel_table1.csv > ',pathProcessing,'/source_data/parceltable1a.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # convert any backslashes to forward slashes
    #-----------------------------------------------------------------------------------------
    mycmd = ''.join(["sed -e 's:\\\:/:g' ",pathProcessing,'/source_data/parcel_table2.csv > ',pathProcessing,'/source_data/parceltable2a.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN seminole-parcels1-current.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-parcels1-current.py'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    print('RUN seminole-parcels2-current.py')
    mycmd = '/srv/tools/python/parcel_processing/seminole/seminole-parcels2-current.py'
    print('Executing: ', mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    # The FDOR data goes into the main parcels_template_seminole 
    sql = "\\copy parcels_template_seminole2 from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy raw_seminole_sales from 'parcels_new2.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #-----------------------------------------------------------------------------------------
    # copy over info from parcels_template_<county>2
    #-----------------------------------------------------------------------------------------
    # fdor data in seminole does not have homeowners associations
    sql = """UPDATE parcels_template_seminole
            SET
            o_name1 = raw.o_name1,
            o_name2 = raw.o_name2,
            o_name3 = raw.o_name3, 
            o_address1 = raw.o_address1,
            o_address2 = '',
            o_address3 = '',
            o_city = raw.o_city,
            o_state = raw.o_state,
            name_misc = raw.name_misc
            FROM parcels_template_seminole2 as raw
            WHERE parcels_template_seminole.pin = raw.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # update luse_d from LUT
    sql = """UPDATE parcels_template_seminole as interim
        SET 
        luse_d = luse.luse_desc
        FROM codes_luse_four_digit as luse
        WHERE interim.luse = luse.luse and county = 'SEMINOLE';
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()
    
    
# =======================================================================================
# ST JOHNS COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================    
def process_raw_st_johns() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # create condo and subdiv files
    #-----------------------------------------------------------------------------------------
    sql_file = "/srv/mapwise_dev/county/st_johns/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    #mycmd = 'c:\\ms4w31b1\\setenv.bat'
    #print mycmd
    #os.system(mycmd)
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/salesview.csv'
    print(mycmd)
    os.system(mycmd)

    mycmd = 'rm /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/bldview.csv'
    print(mycmd)
    os.system(mycmd)

    mycmd = 'rm /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/siteview.csv'
    print(mycmd)
    os.system(mycmd)

    mycmd = 'rm /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/parcelview.csv'
    print(mycmd)
    os.system(mycmd)

    #-------------------------------------    
    # /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/salesview.csv 
    mycmd = 'java -jar /srv/tools/ajack-1.0.0.jar -o -f POSTGRES_CSV -t salesview -d /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/export /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMADataSup.mdb'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = 'java -jar /srv/tools/ajack-1.0.0.jar -o -f POSTGRES_CSV -t bldview -d /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/export /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMADataSup.mdb'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = 'java -jar /srv/tools/ajack-1.0.0.jar -o -f POSTGRES_CSV -t siteview -d /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/export /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMAData.mdb'
    print(mycmd)
    os.system(mycmd)
    
    mycmd = 'java -jar /srv/tools/ajack-1.0.0.jar -o -f POSTGRES_CSV -t parcelview -d /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/export /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMAData.mdb'
    print(mycmd)
    os.system(mycmd)
    
    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/salesview.csv /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMADataSup.mdb salesview'
    #print mycmd
    #os.system(mycmd)

    #mycmd = """ogr2ogr -f "CSV" -select "strap,num,impr_tp,dscr,impr_mdl_cd,mdl_dscr,qa_cd,qa_dscr,act,eff,act_ar,heat_ar,eff_ar,perimeter,ms_val,ms_r_con_val,tot_dpr,nh_adj,tot_idx_adj,ms_adj_base_prc,tot_sf_adj,tot_ut_adj,ms_base_rate" /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/bldview.csv /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMADataSup.mdb bldview"""
    #print mycmd
    #os.system(mycmd)

    #mycmd = """ogr2ogr -f "CSV" /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/siteview.csv /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMAData.mdb siteview"""
    #print mycmd
    #os.system(mycmd)

    #mycmd = """ogr2ogr -f "CSV" /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/parcelview.csv /srv/mapwise_dev/county/st_johns/processing/database/current/source_data/CAMAData.mdb parcelview"""
    #print mycmd
    #os.system(mycmd)      
       
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN st_johns-convert-ParcelView.py')
    mycmd = '/srv/tools/python/parcel_processing/st_johns/st_johns-convert-ParcelView.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_johns-convert-BldView.py')
    mycmd = '/srv/tools/python/parcel_processing/st_johns/st_johns-convert-BldView.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_johns-convert-SiteView.py')
    mycmd = '/srv/tools/python/parcel_processing/st_johns/st_johns-convert-SiteView.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_johns-convert-SalesView.py')
    mycmd = '/srv/tools/python/parcel_processing/st_johns/st_johns-convert-SalesView.py'
    os.system(mycmd)
    print(mycmd)    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_st_johns from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_st_johns_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_st_johns_bldg from 'parcels_bldg.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_st_johns_situs from 'parcels_situs.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)   

    #exit()
    
    # create building sum table
    sql = """SELECT 
            bldg.pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot
        INTO raw_st_johns_bldg_stats
        from raw_st_johns_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_st_johns
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot
            FROM raw_st_johns_bldg_stats as bldg
            WHERE parcels_template_st_johns.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE situs info
    #-----------------------------------------------------------------------------------------
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_st_johns
            SET
            s_number = situs.s_number,
            s_pdir = situs.s_pdir,
            s_name = situs.s_name,
            s_type = situs.s_type,
            s_sdir = situs.s_sdir,
            s_unit = situs.s_unit,
            s_address = situs.s_address,
            s_city = situs.s_city,
            s_zipcode = situs.s_zipcode,
            s_zipcode4 = situs.s_zipcode4
            FROM raw_st_johns_situs as situs
            WHERE parcels_template_st_johns.pin = situs.pin ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_st_johns_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.vacant ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.qual_code ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.vacant ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.qual_code ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.vacant ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.qual_code ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.vacant ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.instrument ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.qual_code ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.book ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.page ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.vacant ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.instrument ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.qual_code ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.book ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.page ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                vacant,
                instrument,
                qual_code,
                book,
                page,
                --multi,
                grantor,
                grantee,
                docnum,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_st_johns_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_st_johns AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_st_johns as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        
        FROM raw_st_johns_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()


    #exit()

# =======================================================================================
# ST LUCIE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================    
def process_raw_st_lucie() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # create raw tables
    #-----------------------------------------------------------------------------------------
    sql_file = "/srv/mapwise_dev/county/st_lucie/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #----------------------------------------------------------------------------------------- 
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/PropertyOwnership.csv > ',pathSourceData,'/PropertyOwnership_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' < ",pathSourceData,'/LegalDescription.csv > ',pathSourceData,'/LegalDescription_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN st_lucie-assessment.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-assessment.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-building-basic.py')
    # input: BuildingBasics.csv
    # output: parcels_building.txt
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-building-basic.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-identification.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-identification.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-land.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-land.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-convert-legal.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-legal.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-convert-owners.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-owners.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-convert-prop-idx.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-prop-idx.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-convert-situs.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-situs.py'
    os.system(mycmd)
    print(mycmd)

    print('RUN st_lucie-convert-transactions.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st_lucie-transactions.py'
    os.system(mycmd)
    print(mycmd)    

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    # assessment
    sql = "\\copy raw_st_lucie_parcels_values from 'parcels_values.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # building-basic
    sql = "\\copy raw_st_lucie_parcels_bldg from 'parcels_building.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # identification
    sql = "\\copy parcels_template_st_lucie from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # land
    sql = "\\copy raw_st_lucie_parcels_land from 'parcels_land.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # legal
    sql = "\\copy raw_st_lucie_parcels_legal from 'parcels_legal.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # owners
    sql = "\\copy raw_st_lucie_parcels_owner from 'parcels_owner.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # prop-idx
    sql = "\\copy raw_st_lucie_parcels_index from 'parcels_index.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # situs
    sql = "\\copy raw_st_lucie_parcels_situs from 'parcels_situs.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # transactions
    sql = "\\copy raw_st_lucie_parcels_sales from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)


    #exit()
    
    # create building sum table
    sql = """SELECT 
            bldg.altkey, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as max_yrblt_eff, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot
        INTO raw_st_lucie_parcels_bldg_summary
        from raw_st_lucie_parcels_bldg as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_st_lucie
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.max_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot
            FROM raw_st_lucie_parcels_bldg_summary as bldg
            WHERE parcels_template_st_lucie.altkey = bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # UPDATE situs info
    #-----------------------------------------------------------------------------------------
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_st_lucie
            SET
            o_name1 = owner.o_name1,
            o_name2 = owner.o_name2,
            o_address1 = owner.o_address1,
            o_address2 = owner.o_address2,
            o_city = owner.o_city,
            o_state = owner.o_state,
            o_zipcode = owner.o_zipcode
            FROM raw_st_lucie_parcels_owner as owner
            WHERE parcels_template_st_lucie.altkey = owner.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # UPDATE situs info
    #-----------------------------------------------------------------------------------------
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_st_lucie
            SET
            s_number = situs.s_number,
            s_pdir = situs.s_pdir,
            s_name = situs.s_name,
            s_type = situs.s_type,
            s_sdir = situs.s_sdir,
            s_unit = situs.s_unit,
            s_address = situs.s_address,
            s_city = situs.s_city,
            s_zipcode = situs.s_zipcode,
            s_zipcode4 = situs.s_zipcode4
            FROM raw_st_lucie_parcels_situs as situs
            WHERE parcels_template_st_lucie.altkey = situs.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # UPDATE legal and zoning
    #-----------------------------------------------------------------------------------------
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_st_lucie
            SET
            legal_full = legal.legal,
            legal1 = substring(legal.legal FROM 1 FOR 255),
            legal2 = substring(legal.legal FROM 256 FOR 255),
            legal3 = substring(legal.legal FROM 511 FOR 255),
            legal4 = substring(legal.legal FROM 766 FOR 255),
            legal5 = substring(legal.legal FROM 1021 FOR 255),
            legal6 = substring(legal.legal FROM 1276 FOR 255),
            zoning = legal.d_date
            FROM raw_st_lucie_parcels_legal as legal
            WHERE parcels_template_st_lucie.altkey = legal.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # UPDATE values
    #-----------------------------------------------------------------------------------------
    # join on situs table to bring in situs info
    sql = """UPDATE parcels_template_st_lucie
            SET
            mrkt_bld = values.mrkt_bld,
            mrkt_impr = values.mrkt_impr,
            mrkt_lnd = values.mrkt_lnd,
            mrkt_ag = values.mrkt_ag,
            mrkt_tot = values.mrkt_tot,
            assd_tot = values.assd_tot,
            taxable_tot = values.taxable_tot
            FROM raw_st_lucie_parcels_values as values
            WHERE parcels_template_st_lucie.altkey = values.altkey ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
 

    #-----------------------------------------------------------------------------------------
    # load normalized sales data into denormal table
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_st_lucie_parcels_sales_denormal 
    SELECT 
        Null,
        Null,
        sales_normal.altkey,
        Null,
        Null,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                --multi,
                sale_grantor,
                sale_grantee,
                sale_docnum,
                --row_number() OVER (PARTITION BY altkey ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_st_lucie_parcels_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_st_lucie AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------    
    # bring denormalized sales info into parcels_template
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_st_lucie as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        --sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        --sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        --sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        --sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        
        FROM raw_st_lucie_parcels_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
    
# =======================================================================================
# ST_LUCIE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_st_lucie_FDOR_OLD() :

    # potential scraping notes
    # http://ira.property-appraiser.org/PropertySearch/ajax/ParcelSearch.aspx?ParcelID=012628397100010120&SubdivisionCode=&StreetName=&SaleType=&SalePriceLow=&SalePriceHigh=&SaleDateLow=&SaleDateHigh=&YearBuiltLow=&YearBuiltHigh=&BuildingValueLow=&BuildingValueHigh=&HeatedSqFtLow=&HeatedSqFtHigh=&ActualSqFtLow=&ActualSqFtHigh=&Bedrooms=&LandValueLow=&LandValueHigh=&AcreageValueLow=&AcreageValueHigh=&LandUseCode=&TaxDistrictCode=&orderByColumnIndex=0&page=&returncount=true&advanced=true
    # returns html record
    # an arcgis server is spitting out the info
    # http://ira.property-appraiser.org/arcgis/rest/services/AGS_TaxMap/MapServer/0 - has a lot of fields

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/st_lucie/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)


    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN st-lucie-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/st_lucie/st-lucie-sales.py'
    os.system(mycmd)
    print(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    # CHANGE THIS EVERY YEAR AT CERTIFIED TIME?
    # SaleDate	Price	V/I	Qual	OR	Book	Page	Name	Street#	StreetName	City	ZIP	PIN	Sec	Twp	Rng	Use	AssdValue	TaxValue
    # where did fdor sales leave off for 2012 certified? FDOR has 208 out 604 9/2012 sales, so get 9/2012 to current

    # PROBLEM: web download does not produce proper CSV files or proper delimited text files
    # e.g. the s_address field sometimes contains s_address, s_city ( and sometimes has unit thrown in also delimited w/ comma
    # SOLUTION: Somehow, excel is able to deal with this. So, download excel version, then export that to tab-delimited
    #sql = "\\copy raw_st_lucie_sales_export from 'sales_new_2012-09-01_2012-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    sql = "\\copy raw_st_lucie_sales_export from 'sales_new_YTD.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # sales are already in yyyy-mm-dd format
    

    # updates to sales data handling is done in parcels_raw_fdor

    # NOTE: NEED to get o_address...
    # PIN	Name	Address1	Address2	City	State	ZIP
    #sql = "\\copy raw_st_lucie_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2012-09-01_2012-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    # Connect to postgres and open cursor
    #connection = psycopg2.connect(pg_connection)
    #cursor = connection.cursor()
    

    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_st_lucie as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_st_lucie_sales_export as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # join on luse 4-digit table to bring in code descriptions
    sql = """UPDATE parcels_template_st_lucie
            SET
            luse_d = luse.luse_desc
            FROM codes_luse_four_digit as luse
            WHERE parcels_template_st_lucie.luse = luse.luse and county = 'ST_LUCIE';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

    # remove temp files
    mycmd = ''.join(['rm ',pathProcessing,'/source_data/LegalDescription_2.csv'])
    os.system(mycmd)

    mycmd = ''.join(['rm ',pathProcessing,'/source_data/PropertyOwnership_2.csv'])
    os.system(mycmd)


# =======================================================================================
# SUMTER COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_sumter() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/sumter/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    #mycmd = 'rm -r /srv/mapwise_dev/county/sumter/processing/database/current/source_data/parcels.csv'
    #print mycmd
    #os.system(mycmd)
    
    
    #mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/sumter/processing/database/current/source_data/parcels.csv /srv/mapwise_dev/county/sumter/processing/vector/propapp/current/source_data/Parcels.dbf'
    #print mycmd
    #os.system(mycmd)
    
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    # 1/2023 - not using raw parcel data anymore - not many attributes, etc
    #print 'RUN sumter-parcels-current.py'
    #mycmd = '/srv/tools/python/parcel_processing/sumter/sumter-parcels-current.py'
    #print mycmd
    #os.system(mycmd)
    
    # 9/2023 - nsumter switched to schneider
    print('RUN sumter-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/sumter/sumter-convert-sales-csv.py'
    print(mycmd)
    os.system(mycmd)
    
    print('RUN sumter-convert-building-area.py')
    mycmd = '/srv/tools/python/parcel_processing/sumter/sumter-convert-building-area.py'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    # 11/17/2022 - raw parcel shp data not being utilized
    #   they took data download option away from website, although AGS available
    #sql = "\\copy raw_sumter_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_sumter_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()


    sql = "\\copy raw_sumter_bldg from 'buildings_area.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    
    
    # load raw data from parcels shapefile DBF
    sql = "\\copy parcels_template2_sumter from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)
    
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_sumter as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_sumter_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    
    # owner name, address, site_address, luse_d, etc from parcels shp version
    # may need to override owner info from sales file
    # s_address in parcels shp is all one field, including city, state, zip
    sql = """
        UPDATE parcels_template_sumter as p SET
            o_name1 = f.o_name1,
            o_address1 = f.o_address1,
            o_address2 = null, -- fdor has most o_address1's here
            o_city = f.o_city,
            o_state = f.o_state,
            o_zipcode = f.o_zipcode,
            o_country = f.o_country,
            subdiv_id = f.subdiv_id,
            --subdiv_id2 = f.subdiv_id2,
            subdiv_nm = f.subdiv_nm,
            luse = f.luse, -- not sure why but many luse codes in fdor version are wrong, eg select * from parcels_fdor_2024 where co_no = 45 and alt_key = '2515953'
            luse_d = f.luse_d,
            lusedor = f.lusedor,
            yrblt_act = f.yrblt_act,
            yrblt_eff = f.yrblt_eff,
            s_address = f.s_address,
            s_city = f.s_city,
            s_zipcode = f.s_zipcode
            FROM parcels_template2_sumter as f
            WHERE p.pin = f.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()  

    #-----------------------------------------------------------------------------------------
    # update owner names - SCHNIEDER
    #-----------------------------------------------------------------------------------------
    # Clear out owner names where we have new sales records.
    sql = """
        UPDATE parcels_template_sumter as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_sumter_sales_owner_export as o
            WHERE p.pin = o.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update owner names - GRIZZLY
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales export, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_sumter as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_sumter_sales_owner_export as o
            WHERE p.pin = o.pin
    ;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    # there can be multiple records for an individual building
    # however, there should be only one BAS code for each building
    # the heated sq ft value is supposedly just BAS
    # so we should be able to just sum values on BAS per pin to get total sqft htd
    # and then sum all sqft values to get total sqft
    # so for now there will be two tables to hold the results of the sum
    
    # create building area normalized table
    sql = """
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code1, sqft1 from raw_sumter_bldg where code1 is not null and status is null group by pin, bldg, recno, code1, sqft1;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code2, sqft2 from raw_sumter_bldg where code2 is not null and status is null group by pin, bldg, recno, code2, sqft2;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code3, sqft3 from raw_sumter_bldg where code3 is not null and status is null group by pin, bldg, recno, code3, sqft3;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code4, sqft4 from raw_sumter_bldg where code4 is not null and status is null group by pin, bldg, recno, code4, sqft4;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code5, sqft5 from raw_sumter_bldg where code5 is not null and status is null group by pin, bldg, recno, code5, sqft5;

            """
    print(sql)
    cursor.execute(sql)
    connection.commit()
 

    # create building sum table 1
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft as integer)) as sum_sqft_htd
        INTO raw_sumter_bldg_stats1
        from raw_sumter_bldg_normal as bldg WHERE code = 'BAS'
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table 2
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft as integer)) as sum_sqft_tot
        INTO raw_sumter_bldg_stats2
        from raw_sumter_bldg_normal as bldg 
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_sumter
            SET 
            sqft_htd = bldg.sum_sqft_htd
            FROM raw_sumter_bldg_stats1 as bldg
            WHERE parcels_template_sumter.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on building table to bring in building info
    sql = """UPDATE parcels_template_sumter
            SET 
            sqft_tot = bldg.sum_sqft_tot
            FROM raw_sumter_bldg_stats2 as bldg
            WHERE parcels_template_sumter.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     



        
    # close communication with the database
    cursor.close()
    connection.close()


    #exit()

# =======================================================================================
# SUMTER COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_sumter_OLD() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------
    print('RUN sumter-convert-current.py')
    mycmd = '/srv/tools/python/parcel_processing/sumter/sumter-convert-building-area.py'
    print(mycmd)
    os.system(mycmd)
    
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/sumter/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    #sql = "\\copy raw_sumter_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_sumter_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_sumter_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_sumter_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_sumter_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    

    # updates to sales data handling is done in parcels_raw_fdor

    # PIN	Name	Address1	Address2	City	State	ZIP
    #sql = "\\copy raw_sumter_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    sql = "\\copy raw_sumter_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_sumter_bldg from 'buildings_area.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales excport, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_sumter as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_sumter_sales_owner_export as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # there can be multiple records for an individual building
    # however, there should be only one BAS code for each building
    # the heated sq ft value is supposedly just BAS
    # so we should be able to just sum values on BAS per pin to get total sqft htd
    # and then sum all sqft values to get total sqft
    # so for now there will be two tables to hold the results of the sum
    
    # create building area normalized table
    sql = """
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code1, sqft1 from raw_sumter_bldg where code1 is not null and status is null group by pin, bldg, recno, code1, sqft1;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code2, sqft2 from raw_sumter_bldg where code2 is not null and status is null group by pin, bldg, recno, code2, sqft2;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code3, sqft3 from raw_sumter_bldg where code3 is not null and status is null group by pin, bldg, recno, code3, sqft3;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code4, sqft4 from raw_sumter_bldg where code4 is not null and status is null group by pin, bldg, recno, code4, sqft4;
        insert into raw_sumter_bldg_normal (pin, bldg, code, sqft) select pin, bldg, code5, sqft5 from raw_sumter_bldg where code5 is not null and status is null group by pin, bldg, recno, code5, sqft5;

            """
    print(sql)
    cursor.execute(sql)
    connection.commit()
 

    # create building sum table 1
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft as integer)) as sum_sqft_htd
        INTO raw_sumter_bldg_stats1
        from raw_sumter_bldg_normal as bldg WHERE code = 'BAS'
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table 2
    sql = """SELECT 
            bldg.pin, 
            sum(cast(bldg.sqft as integer)) as sum_sqft_tot
        INTO raw_sumter_bldg_stats2
        from raw_sumter_bldg_normal as bldg 
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_sumter
            SET 
            sqft_htd = bldg.sum_sqft_htd
            FROM raw_sumter_bldg_stats1 as bldg
            WHERE parcels_template_sumter.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # join on building table to bring in building info
    sql = """UPDATE parcels_template_sumter
            SET 
            sqft_tot = bldg.sum_sqft_tot
            FROM raw_sumter_bldg_stats2 as bldg
            WHERE parcels_template_sumter.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# SUWANNEE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_suwannee() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()


    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/suwannee/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------

    # CHANGE THIS EVERY YEAR AT CERTIFIED TIME?
    # SaleDate	Price	V/I	Qual	OR	Book	Page	Name	Street#	StreetName	City	ZIP	PIN	Sec	Twp	Rng	Use	AssdValue	TaxValue
    # where did fdor sales leave off for 2012 certified? FDOR has 208 out 604 9/2012 sales, so get 9/2012 to current
    
    #sql = "\\copy raw_suwannee_sales_export from 'source_data/sales_dnld_2013-09-01_2013-12-31.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)

    # Each time you want to add sales for the current year, make a run and add/replace as necessary
    # for example, include previous month to make sure you've got all of the sales, and replace existing previous month
    sql = "\\copy raw_suwannee_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_suwannee_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_suwannee_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_suwannee_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    sql = "\\copy raw_suwannee_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names and mailing addresses are included in the sales export
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    #
    # !!!! UPDATE ME FOR new fdor files in 2013 !!!
    
    sql = """
        UPDATE parcels_template_suwannee as p SET
            --o_name1 = o.o_name1,
            --o_name2 = o.o_name2,
            --o_name3 = o.o_name3,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_suwannee_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1 
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 3/2017 - no need to do this now
    # split out o_city, o_state, o_zipcode
    #sql = """
    #    UPDATE parcels_template_suwannee as p SET
    #        o_city = trim(substring(o_address2 from 1 for 20)),
    #        o_state = substring(o_address2 from 21 for 2),
    #        o_zipcode = substring(o_address2 from 24 for 5)
    #        WHERE o_city = '' and o_state = ''
    #;"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()
    
    # exit()
    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# TAYLOR COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_taylor() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/taylor/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN taylor-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/taylor/taylor-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_taylor_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)



    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in Taylor sakes download

    sql = """
        UPDATE parcels_template_taylor as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_taylor_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

 
    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# UNION COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_union() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/union/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    
    sql = "\\copy raw_union_sales_export from 'source_data/sales_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # make sure the sales are in yyyy-mm-dd format
    
    sql = """
        UPDATE raw_union_sales_export SET sale1_date = split_part(sale1_date, '/', 3) || '-' || split_part(sale1_date, '/', 1) || '-' || split_part(sale1_date, '/', 2);
        
        UPDATE raw_union_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-0' || split_part(sale1_date, '-', 2) || '-' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 2)) = 1;

        UPDATE raw_union_sales_export SET sale1_date = split_part(sale1_date, '-', 1) || '-' || split_part(sale1_date, '-', 2) || '-0' || split_part(sale1_date, '-', 3)
            WHERE length(split_part(sale1_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_union_sales_export SET sale2_date = split_part(sale2_date, '/', 3) || '-' || split_part(sale2_date, '/', 1) || '-' || split_part(sale2_date, '/', 2);
        
        UPDATE raw_union_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-0' || split_part(sale2_date, '-', 2) || '-' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 2)) = 1;

        UPDATE raw_union_sales_export SET sale2_date = split_part(sale2_date, '-', 1) || '-' || split_part(sale2_date, '-', 2) || '-0' || split_part(sale2_date, '-', 3)
            WHERE length(split_part(sale2_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """
        UPDATE raw_union_sales_export SET sale3_date = split_part(sale3_date, '/', 3) || '-' || split_part(sale3_date, '/', 1) || '-' || split_part(sale3_date, '/', 2);
        
        UPDATE raw_union_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-0' || split_part(sale3_date, '-', 2) || '-' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 2)) = 1;

        UPDATE raw_union_sales_export SET sale3_date = split_part(sale3_date, '-', 1) || '-' || split_part(sale3_date, '-', 2) || '-0' || split_part(sale3_date, '-', 3)
            WHERE length(split_part(sale3_date, '-', 3)) = 1;        
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    # PIN	Name	Address1	Address2	City	State	ZIP

    sql = "\\copy raw_union_sales_owner_export from 'source_data/sales_owner_mailing_dnld_2014-01-01_current.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update sale info
    #-----------------------------------------------------------------------------------------
    # bring denormalized sales info into parcels_template
    # 2/28/2023 - QUESTION: THIS IS JUST REPLACING WHAT IS THERE - SHOULDN'T WE BE DENPORMIZING AND ADDING THIS TO THE 
    # denomalized table used in FDOR processing?
    sql = """UPDATE parcels_template_union as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = CAST(split_part(denormal.sale1_date, '-', 1) as int),
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        --sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        --sale1_docnum = denormal.sale1_docnum,
        --sale1_grantor = denormal.sale1_grantor,
        --sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = CAST(split_part(denormal.sale2_date, '-', 1) as int),
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        --sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        --sale2_docnum = denormal.sale2_docnum,
        --sale2_grantor = denormal.sale2_grantor,
        --sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = CAST(split_part(denormal.sale3_date, '-', 1) as int),
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        --sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        --sale3_docnum = denormal.sale3_docnum,
        --sale3_grantor = denormal.sale3_grantor,
        --sale3_grantee = denormal.sale3_grantee,
        o_name1 = denormal.o_name1
        FROM raw_union_sales_export as denormal
        WHERE interim.pin_clean = replace(denormal.pin, '-','');""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()    

    
    #-----------------------------------------------------------------------------------------
    # update owner names
    #-----------------------------------------------------------------------------------------
    # owner names are included in the sales excport, but not the mailing address
    # we need to do a separate mailing export to get it
    # only need updated owner info for sales that happen after the certified FDOR data
    # so if last updates are in 9/2012, get 9/2012 and later owners
    # can do one file one time for the remainder of 2012, and then 2013_current for the rest
    # PIN	Name	Address1	Address2	City	State	ZIP
    sql = """
        UPDATE parcels_template_union as p SET
            o_name1 = o.o_name1,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            --o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode
            FROM raw_union_sales_owner_export as o
            WHERE p.o_name1 = o.o_name1
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()




# =======================================================================================
# VOLUSIA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_volusia() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/volusia/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)  

    #-----------------------------------------------------------------------------------------
    # Extract CSV files from AccessDB file
    #-----------------------------------------------------------------------------------------
    mycmd = 'rm -r /srv/mapwise_dev/county/volusia/processing/database/current/source_data/CAMA_DATA_EXPORT_WEB.csv'
    print(mycmd)
    os.system(mycmd)

    # I think working directory must be same as command for it to run, unless we can fix CLASSPATH issues(?)
    os.chdir('/home/bmay/src/access2csv')
    #mycmd = ''.join(["sed -e 's:\\\::g' ",pathSourceData,'/vcpa_cama_owner.csv > ',pathSourceData,'/vcpa_cama_owner_2.csv'])
    mycmd = '/home/bmay/src/access2csv/access2csv --input /srv/mapwise_dev/county/volusia/processing/database/current/source_data/CAMA_DATA_EXPORT_WEB.accdb --output /srv/mapwise_dev/county/volusia/processing/database/current/source_data/CAMA_DATA_EXPORT_WEB.csv'
    print('Executing: ', mycmd)
    os.system(mycmd)
    os.chdir(pathProcessing)
    

        
    #-----------------------------------------------------------------------------------------
    # ASCII CLEANSING
    #----------------------------------------------------------------------------------------- 
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_LEGAL.csv > ',pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_LEGAL_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_PARCEL.csv > ',pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_PARCEL_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # convert any backslashes to empty text
    mycmd = ''.join(["sed -e 's:\\\::g' ",pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_OWNER.csv > ',pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_OWNER_2.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # HANDLE 1 error!
    # this isn't working - WHY???
    mycmd = ''.join(["sed -e 's:ORMOND \\n:ORMOND :g' ",pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_OWNER_2.csv > ',pathSourceData,'/CAMA_DATA_EXPORT_WEB.csv/VCPA_CAMA_OWNER_3.csv'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN volusia-parcel-current.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-parcel-current.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-sales-current.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-sales-current.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-legal-current.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-legal-current.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-owner-current.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-owner-current.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-situs-current.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-situs-current.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-building-comm-bldg.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-building-comm-bldg.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-building-condo-bldg.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-building-condo-bldg.py'
    print(mycmd)
    os.system(mycmd)   

    print('RUN volusia-building-res-bldg.py')
    mycmd = '/srv/tools/python/parcel_processing/volusia/volusia-building-res-bldg.py'
    print(mycmd)
    os.system(mycmd)   

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_volusia from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_sales from 'sale_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_legal from 'legal_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_owner from 'owner_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_situs from 'situs_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_res_bldg from 'res_bldg_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_comm_bldg from 'comm_bldg_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_volusia_condo_bldg from 'condo_bldg_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #exit()

    # Building data is complex in many tables - just get it from FDOR for now

    # create building sum table
    sql = """INSERT INTO raw_volusia_bldg_stats
        (altkey, min_yrblt_act, min_yrblt_eff, sum_sqft_htd,sum_sqft_tot, sum_num_beds)
        SELECT 
            bldg.altkey, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as min_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds
        from raw_volusia_res_bldg as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table
    sql = """INSERT INTO raw_volusia_bldg_stats
            (altkey, min_yrblt_act, min_yrblt_eff, sum_sqft_htd, sum_sqft_tot)
            SELECT
            bldg.altkey, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            max(cast(bldg.yrblt_eff as integer)) as min_yrblt_eff,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot
        from raw_volusia_comm_bldg as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # create building sum table
    sql = """INSERT INTO raw_volusia_bldg_stats
        (altkey, min_yrblt_act, sum_sqft_htd, sum_num_beds, sum_num_baths)
        SELECT 
            bldg.altkey, 
            min(cast(bldg.yrblt_act as integer)) as min_yrblt_act,
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        from raw_volusia_condo_bldg as bldg
        group by bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_volusia
            SET
            yrblt_act = bldg.min_yrblt_act,
            yrblt_eff = bldg.min_yrblt_eff,
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_volusia_bldg_stats as bldg
            WHERE parcels_template_volusia.altkey = bldg.altkey;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # add building info from FDOR data
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_volusia as p SET
            --yrblt_eff = f.eff_yr_blt,
            --yrblt_act = f.act_yr_blt,
            --sqft_htd = f.tot_lvg_area,
            mrkt_tot = f.jv,
            mrkt_lnd = f.lnd_val,
            mrkt_ag = f.jv_class_use,
            mrkt_impr = f.spec_feat_val,
            assd_tot = f.av_nsd,
            taxable_tot = f.tv_nsd
            -- this isnt working
            --homestead = f.(COALESCE(exmpt_01,0) + COALESCE(exmpt_02,0))
            FROM parcels_fdor_2024 as f
            WHERE co_no = 74 and p.altkey = f.alt_key
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit() 
            
    #-----------------------------------------------------------------------------------------
    # COPY LEGAL vals into parcels_template_volusia
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_volusia as interim
        SET 
        legal_full = denormal.legal_full,
        legal1 = denormal.legal1,
        legal2 = denormal.legal2,
        legal3 = denormal.legal3,
        legal4 = denormal.legal4,
        legal5 = denormal.legal5,
        legal6 = denormal.legal6
        FROM raw_volusia_legal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    #-----------------------------------------------------------------------------------------
    # COPY OWNER vals into parcels_template_volusia
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_volusia as interim
        SET 
        name_misc = denormal.name_misc,
        owner_occupied = denormal.owner_occupied,
        foreign_owner = denormal.foreign_owner,
        o_name1 = denormal.o_name1,
        o_name2 = denormal.o_name2,
        o_name3 = denormal.o_name3,
        o_address1 = denormal.o_address1,
        o_address2 = denormal.o_address2,
        o_address3 = denormal.o_address3,
        o_city = denormal.o_city,
        o_state = denormal.o_state,
        o_country = denormal.o_country,
        o_zipcode = denormal.o_zipcode,
        o_zipcode4 = denormal.o_zipcode4
        
        FROM raw_volusia_owner as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    #-----------------------------------------------------------------------------------------
    # COPY SITUS vals into parcels_template_volusia
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_volusia as interim
        SET 
        s_number = denormal.s_number,
        s_pdir = denormal.s_pdir,
        s_name = denormal.s_name,
        s_type = denormal.s_type,
        s_sdir = denormal.s_sdir,
        s_unit = denormal.s_unit,
        s_address = denormal.s_address,
        s_city = denormal.s_city,
        s_state = denormal.s_state,
        s_zipcode = denormal.s_zipcode,
        s_zipcode4 = denormal.s_zipcode4
        
        FROM raw_volusia_situs as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # LOAD NORNALIZED SALES INTO DENORMALIZED SALES TABLE
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_volusia_sales_denormal 
    SELECT 
        sales_normal.altkey,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,
        
        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee     
        
        FROM
            (SELECT 
                altkey,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_amt,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_grantor,
                sale_grantee,
                --row_number() OVER (PARTITION BY altkey ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY altkey ORDER BY sale_date desc) AS i
                FROM raw_volusia_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_volusia AS interim ON sales_normal.altkey = interim.altkey
        GROUP BY sales_normal.altkey;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 

    #-----------------------------------------------------------------------------------------
    # COPY DENORMALIZED SALES vals into parcels_template_volusia
    #-----------------------------------------------------------------------------------------
    sql = """UPDATE parcels_template_volusia as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee        
        FROM raw_volusia_sales_denormal as denormal
        WHERE interim.altkey = denormal.altkey;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()
# =======================================================================================
# WAKULLA COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_wakulla() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/wakulla/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN wakulla-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/wakulla/wakulla-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_wakulla_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)    

    #exit()

    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)

    #exit()

    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_wakulla as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_wakulla_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# WALTON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_walton() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    

    # create raw tables
    sql_file = "/srv/mapwise_dev/county/walton/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    #-----------------------------------------------------------------------------------------
    # CONVERT DBF to CSV via ogr2ogr
    #-----------------------------------------------------------------------------------------
    
    # delete existing files
    mycmd = 'rm /srv/mapwise_dev/county/walton/processing/database/current/source_data/PA_Parcels.csv'
    print(mycmd)
    os.system(mycmd)

    mycmd = 'ogr2ogr -f "CSV" /srv/mapwise_dev/county/walton/processing/database/current/source_data/ParcelsMerged.csv /srv/mapwise_dev/county/walton/processing/vector/propapp/current/source_data/PublicData_20240722.gdb ParcelsMerged'
    print(mycmd)
    os.system(mycmd)   
    

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN walton-convert-sales.py')
    mycmd = '/srv/tools/python/parcel_processing/walton/walton-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    print('RUN walton-convert-parcels.py')
    mycmd = '/srv/tools/python/parcel_processing/walton/walton-convert-parcels.py'
    os.system(mycmd)
    print(mycmd)
    
    
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_walton_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy parcels_template2_walton from 'parcels_new2.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #exit()
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)
    
    
    # Insert records not in parcels_template_walton from parcels_template2_walton
    sql = "\\copy parcels_template2_walton from 'PA_parcels.csv' CSV HEADER  null as ''"
    sql = """
        INSERT INTO  parcels_template_walton
            (pin, pin_clean, pin2, 
            o_name1, o_address1, o_address2, o_city, o_state, o_zipcode, o_zipcode4, sale1_year, sale1_date, 
            mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot, assd_tot, luse, luse_d, 
            legal_full, legal1, legal2, legal3)
            SELECT o.pin, o.pin_clean, o.pin2, 
            o.o_name1, o.o_address1, o.o_address2, o.o_city, o.o_state, o.o_zipcode, o.o_zipcode4, o.sale1_year, o.sale1_date, 
            o.mrkt_bld, o.mrkt_impr, o.mrkt_lnd, o.mrkt_ag, o.mrkt_tot, o.assd_tot, o.luse, o.luse_d, 
            o.legal_full, o.legal1, o.legal2, o.legal3
            FROM parcels_template2_walton as o WHERE NOT EXISTS (
                SELECT 1
                FROM parcels_template_walton as p
                WHERE p.pin = o.pin
            )
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    #exit()
    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # This needs to be set from a table - stop hard coding pin field matching
    sql = """
        UPDATE parcels_template_walton as p SET
            o_name1 = o.o_name1,
            o_name2 = o.o_name2,
            o_address1 = o.o_address1,
            o_address2 = o.o_address2,
            o_address3 = o.o_address3,
            o_city = o.o_city,
            o_state = o.o_state,
            o_zipcode = o.o_zipcode,
            o_zipcode4 = o.o_zipcode4
            FROM raw_walton_sales_dwnld as o
            WHERE p.pin = replace(o.pin,'-','')
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #-----------------------------------------------------------------------------------------
    # update pin2 to get pin with dashes from geometry
    #-----------------------------------------------------------------------------------------
    sql = """
        UPDATE parcels_template_walton as p SET
            pin2 = o.pin_orig
            FROM parcels_std_2010_shp_temp as o
            WHERE p.pin = o.pin_clean_orig AND o.d_state_orig = 'FL'
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()


# =======================================================================================
# WASHINGTON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_washington_fdor() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    
    # create raw tables
    sql_file = "/srv/mapwise_dev/county/washington/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    #-----------------------------------------------------------------------------------------
    # PROCESS WEB SALES DOWNLOAD FILE
    #-----------------------------------------------------------------------------------------    
    print('RUN washington-convert-sales-csv.py')
    mycmd = '/srv/tools/python/parcel_processing/washington/washington-convert-sales-csv.py'
    os.system(mycmd)
    print(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy raw_washington_sales_dwnld from 'parcels_sales.txt' with delimiter as E'\\t' null as ''"
    #print 'SQL COMMAND: ', sql
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # process_raw_fdor - create parcels_template_<county>
    #-----------------------------------------------------------------------------------------
    process_raw_fdor(county)


    #-----------------------------------------------------------------------------------------
    # update owner name and mailing address
    #-----------------------------------------------------------------------------------------
    # No owner info in web download
    sql = """
        UPDATE parcels_template_washington as p SET
            o_name1 = 'Owner Name Missing - ' || o.pin,
            o_name2 = null,
            o_address1 = null,
            o_address2 = null,
            o_address3 = null,
            o_city = null,
            o_state = null,
            o_zipcode = null,
            o_zipcode4 = null
            FROM raw_washington_sales_dwnld as o
            WHERE p.pin = o.pin
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

      
# =======================================================================================
# WASHINGTON COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_washington_scrape() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    
    # create parcel, building, legal, sales tables
    sql_file = "/srv/mapwise_dev/county/washington/processing/database/sql_files/create_raw_tables.sql"
    print('SQL COMMAND: ', sql_file)
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)

    # load data into tables    
    sql = "\\copy raw_washington_bldg from 'bldg.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_washington_parcel from 'parcels.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_washington_land from 'land.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql = "\\copy raw_washington_misc from 'misc.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    sql = "\\copy raw_washington_sales from 'sales.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # create building sum table
    sql = """SELECT 
            bldg.pin as pin, 
            min(cast(bldg.yrblt_act as integer)) as min_yrbuilt, 
            sum(cast(bldg.sqft_htd as integer)) as sum_sqft_htd, 
            sum(cast(bldg.sqft_tot as integer)) as sum_sqft_tot, 
            sum(cast(trunc(cast(bldg.num_bed as numeric)) as integer)) as sum_num_beds,
            sum(cast(trunc(cast(bldg.num_bath as numeric)) as integer)) as sum_num_baths
        INTO raw_washington_bldg_stats
        from raw_washington_bldg as bldg
        group by bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # load raw_washington_parcels into parcels_template
    sql = """INSERT INTO parcels_template_washington (pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse,luse_d,lusedor,legal1,mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot) 
            SELECT 
            pin,o_name1,o_address1,o_address2,o_city,o_state,o_zipcode,
            s_address,luse,luse_d,lusedor,legal1,mrkt_lnd,mrkt_ag,mrkt_bld,mrkt_impr,mrkt_tot
        FROM raw_washington_parcel;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # join on building table to bring in building info
    sql = """UPDATE parcels_template_washington
            SET
            yrblt_act = bldg.min_yrbuilt,  
            sqft_htd = bldg.sum_sqft_htd, 
            sqft_tot = bldg.sum_sqft_tot, 
            num_bath = bldg.sum_num_baths,
            num_bed = bldg.sum_num_beds
            FROM raw_washington_bldg_stats as bldg
            WHERE parcels_template_washington.pin = bldg.pin;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_washington_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_price ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.instrument ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.book ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.page ELSE NULL END) AS sale1_pg ,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_price ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.instrument ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.book ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.page ELSE NULL END) AS sale2_pg,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_price ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.instrument ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.book ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.page ELSE NULL END) AS sale3_pg
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_price,
                --vac_imp,
                instrument,
                book,
                page,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_washington_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_washington AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_washington as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = substring(denormal.sale1_typ from 1 for 10),
        --sale1_vac = denormal.sale1_vac,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = substring(denormal.sale2_typ from 1 for 10),
        --sale2_vac = denormal.sale2_vac,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = substring(denormal.sale3_typ from 1 for 10),
        --sale3_vac = denormal.sale3_vac,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg
        FROM raw_washington_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()




# =======================================================================================
# SUSSEX DELAWARE COUNTY RAW
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# =======================================================================================
def process_raw_sussex() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())
    

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    
    # 
    sql_file = "/srv/mapwise_dev/county/sussex/processing/database/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    #-----------------------------------------------------------------------------------------
    # PROCESS RAW FILES
    #-----------------------------------------------------------------------------------------   
    print('RUN sussex-prop-current.py')
    mycmd = '/srv/projects\\tools\\python\\parcel_processing\\DE_sussex\\sussex-prop-current.py'
    print(mycmd)
    os.system(mycmd)

    print('RUN sussex-sales-current.py')
    mycmd = '/srv/projects\\tools\\python\\parcel_processing\\DE_sussex\\sussex-sales-current.py'
    print(mycmd)
    os.system(mycmd)
        

    #-----------------------------------------------------------------------------------------
    # LOAD RAW FILES
    #-----------------------------------------------------------------------------------------
    sql = "\\copy parcels_template_sussex from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    

    sql = "\\copy raw_sussex_sales from 'sales_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
        
    
    #-----------------------------------------------------------------------------------------
    # LOAD NORNALIZED SALES INTO DENORMALIZED SALES TABLE
    #-----------------------------------------------------------------------------------------
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_sussex_sales_denormal 
    SELECT 
        sales_normal.pin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        Null,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        Null,
        Null,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        Null,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        Null,
        Null,
        Null,
        
        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN CAST(sales_normal.sale_year as int4) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        Null,
        Null,
        Null,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        Null,
        Null,
        Null
        
        FROM
            (SELECT 
                pin,
                --sale_date_date,
                sale_date,
                sale_year,
                sale_amt,
                --sale_vac,
                --sale_typ,
                --sale_qual,
                sale_bk,
                sale_pg,
                --sale_grantor,
                --sale_grantee,
                --row_number() OVER (PARTITION BY altkey ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY pin ORDER BY sale_date desc) AS i
                FROM raw_sussex_sales WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_sussex AS interim ON sales_normal.pin = interim.pin
        GROUP BY sales_normal.pin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 


    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_sussex as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg
        FROM raw_sussex_sales_denormal as denormal
        WHERE interim.pin = denormal.pin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()

   
    # close communication with the database
    cursor.close()
    connection.close()

    #exit()


# =======================================================================================
# ATTOM GEORGIA DATA
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# This is run once for the first chunk of data.
# If we get a new state, we need to add it to this "base".
# =======================================================================================
def process_raw_attom_INIT() :

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    

    # doing this because the template table is created inside this function - misleading!
    drop_tables("a_GA_attom","GA")

    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    

    sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/drop_raw_tables.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/create_raw_tables.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/drop_raw_tables2.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    
    sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/create_raw_tables2.sql"
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
 

    #-----------------------------------------------------------------------------------------
    # initial data load
    #-----------------------------------------------------------------------------------------
    
    #----------------------------------
    # Tax Roll
    #----------------------------------
    
    # remove previously combined file
    mycmd = 'rm source_data/SVN_SAUNDERS_TAXASSESSOR_combined.txt source_data/SVN_SAUNDERS_TAXASSESSOR_clean.txt'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # combine initial GA and initial AL data
    # File initialized
    mycmd = 'tail +2 source_data/SVN_SAUNDERS_TAXASSESSOR_0001.txt > source_data/SVN_SAUNDERS_TAXASSESSOR_combined.txt' 
    print(mycmd)
    os.system(mycmd)  

    # concatenate 
    mycmd = 'tail +2 source_data/SVN_SAUNDERS_ADDON_TAXASSESSOR_0001.txt >> source_data/SVN_SAUNDERS_TAXASSESSOR_combined.txt' 
    print(mycmd)
    os.system(mycmd)     
    
    # remove special characters from raw data
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/SVN_SAUNDERS_TAXASSESSOR_combined.txt > ',pathProcessing,'/source_data/SVN_SAUNDERS_TAXASSESSOR_clean.txt'])
    print(mycmd)
    os.system(mycmd)
    
    # process raw file and create standardized file
    print('RUN assessor.py')
    mycmd = '/srv/tools/python/parcel_processing/ATTOM/sample_data/assessor.py'
    print(mycmd)
    os.system(mycmd)
    
    # 11/23 - not needed, right?
    # load into temp table
    #sql = "\\copy parcels_template_a_ga_attom from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    # copy records into "main table"
    # Have to add the d_state column after the temple is created
    # Review this issue - major roadblock to expanid the template columns
    # because each individual county parcel python code has to be updated as well, unless we do some kind
    # of include or something like that.
    
    # parcels_template_a_ga_attom_main is a persistent table that does not get deleted at any time.
    sql = "\\copy parcels_template_a_ga_attom_main from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # load delete data into temp delete table
    # delete records in main table that match the temp delete table (by attom id)
    # No SVN_SAUNDERS_PROPERTYDELETES file for 1st batch
    sql = "\\copy parcels_template_a_ga_attom_deletes from 'source_data/SVN_SAUNDERS_PROPERTYDELETES_0001.txt' WITH FORMAT CSV HEADER null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    #os.system(mycmd)    

    #----------------------------------
    # Recorder File
    #----------------------------------
    
    # remove previously combined file
    mycmd = 'rm source_data/SVN_SAUNDERS_RECORDER_combined.txt source_data/SVN_SAUNDERS_RECORDER_clean.txt'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # combine initial GA and initial AL data
    # File initialized
    # file name for 1st batch is different!
    mycmd = 'tail +2 source_data/SVN_SAUNDERS_RECORDER_0001_001.txt > source_data/SVN_SAUNDERS_RECORDER_combined.txt' 
    print(mycmd)
    os.system(mycmd)  

    mycmd = 'tail +2 source_data/SVN_SAUNDERS_RECORDER_0001_002.txt >> source_data/SVN_SAUNDERS_RECORDER_combined.txt' 
    print(mycmd)
    os.system(mycmd)    
    
    mycmd = 'tail +2 source_data/SVN_SAUNDERS_ADDON_RECORDER_0001.txt >> source_data/SVN_SAUNDERS_RECORDER_combined.txt' 
    print(mycmd)
    os.system(mycmd)     
    
    # remove special characters from raw data
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/SVN_SAUNDERS_RECORDER_combined.txt > ',pathProcessing,'/source_data/SVN_SAUNDERS_RECORDER_clean.txt'])
    print(mycmd)
    os.system(mycmd)
    
    # process raw file and create standardized file
    print('RUN recorder.py')
    mycmd = '/srv/tools/python/parcel_processing/ATTOM/sample_data/recorder.py'
    print(mycmd)
    os.system(mycmd)
    
    # 11/23 - not needed, right?
    # load into temp table
    #sql = "\\copy raw_attom_recorder from 'recorder_new.txt' with delimiter as E'\\t' null as ''"
    #mycmd = pg_psql + ' -c "' + sql + '"'
    #print mycmd
    #os.system(mycmd)
    
    # copy records into "main table"
    # raw_attom_recorder_main is a persistent table that does not get deleted at any time.
    sql = "\\copy raw_attom_recorder_main from 'recorder_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # load delete data into temp delete table
    sql = "\\copy raw_attom_recorder_deletes from 'source_data/SVN_SAUNDERS_RECORDERDELETES_0001.txt' CSV HEADER null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # delete records in main table that match the temp delete table (by attom id)
    # No SVN_SAUNDERS_PROPERTYDELETES file for 1st batch
    sql = """
        DELETE FROM raw_attom_recorder_main WHERE trans_id IN (SELECT trans_id FROM raw_attom_recorder_deletes);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    exit()

# =======================================================================================
# ATTOM GEORGIA DATA
# - INPUT = Raw text files
# - OUTPUT = raw data tables and parcels_template_<county> postgres tables
# NOTE !!!- The code has hard-coded years in it !!!!
# =======================================================================================
#def process_raw_attom(file_mo="0001") :
def process_raw_attom(data_date) :

    # FOR NOW, assign a var to the file name we are working with for the month
    # TODO: Change this every month
    #file_mo = '0004'
    
    file_mo = ''
    
    # DONE 10/23 - add check for file_mo
    if data_date == '20220922' : file_mo = '0003'
    if data_date == '20221021' : file_mo = '0004'
    if data_date == '20221121' : file_mo = '0005'
    if data_date == '20221221' : file_mo = '0006'
    if data_date == '20230120' : file_mo = '0007'
    if data_date == '20230221' : file_mo = '0008'
    if data_date == '20230321' : file_mo = '0009'
    if data_date == '20230421' : file_mo = '0010'
    if data_date == '20230522' : file_mo = '0011'
    if data_date == '20230622' : file_mo = '0012'
    if data_date == '20220721' : file_mo = '0013'
    if data_date == '20220822' : file_mo = '0014'
    if data_date == '20230922' : file_mo = '0015'
    if data_date == '20231020' : file_mo = '0016'
    if data_date == '20231120' : file_mo = '0017'
    if data_date == '20231220' : file_mo = '0018'
    if data_date == '20240122' : file_mo = '0019'
    if data_date == '20240220' : file_mo = '0020'
    if data_date == '20240320' : file_mo = '0021'
    if data_date == '20240419' : file_mo = '0022'
    if data_date == '20240520' : file_mo = '0023'
    if data_date == '20240619' : file_mo = '0024'
    if data_date == '20240719' : file_mo = '0025'
    if data_date == '20240820' : file_mo = '0026'
    if data_date == '20240919' : file_mo = '0027'
    
    if file_mo == '': 
        print('no data date match')
        exit()
    
    bnd_mo = ''
    
    # The property boundary match file is a different number
    if data_date == '20240619' : bnd_mo = '0015'
    if data_date == '20240719' : bnd_mo = '0016'
    if data_date == '20240820' : bnd_mo = '0017'
    if data_date == '20240919' : bnd_mo = '0018'

    if bnd_mo == '': 
        print('no data date match')
        exit()
        
    # record start time in temp file
    os.system('date > x_start_date.txt')

    # Process shapefile

    # Process new sales file from PA

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()    


    #-----------------------------------------------------------------------------------------
    # CREATE RAW TABLES
    #-----------------------------------------------------------------------------------------    

    sql_file = "/srv/mapwise_dev/county/a_GA_attom/sql_files/create_raw_tables.sql"
    #print 'SQL COMMAND: ', sql_file
    mycmd = pg_psql + ' -f "' + sql_file + '"'
    print(mycmd)
    os.system(mycmd)
    

    sql = """
        DROP INDEX IF EXISTS idx_a_attom_data_upin12;
        CREATE INDEX idx_a_attom_data_upin12 ON parcels_template_a_ga_attom USING btree (upin);
        
        DROP INDEX IF EXISTS idx_a_attom_data_upin13;
        CREATE INDEX idx_a_attom_data_upin13 ON parcels_template_a_ga_attom_main USING btree (upin);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    
    #exit()

    #-----------------------------------------------------------------------------------------
    # next month(s), e.g normal processing
    #-----------------------------------------------------------------------------------------

    # clear temp table
    
    # load new data into temp table
    
    # delete records in main table that match the temp table (by attom id)
    
    # load delete data into temp delete table
    
    # delete records in main table that match the temp delete table (by attom id)
    
    # match to geometry data via propertytoboundarymatch table


    #----------------------------------
    # Tax Roll
    #----------------------------------
    
    # remove previously combined file
    mycmd = 'rm source_data/SVN_SAUNDERS_TAXASSESSOR_clean.txt'
    print('Executing: ', mycmd)
    os.system(mycmd)    
    
    # remove special characters from raw data
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/SVN_SAUNDERS_TAXASSESSOR_',file_mo,'.txt > ',pathProcessing,'/source_data/SVN_SAUNDERS_TAXASSESSOR_clean.txt'])
    print(mycmd)
    os.system(mycmd)
    
    # process raw file and create standardized file
    print('RUN assessor.py')
    mycmd = '/srv/tools/python/parcel_processing/ATTOM/sample_data/assessor.py'
    print(mycmd)
    os.system(mycmd)
    
    # load into temp table
    # Got to truncate first!!!
    sql = """
        TRUNCATE parcels_template_a_ga_attom;
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    

    # bring denormalized sales info into parcels_template
    # have to do this here for now....
    sql = """ALTER TABLE parcels_template_a_ga_attom ADD COLUMN d_state text;""" 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = "\\copy parcels_template_a_ga_attom from 'parcels_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    # Delete records in main table that match the temp new records table (by attom id)
    # These new records are either replacing records already there OR
    # new records being inserted.
    sql = """
        DELETE FROM parcels_template_a_ga_attom_main WHERE upin IN (SELECT upin FROM parcels_template_a_ga_attom);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # copy records into "main table"
    # parcels_template_a_ga_attom_main is a persistent table that does not get deleted at any time.
    sql = """
        INSERT INTO parcels_template_a_ga_attom_main SELECT * FROM parcels_template_a_ga_attom;
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # load delete data into temp delete table
    # NO deletes file for initial round
    sql = "\\copy parcels_template_a_ga_attom_deletes from 'source_data/SVN_SAUNDERS_PROPERTYDELETES_" + file_mo + ".txt' with delimiter as E'\\t' null as ''"
    print(sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    # delete records in main table that match the temp delete table (by attom id)
    sql = """
        DELETE FROM parcels_template_a_ga_attom_main WHERE upin IN (SELECT upin FROM parcels_template_a_ga_attom_deletes);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()  

    #----------------------------------
    # Recorder File
    #----------------------------------
    
    # remove previously combined file
    mycmd = 'rm source_data/SVN_SAUNDERS_RECORDER_clean.txt'
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # combine initial GA and initial AL data
    # File initialized
    #mycmd = 'tail +2 source_data/SVN_SAUNDERS_RECORDER_0001.txt > source_data/SVN_SAUNDERS_RECORDER_combined.txt' 
    #print mycmd
    #os.system(mycmd)  

    #mycmd = 'tail +2 source_data/SVN_SAUNDERS_ADDON_RECORDER_0001.txt >> source_data/SVN_SAUNDERS_RECORDER_combined.txt' 
    #print mycmd
    #os.system(mycmd)     
    
    # remove special characters from raw data
    mycmd = ''.join(["tr -cd '\\11\\12\\15\\40-\\133\\135-\\176' <",pathProcessing,'/source_data/SVN_SAUNDERS_RECORDER_',file_mo,'.txt > ',pathProcessing,'/source_data/SVN_SAUNDERS_RECORDER_clean.txt'])
    print(mycmd)
    os.system(mycmd)
    
    # process raw file and create standardized file
    print('RUN recorder.py')
    mycmd = '/srv/tools/python/parcel_processing/ATTOM/sample_data/recorder.py'
    print(mycmd)
    os.system(mycmd)
    
    # load into temp table
    sql = "\\copy raw_attom_recorder from 'recorder_new.txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)

    # 
    # ?? SHOULD THIS HAPPEN BEFORE: yes, trying this 11/16/23
    #   DELETE FROM raw_attom_recorder_main WHERE trans_id IN (SELECT trans_id FROM raw_attom_recorder)
    # delete records in main table that match the temp delete table (by attom id)
    sql = """
        DELETE FROM raw_attom_recorder_main WHERE trans_id IN (SELECT trans_id FROM raw_attom_recorder_deletes);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # Delete records in main table that match the temp new records table (by attom id)
    # These new records are either replacing records already there OR
    # new records being inserted.
    sql = """
        DELETE FROM raw_attom_recorder_main WHERE trans_id IN (SELECT trans_id FROM raw_attom_recorder);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # copy records into "main table"
    # raw_attom_recorder_main is a persistent table that does not get deleted at any time.
    sql = """
        INSERT INTO raw_attom_recorder_main SELECT * FROM raw_attom_recorder;
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # load delete data into temp delete table
    sql = "\\copy raw_attom_recorder_deletes from 'source_data/SVN_SAUNDERS_RECORDERDELETES_" + file_mo + ".txt' CSV HEADER null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    

    # !!!!!!!!
    # NOTE: When running through multiple months of updates, set exit() here and just keep iterating
    # NOTICE! Make sure you change the file_mo each iteration.
    # This really just has to be done once (once per month), unless we are re-running the whole thing again.
    # So the idea is very first run, run INIT version, then run for each month, then we are in monthly update mode,
    # where we just increment the file names each month and run once a month.
    
    #exit()
    

    #----------------------------------
    # BOUNDARY MATCH FILES
    #----------------------------------    
    # match to geometry data via propertytoboundarymatch table
    # Each new file is a replacement for all previous data like the geometry parcel polygons.  
    # Load file
    sql = "\\copy raw_attom_propid from 'source_data/SVN_SAUNDERS_PROPERTYTOBOUNDARYMATCH_" + bnd_mo + ".txt' with delimiter as E'\\t' null as ''"
    mycmd = pg_psql + ' -c "' + sql + '"'
    print(mycmd)
    os.system(mycmd)
    
    
    sql = """
        DROP INDEX IF EXISTS idx_raw_attom_propid_upin12;
        CREATE INDEX idx_raw_attom_propid_upin12 ON raw_attom_propid USING btree (attom_id);
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    # problem - need to update pin_geom with the geometry pin values - they come from a separate table
    # solution - 
    sql = """
        UPDATE parcels_template_a_ga_attom_main as p
            SET pin_geom = g.prop_id
            FROM raw_attom_propid as g
            WHERE p.upin = g.attom_id;
    """ 
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()
    
    
    # We need to remove very large (10+GB) temp files to make sure we don't fill the disk during later processing.
    # For debugging, can comment this out
    # remove previously combined file
    #mycmd = 'rm source_data/SVN_SAUNDERS_TAXASSESSOR_combined.txt source_data/SVN_SAUNDERS_TAXASSESSOR_combined_clean.txt source_data/SVN_SAUNDERS_TAXASSESSOR_combined_clean_uniq.txt'
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    # source_data/SVN_SAUNDERS_RECORDER_combined_clean.txt 
    #mycmd = 'rm source_data/SVN_SAUNDERS_RECORDER_combined.txt  source_data/SVN_SAUNDERS_RECORDER_combined_clean.txt source_data/SVN_SAUNDERS_RECORDER_combined_clean_uniq.txt'
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    

    #-----------------------------------------------------------------------------------------
    # SALES DATA
    #-----------------------------------------------------------------------------------------    
    
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO raw_a_attom_data_denormal 
    SELECT 
        sales_normal.upin,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_multi ELSE NULL END) AS sale1_multi,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantee ELSE NULL END) AS sale1_grantee,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_multi ELSE NULL END) AS sale2_multi,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale21_grantor,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantee ELSE NULL END) AS sale2_grantee,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_multi ELSE NULL END) AS sale3_multi,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantee ELSE NULL END) AS sale3_grantee,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_multi ELSE NULL END) AS sale4_multi,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantee ELSE NULL END) AS sale4_grantee,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_multi ELSE NULL END) AS sale5_multi,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantee ELSE NULL END) AS sale5_grantee        
        
        FROM
            (SELECT 
                upin,
                sale_amt,
                sale_year,
                sale_date,
                --sale_date_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_multi,
                sale_bk,
                sale_pg,
                sale_docnum,
                sale_grantor,
                sale_grantee,
                row_number() OVER (PARTITION BY upin ORDER BY sale_date desc) AS i
                FROM raw_attom_recorder_main WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_a_ga_attom_main AS interim ON sales_normal.upin = interim.upin
        GROUP BY sales_normal.upin;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit() 
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_a_ga_attom_main as interim
        SET 
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        sale1_grantee = denormal.sale1_grantee,
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        sale2_grantee = denormal.sale2_grantee,
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,
        sale3_grantee = denormal.sale3_grantee,
        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,
        sale4_grantee = denormal.sale4_grantee,
        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor,
        sale5_grantee = denormal.sale5_grantee
        FROM raw_a_attom_data_denormal as denormal
        WHERE interim.upin = denormal.upin;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    # need a data source identifier - partly a kludge for now
    # use condo_method to set data source
    # we need to handle adding individual counties in new states as well as statewide collections
    # 9/18/2022 - we created parcels_std_saunders to hold the ATTOM data and keep it separate from the 
    # "main" parcel data
    # during that process we settled on name_misc = 'ATTOM_DATA'
    # pick one of these and settle on it
    # UPDATE parcels_std_saunders set d_state = 'GA' WHERE name_misc = 'ATTOM_DATA';
    sql = """
        UPDATE parcels_template_a_ga_attom_main SET condo_method = 'a_ga_attom';
        UPDATE parcels_template_a_ga_attom_main SET name_misc = 'ATTOM_DATA';
    ;""" 
    
    # Update FIPS codes
    # update parcels_std_project as p set fips = c.fips FROM fdor_code_county as c where p.d_date != '20220722' and c.d_county = p.d_county

    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    
    # close communication with the database
    cursor.close()
    connection.close()
    
    #exit()



    
# =======================================================================================
# This does the main work of joining parcels_template with the geometry and creating parcels_<county>
# - INPUT = parcels_new table
# - OUTPUT = parcels_<county> postgres table
# approx line end: 22320
# approx line end: 23421
# approx num lines: 1100
# =======================================================================================
def load_join_process(county,state) :
    """Load, join, further process - generic.

    Keyword arguments:
    county -- the county

    record = cursor.fetchone()
    print record

    record = cursor.fetchall()
    for i in record: 
        print 'record: ',i[0]
        
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION load_join_process(county,state)")
    print("----------------------------------------------------------------------")
    
    county_upper = county.upper()
    county_lower = county.lower()
    
    # No longer valid, state required?
    # if state is empty, we are assuming FL
    if len(state) == 0:
        #state = 'FL'
        print('NO STATE')
        exit()
    
    # state should be set by now
    #if county_upper == 'A_GA_ATTOM':
    #    state = 'GA'    
    
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()

    # miami-dade should be called originally running parcels_convert using miami-dade
    # county and county_upper at this point should be miami_dade
    if (county_upper == 'MIAMI_DADE') :
        county_upper = 'MIAMI-DADE'      
        
    # FOR TESTING TO MAKE SURE CONNECTIONS ARE CLOSED
    #connection.commit()
    # close communication with the database
    #cursor.close()
    #connection.close()

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())


    parcels_template = "parcels_template_" + county_lower
    parcels_county = "parcels_" + state_lower + "_" + county_lower
    
    print("\n\nparcels_County: ", parcels_county, "\n\n")
    #parcels_raw = "raw_" + county + "_parcels"
    parcels_raw = "parcels_std_2010_shp_temp"


    idx_parcels_cnty_pin_orig = 'idx_parcels_' + state_lower + '_' + county_lower + '_pin_orig'
    idx_parcels_cnty_pin = 'idx_parcels_' + state_lower + '_' + county_lower + '_pin'
    idx_parcels_cnty_altkey = 'idx_parcels_' + state_lower + '_' + county_lower + '_altkey'
    idx_parcels_cnty_o_name1 = 'idx_parcels_' + state_lower + '_' + county_lower + '_o_name1'
    idx_parcels_cnty_d_county = 'idx_parcels_' + state_lower + '_' + county_lower + '_d_county'
    
    # ================================================================================
    #  -- SET SHP and TEMPLATE PINs
    # ================================================================================
    # Make sure pin format in geometry matches pin format in tax roll data.
    # One of first things to check if not seeing daat show up in parcels_std_project.
    # This is going to change from county to county. Random groups of counties will be similar.    
    raw_pk = 'pin_orig'
    template_pk = 'pin'
    raw_altkey = 'altkey_orig'

    #if (county_upper in ['WASHINGTON']) :
    #    parcels_raw = "parcels_fdor_2010_shp"
    #    raw_pk = 'parcel_id'

    # For Hendry - manually generated clean version of pin as pin2
    # update parcels_std_2010_shp_temp SET pin2_orig = replace(pin_orig,' ','') where d_county_orig = 'HENDRY';
    # update parcels_std_2010_shp_temp SET pin2_orig = replace(pin2_orig,'-','') where d_county_orig = 'HENDRY';
    # update parcels_std_2010_shp_temp SET pin2_orig = replace(pin2_orig,'.','') where d_county_orig = 'HENDRY';
    
    # ALL of these need to be values acquired from data dictionary / metadata tables
    if (county_upper in ['A_GA_ATTOM']):
        raw_pk = 'pin_orig'
        template_pk = 'pin_geom'
    
    # TODO: Get this from a table
    # These are subject to change should be defined explicily for each county
    # Default assignments are a few lines above 
    # If having trouble matching pins, start with making sure geometry and fileds are 
    #   how you think they are in parcels_std_2010_shp_temp
    # Then make sure the raw_pk and template_pk column names are set correctly, 
    #   e.g. should be a match in parcel numbers between the two
    if state_upper == 'FL':
    
        # Eventually, this goes away when its handled in the raw tax roll standardization code
        # ADD COLUMN d_state to template table
        # if d_state gets incorporated into main table definition, this needs to go.
        #sql = """ALTER TABLE parcels_template_""" + state_lower + """_""" + county_lower + """ ADD COLUMN IF NOT EXISTS d_state text;"""
        sql = """ALTER TABLE parcels_template_""" + county_lower + """ ADD COLUMN IF NOT EXISTS d_state text;
            UPDATE parcels_template_""" + county_lower + """ SET d_state = 'FL';
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
        if (county_upper in ['HENDRY']):
            raw_pk = 'pin2_orig'

        if (county_upper in ['DESOTO','HENDRY','MANATEE','OKEECHOBEE','ST_JOHNS']):
            template_pk = 'pin_clean'
            
        if (county_upper in ['MARTIN','WALTON']):
            raw_pk = 'pin_clean_orig'
            template_pk = 'pin_clean'

        if (county_upper in ['BRADFORD','CALHOUN','FRANKLIN','GILCHRIST','GULF','JACKSON','MADISON','HAMILTON','HARDEE','SANTA_ROSA','UNION','WASHINGTON']):
            raw_pk = 'pin_orig'
            template_pk = 'pin_clean'

        if (county_upper in ['HERNANDO']):
            raw_pk = 'pin2_orig'
            template_pk = 'pin2'

        if (county_upper in ['xx']):
            raw_pk = 'pin_orig'
            template_pk = 'altkey'
            
        if (county_upper in ['OSCEOLA']):
            raw_pk = 'pin_clean_orig'
            template_pk = 'pin_clean'        

        if (county_upper in ['PINELLAS']):
            raw_pk = 'pin_orig'

        if (county_upper in ['BREVARD','CITRUS','CLAY','LAKE','VOLUSIA']):
            raw_pk = 'altkey_orig'
            template_pk = 'altkey'

        #if (county_upper in ['TAYLOR']):
        #    raw_pk = 'altkey_orig'
        #   template_pk = 'pin'         

        if (county_upper in ['ORANGE']) :
            template_pk = 'pin_clean'
        

    # ================================================================================
    #  -- PER COUNTY LAND USE CODE FIXES
    # ================================================================================

    # Acquire land use codes from raw sumter parcels
    #if (county_upper == 'SUMTER') :
    #    sql = "UPDATE " + parcels_template + " SET luse = substring(raw_sumter_parcels.p_use_1 from 2 for 4), lusedor = substring(raw_sumter_parcels.p_use_1 from 2 for 2) FROM raw_sumter_parcels WHERE " + parcels_template + ".pin = raw_sumter_parcels.pin;"
    #    print sql
    #    cursor.execute(sql)
    #    connection.commit()    
    
    # ================================================================================
    #  -- GET LUSEDOR_D DESCRIPTION VALUES FROM LOOKUP TABLE
    # ================================================================================
    
    # FLORIDA specific
    
    #-- lusedor code descriptions from standard file
    #UPDATE parcels_template_hillsborough SET lusedor_d = codes_lusedor.luse_desc FROM codes_lusedor WHERE parcels_template_hillsborough.lusedor = codes_lusedor.luse;
    sql = "UPDATE " + parcels_template + " SET lusedor_d = codes_lusedor.luse_desc FROM codes_lusedor WHERE " + parcels_template + ".lusedor = codes_lusedor.luse;"
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # DO THIS FOR COUNTIES WHERE luse_d is null and luse = lusedor
    #-- lusedor code descriptions from standard file
    #UPDATE parcels_template_hillsborough SET lusedor_d = codes_lusedor.luse_desc FROM codes_lusedor WHERE parcels_template_hillsborough.lusedor = codes_lusedor.luse;
    sql = "UPDATE " + parcels_template + " SET luse_d = codes_lusedor.luse_desc FROM codes_lusedor WHERE " + parcels_template + ".luse = codes_lusedor.luse;"
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # ================================================================================
    # MAYBE for ORANGE - used to do this
    # ================================================================================
    # -- this only deletes RW and LAKEs, some CONDO associations left as 'CA'
    # DELETE FROM parcels_orange WHERE (feat_code = 'LB' or feat_code = 'RW') and pid = '';


    # ================================================================================
    #  -- MAKE PIN UPDATES
    # ================================================================================
    
    # 8/31/2022 - REVIEW THIS
    
    # NOTE: Sometimes necessary just to do the join, but also do it to create clean versions if needed
    # Also may need to re-order pin digits, like swap TRS to STR
        
        
    # ST JOHNS - pkey doesn't have a pin version that matches the shapefile
    if (county_upper == 'ST_JOHNS' and state_upper == 'FL') :
        sql = """
            UPDATE """ + parcels_template + """ SET pin_clean = replace(pin, ' ','') ;
            CREATE INDEX pt_stjohns_pin_clean_idx ON """ + parcels_template + """ USING btree (pin_clean);
            UPDATE """ + parcels_template + """ SET pin_geom = pin_clean ;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # OSCEOLA
    # 12/2011 - using FDOR parcels - pin has dashes, imapp does not
    # for parcels_template_osceola, put pin into pin_clean and make a dashed version
    #if (county_upper == 'OSCEOLA' and state_upper == 'FL') :
    #    sql = """UPDATE """ + parcels_template + """ SET pin_clean = pin ;
    #        CREATE INDEX pt_osceola_pin_clean_idx ON """ + parcels_template + """ USING btree (pin_clean);"""
    #    print sql
    #    cursor.execute(sql)
    #    connection.commit()
    #    
    #    sql = """UPDATE """ + parcels_template + """ SET pin = substr(pin, 1, 2) || '-' || substr(pin, 3, 2) || '-' || substr(pin, 5, 2) || '-' || substr(pin, 7, 4) || '-' || substr(pin, 11, 4) || '-' ||substr(pin, 15, 4);"""
    #    print sql
    #    cursor.execute(sql)
    #    connection.commit() 

    if (county_upper == 'HERNANDO' and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_template + """ SET pin_clean = replace(pin, ' ', '') ;
            CREATE INDEX pt_hernando_pin_clean_idx ON """ + parcels_template + """ USING btree (pin_clean);"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

        # set pin2 --
        # imapp doing something different than appraiser and fdor
        # imapp = R1221926001000000080
        # appraiser = R26 122 19 0010 0000 0080
        # fdor = R26 122 19 0010 0000 0080
        sql = """UPDATE """ + parcels_template + """ SET pin2 = substr(pin, 1,1) || substr(pin, 7,2) || substr(pin, 2,3) || substr(pin, 5,2) || substr(pin, 9,12);
            CREATE INDEX pt_hernando_pin2_idx ON """ + parcels_template + """ USING btree (pin2);"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

        # set pin2_clean        
        sql = """UPDATE """ + parcels_template + """ SET pin2_clean = pin2;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        # set pin_geom        
        sql = """UPDATE """ + parcels_template + """ SET pin_geom = pin2;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()


    # TEMP SOLUTION
    # parcels_std_2010_shp_temp needs a pin_clean for GA
    # many parcels are not matching due to formatting differences between geometry and tax roll
    # so we are manually calculating this now, jnstead of reloading all the data
    # but in the future, we should always have a pin_clean, no matter what in case this issue comes back up
    # 4/9/2022 - This has been disabled and I think needs to be removed since we are using a lookup table instead
    if county_upper == 'A_GA_ATTOM_____' :
        
        print("temporary / kludge pin_clean update")
        sql = """UPDATE parcels_std_2010_shp_temp 
            SET pin_clean_orig = replace(pin_orig,'-','')
            --WHERE d_state_orig = 'GA' ;"""     
        print(sql)
        cursor.execute(sql)
        connection.commit()  

        sql = """UPDATE parcels_std_2010_shp_temp 
            SET pin_clean_orig = replace(pin_orig,'  ','')
            --WHERE d_state_orig = 'GA' ;"""     
        print(sql)
        cursor.execute(sql)
        connection.commit()  

        sql = """UPDATE parcels_std_2010_shp_temp 
            SET pin_clean_orig = replace(pin_orig,' ','')
            --WHERE d_state_orig = 'GA' ;"""     
        print(sql)
        cursor.execute(sql)
        connection.commit()         
        
    # ================================================================================
    #  -- JOIN PARCELS
    # - create table parcels_<county> via join parcels_template_<county> and parcels_std_2010_shp_temp
    # ================================================================================
    try:
        sql = "DROP TABLE " + parcels_county;
        print(sql)
        cursor.execute(sql)
        connection.commit()
    except:
        print('DROP TABLE - does not exist: ',parcels_county)
        connection.commit()

    try:
        sql = "DROP TABLE " + parcels_county + "_shp_temp";
        print(sql)
        cursor.execute(sql)
        connection.commit()
    except:
        print('DROP TABLE - does not exist: ',parcels_county + "_shp_temp")
        connection.commit()


    # THE BIG ENCHILADA
    
    # ================================================================================
    # CREATE parcels_<county>
    # ================================================================================
    # NOTE: The first sql statements here can get overridden later by county-specific code
    # if the initial sql doesn;t get over-written it executes after the test for different counties.
    # Some of the sql statements get exectuted twice - two different versions.
    # 9/2014 - changed LEFT OUTER JOIN to FULL OUTER JOIN so we can include parcels that don't have geometry
    #   shouldn;t FULL OUTER JOIN include parcels that DO have geometry but no record in the 
    #WHERE p.wkb_geometry is null and p.pin = s.pin_orig and  s.d_state_orig = 'GA';"""
    if county_upper == 'A_GA_ATTOM' :
        #sql = """CREATE TABLE """ + parcels_county + """ 
        #    AS SELECT * FROM """ + parcels_raw + """ AS prcl_shp 
        #    FULL OUTER JOIN """ + parcels_template + """ AS prcl_tmplt ON prcl_shp.""" + raw_pk + """ = prcl_tmplt.""" + template_pk + """
        #    WHERE prcl_tmplt.d_county = prcl_shp.d_county_orig and prcl_shp.d_state_orig = 'GA' ;""" 
            
        #sql = """CREATE TABLE """ + parcels_county + """ 
        #    AS SELECT * FROM 
        #    """ + parcels_template + """ AS prcl_tmplt 
        #    FULL OUTER JOIN 
        #    """ + parcels_raw + """ AS prcl_shp
        #        ON prcl_shp.""" + raw_pk + """ = prcl_tmplt.""" + template_pk + """
        #    WHERE prcl_tmplt.d_county = prcl_shp.d_county_orig and prcl_shp.d_state_orig = 'GA' ;"""
        sql = """
            CREATE TABLE parcels_ga_a_ga_attom 
            AS SELECT * FROM 
            parcels_template_a_ga_attom_main AS t   
            LEFT OUTER JOIN 
            parcels_std_2010_shp_temp AS g
                ON t.pin_geom = g.pin_orig AND t.d_county = g.d_county_orig 
                -- AND g.d_state_orig = 'GA'
        ;"""
        
        
        # NEW METHOD
        # Create table without join
        sql = """CREATE TABLE parcels_ga_a_ga_attom 
            AS SELECT * FROM 
            parcels_template_a_ga_attom_main AS t
        ;"""
        print("\n------- UPDATE SQL ------")
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        #exit()
        # add wkb_geometry field
        sql = """ALTER TABLE parcels_ga_a_ga_attom ADD COLUMN wkb_geometry geometry;
        ALTER TABLE parcels_ga_a_ga_attom ADD COLUMN ogc_fid serial;
        ;"""
        print("\n------- UPDATE SQL ------")
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        # Update wkb_geometry
        sql = """UPDATE parcels_ga_a_ga_attom as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM  parcels_std_2010_shp_temp AS s
        WHERE p.wkb_geometry is null and p.pin_geom = s.pin_orig and p.d_county = s.d_county_orig
            -- AND s.d_state_orig = 'GA'
        ;"""
        print("\n------- UPDATE SQL ------")
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        # start code chunk brought up from below
        #if (county_upper in ['A_GA_ATTOM']) :
        #sql = """UPDATE parcels_ga_a_ga_attom as p 
        #SET
        #wkb_geometry = s.wkb_geometry
        #FROM  parcels_std_2010_shp_temp AS s
        #WHERE p.wkb_geometry is null and p.pin_fdor = s.pin_orig and p.d_county = s.d_county_orig and s.d_state_orig = 'GA';"""
      
        #print "\n------- UPDATE SQL ------"
        #print sql
        #cursor.execute(sql)
        #connection.commit()  
        
        #sql = """UPDATE parcels_ga_a_ga_attom as p 
        #SET
        #wkb_geometry = s.wkb_geometry
        #FROM  parcels_std_2010_shp_temp AS s
        #WHERE p.wkb_geometry is null and p.pin_clean = s.pin_clean_orig and p.d_county = s.d_county_orig and s.d_state_orig = 'GA';"""
      
        #print "\n------- UPDATE SQL ------"
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
        # Chattooga County
        # Problem: Many polygons not matching tax roll
        # Solution: It appears if the PIN doesn't contain any values other than zero, the last three zeros are left off th PIN! Wha?
        # Example: In Tax roll - "00050-00000-070-000" "0005000000070000" - SHP 0005000000070
        #sql = """UPDATE parcels_ga_a_ga_attom as p 
        #SET
        #wkb_geometry = s.wkb_geometry
        #FROM  parcels_std_2010_shp_temp AS s
        #WHERE p.wkb_geometry is null and substr(p.pin_clean,1,13) = s.pin_clean_orig and p.d_county = 'CHATTOOGA' and s.d_state_orig = 'GA';"""
        
        #print "\n------- UPDATE SQL ------"
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
        # TODO - this one is complicated. Tax roll pin doesn't match actual pin, which appears good in geometry table
        # I think we may have to tak into account the pin length and vary the subsrting based on that. Still figuring out the pattern.
        # Douglas County
        # Problem: Many polygons not matching tax roll
        # Solution: It appears the taxroll version of SOME PINs are adding an extra zero in position 9. Wha?
        # Example: In Tax roll - "002301500118" - SHP 02301500118
        #sql = """UPDATE parcels_ga_a_ga_attom as p 
        #SET
        #wkb_geometry = s.wkb_geometry
        #FROM  parcels_std_2010_shp_temp AS s
        #WHERE p.wkb_geometry is null and concat(substr(p.pin_clean,1,8),substr(p.pin_clean,10,3)) = s.pin_clean_orig and p.d_county = 'DOUGLAS' and s.d_state_orig = 'GA';"""
        
        #sql = """UPDATE parcels_ga_a_ga_attom as p 
        #SET
        #wkb_geometry = s.wkb_geometry
        #FROM  parcels_std_2010_shp_temp AS s
        #WHERE p.wkb_geometry is null and concat(substr(p.pin_clean,1,8),substr(p.pin_clean,11,3)) = s.pin_clean_orig and p.d_county = 'DOUGLAS' and s.d_state_orig = 'GA';"""
        
        #print "\n------- UPDATE SQL ------"
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
        # end code chunk brought up from below
        
        # TODO: Counties with Issues: Houston, Lee, Tift, Worth, Baker, Decatur, Clay, 
        # McDuffe, Effingham, Bulloch, Bryan, Glynn, Ben Hill, Houston, Cherokee, Jeff Davis
        

    else:
        sql = """CREATE TABLE """ + parcels_county + """ AS 
            SELECT * 
            FROM """ + parcels_template + """ AS prcl_tmplt 
            LEFT OUTER JOIN """ + parcels_raw + """ AS prcl_shp
            ON prcl_shp.""" + raw_pk + """ = prcl_tmplt.""" + template_pk + """ AND 
                prcl_shp.d_county_orig = '""" + county_upper + """' AND
                prcl_shp.d_state_orig = '""" + state_upper + """'
                ;
        """


    # ================================================================================
    # SINGLE RELATE COUNTIES -- Create temp SHP table first instead!
    # ================================================================================
    
    # 8/31/2022 - REFACTOR this whole section
    # move configs to metadata / data dictionary tables wherever possible
    
    # Must create a temp version of the shp table in order to properly do the FULL OUTER JOIN
    county_list = ['BREVARD', 'BROWARD', 'COLLIER', 'INDIAN_RIVER', 'LEE', 'MARTIN', 'MIAMI-DADE', 
        'ORANGE', 'PALM_BEACH', 'SARASOTA', 'ST_JOHNS', 'ST_LUCIE', 'SUSSEX', 'VOLUSIA']
    if (county_upper in county_list and state_upper == 'FL') :
        sql = """CREATE TABLE parcels_""" + state_lower + """_""" + county_lower + """_shp_temp 
        AS SELECT * FROM parcels_std_2010_shp_temp WHERE d_county_orig = '""" + county_upper + """'
        AND d_state_orig = 'FL';"""

        print(sql)
        cursor.execute(sql)
        connection.commit()        
        
    #if (county_upper == 'WASHINGTON') :
    #    sql = """CREATE TABLE """ + parcels_county + """ 
    #    AS SELECT * FROM """ + parcels_raw + """ AS prcl_shp 
    #    LEFT OUTER JOIN """ + parcels_template + """ AS prcl_tmplt ON prcl_shp.""" + raw_pk + """ = prcl_tmplt.""" + template_pk + """
    #    WHERE prcl_shp.co_no = '77' ;"""

    #exit()
    
    # SINGLE RELATE county list is minus MARTIN and MIAMI-DADE which are handled below
    # A FULL OUTER JOIN is done so we get all of the condo records for SINGLE RELATE counties
    # code below will bring in geometry that will be missing for condo records, which require a subsequent join on the shp using a condo key
    # CLAY
    county_list = ['BREVARD', 'BROWARD', 'COLLIER', 'INDIAN_RIVER', 'LEE', 'MARTIN', 'ORANGE', 'PALM_BEACH', 'SARASOTA', 'ST_JOHNS', 'ST_LUCIE', 'SUSSEX', 'VOLUSIA']
    if (county_upper in county_list and state_upper == 'FL') :
        sql = """CREATE TABLE """ + parcels_county + """
        AS SELECT * FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp AS s
        FULL OUTER JOIN """ + parcels_template + """ AS p ON s.""" + raw_pk + """ = p.""" + template_pk + """;"""
        
    # Martin - SHP has an extra 4 zeros - at least in 2/2011 it does
    #if (county_upper == 'MARTIN' and state_upper == 'FL') :
    #    sql = """CREATE TABLE """ + parcels_county + """ 
    #    AS SELECT * FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp AS s 
    #    FULL OUTER JOIN """ + parcels_template + """ AS p ON substring(s.""" + raw_pk + """ from 1 for 18) = p.""" + template_pk + """;"""
    
    # Miami-dade - special handling of county name in shp table
    # NOTE: Is this really different now?
    if (county_upper == 'MIAMI-DADE' and state_upper == 'FL') :
        sql = """CREATE TABLE """ + parcels_county + """ 
        AS SELECT * FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp AS s 
        FULL OUTER JOIN """ + parcels_template + """ AS p ON s.""" + raw_pk + """ = p.""" + template_pk + """;"""     

    print("\n------- JOIN SQL ------")
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # ================================================================================
    # ATTOM DATA - Update  geometry using different pin fields if no geom match
    # ================================================================================
    # moved chunk to earlier in code for experiment
      
    # reset the sql command
    sql = ''

    # we have joined data in parcels_<county> now
  
    
    # ================================================================================
    # SINGLE RELATE COUNTIES -- Get the geometry for condos without geometry
    # ================================================================================
    # Each one is handled separately due to the different condo keys
    # Although a few share the same key
    # YOU HAVE TO GET A 1 to 1 match, or no update can occur

    if (county_upper in ['BREVARD'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,17) = substr(s.pin_orig,1,17) and p.lusedor = '04';"""
        
    if (county_upper in ['BROWARD'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,8) = substr(s.pin_orig,1,8)
        -- and p.lusedor = '04'
        ;"""
        
    if (county_upper == 'INDIAN_RIVER' and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,11) = substr(s.pin_orig,1,11) and p.lusedor = '04';"""       

    if (county_upper in ['LEE'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,11) = substr(s.pin_orig,1,11) and p.lusedor = '04';"""
        #WHERE p.wkb_geometry is null and substr(p.pin,1,12) = substr(s.pin_orig,1,12);"""
        # WHERE p.wkb_geometry is null and substr(p.pin,1,13) = substr(s.pin_orig,1,13);
        
    if (county_upper == 'MARTIN' and state_upper == 'FL') :
        print("HELLO MARTIN")
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin_clean,1,9) = substr(s.pin_orig,1,9) and p.lusedor = '04';"""
        
    if (county_upper == 'MIAMI-DADE' and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,9) = substr(s.pin_orig,1,9)
        --and p.lusedor = '04'
        ;"""

    # Palm Beach is special (or is it?) where office consos and more are single relate.
    # If last two digits in luse = '04' outside of regular condos, its a condo
    if (county_upper in ['PALM_BEACH'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,10) = substr(s.pin_orig,1,10);"""
        # WHERE p.wkb_geometry is null and substr(p.pin,1,10) = substr(s.pin_orig,1,10) and (p.lusedor = '04' OR substr(p.luse, 3, 2) = '04');"""

    if (county_upper == 'PINELLAS' and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,13) = substr(s.pin_orig,1,13) and p.lusedor = '04';"""         

    # ST_JOHNS uses a condo_key
    if (county_upper == 'ST_JOHNS' and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        --WHERE p.wkb_geometry is null and substr(p.pin,1,6) = substr(s.pin_orig,1,6) and p.lusedor = '04' and p.subdiv_id = s.condo_key_orig
        WHERE p.wkb_geometry is null and substr(p.pin,1,4) = substr(s.pin_orig,1,4) and p.lusedor = '04' and p.subdiv_id = s.condo_key_orig
        ;"""

        # extra query below as well    

    if (county_upper in ['ST_LUCIE'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,8) = substr(s.pin_orig,1,8) and p.lusedor = '04';"""

    if (county_upper in ['SUSSEX'] and state_upper == 'DE') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        WHERE p.wkb_geometry is null and pin = pin_orig and p.lusedor = '04';"""          

    # YOU HAVE TO GET A 1 to 1 match, or no update can occur
    # get the first round using a half acre
    if (county_upper in ['VOLUSIA'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        -- 530953
        WHERE p.wkb_geometry is null and substr(p.pin2,1,6) = substr(s.pin2_orig,1,6) and p.lusedor IN ('04') and st_area(s.wkb_geometry) > 2000;"""
        
        print("\n------- UPDATE SQL ------")
        print(sql)
        cursor.execute(sql)
        connection.commit() 
        
    # get the next round not using a spatial size so we can get small guys
    if (county_upper in ['VOLUSIA'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as s
        -- 530953
        WHERE p.wkb_geometry is null and substr(p.pin2,1,6) = substr(s.pin2_orig,1,6) and p.lusedor IN ('04');"""        

    # ORANGE and MANATEE not actually single relate
    county_list = ['BREVARD', 'BROWARD', 'INDIAN_RIVER', 'LEE', 'MARTIN', 'MIAMI-DADE', 'PALM_BEACH', 'ST_JOHNS', 'ST_LUCIE', 'VOLUSIA']

    if (county_upper in county_list) :
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
    # COLLIER is a different case for condos
    # the RES460FILE has SHP PIN and condo PIN as many to one, i.e. a lookup table
    # so, calc the condo_key to be the SHP PIN based on that table
    # then calc the geometry by joining the condo_key on the pin in the shp table
    if (county_upper == 'COLLIER' and state_upper == 'FL') :
        #exit()
        # OLD
        sql = """
            UPDATE """ + parcels_county + """ as p SET
                condo_key = s.pin_shp
                FROM raw_collier_res460file as s
                WHERE p.pin = s.pin_condo
        """;
        
        #print sql
        #cursor.execute(sql)
        #connection.commit()

        # we are bringing over native geometry which is in projection 2236, so transform it        
        # OLD
        sql = """
        UPDATE """ + parcels_county + """ as p SET
            wkb_geometry = st_transform(s.wkb_geometry, 32767)
            FROM raw_collier_parcels as s
            WHERE p.wkb_geometry is null and p.condo_key = trim(leading '0' from s.fln);"""	    

        #print sql
        #cursor.execute(sql)
        #connection.commit()

        # are we filling in some condos here (without leading zeros that don't match shp with leading zeros?)
        sql = """
        UPDATE """ + parcels_county + """ as p SET
            wkb_geometry = st_transform(s.wkb_geometry, 32767)
            FROM parcels_fl_collier_shp_temp as s 
            WHERE p.wkb_geometry is null and p.condo_key = trim(leading '0' from s.pin_orig);"""	    

        print(sql)
        cursor.execute(sql)
        connection.commit()

       
        # DELETE all parcels with no geometry at this point - see notes in a_DATA_INVESTIGATION_notes.txt
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE wkb_geometry is null ;"""	    

        print(sql)
        cursor.execute(sql)
        connection.commit()

        # set pin2 to pin, and condo_key
        # condos will not get exported correctly unless we do this.
        sql = """
        UPDATE """ + parcels_county + """ SET pin2 = condo_key WHERE condo_key is not null;
        UPDATE """ + parcels_county + """ SET pin2 = pin WHERE pin2 is null;
        ;"""

        print(sql)
        cursor.execute(sql)
        connection.commit()

    # SARASOTA is a different case for condos
    # 8/24 - not used anymore?
    if (county_upper == 'SARASOTA1' and state_upper == 'FL') :

        sql = """
            UPDATE parcels_sarasota as p SET
                condo_key = s.gispid
                FROM raw_sarasota_property as s
                WHERE p.pin_clean = s.id
        """;
        
        print(sql)
        cursor.execute(sql)
        connection.commit()

        # we are bringing over native geometry which is in projection 2236, so transform it        
        sql = """
        UPDATE parcels_sarasota as p SET
            wkb_geometry = s.wkb_geometry
            FROM parcels_std_2010_shp_temp as s
            WHERE p.wkb_geometry is null and p.condo_key = s.altkey_orig;"""	    

        print(sql)
        cursor.execute(sql)
        connection.commit()

        # DELETE all parcels with no geometry at this point - see notes in a_DATA_INVESTIGATION_notes.txt
        #sql = """
        #DELETE FROM parcels_sarasota 
        #    WHERE wkb_geometry is null ;"""	    

        print(sql)
        cursor.execute(sql)
        connection.commit()

        # set pin2 to pin, and condo_key
        # condos will not get exported correctly unless we do this.
        sql = """
        UPDATE parcels_sarasota SET pin2 = condo_key WHERE condo_key is not null;
        UPDATE parcels_sarasota SET pin2 = pin WHERE pin2 is null;
        ;"""

        print(sql)
        cursor.execute(sql)
        connection.commit()        

    # ST_JOHNS - extra query needed to pick up some condos
    if (county_upper == 'ST_JOHNS' and state_upper == 'FL') :

        # need to join shp table to parcel table to get the subdiv ids        
        sql = """UPDATE """ + parcels_county + """ as p 
        SET
        wkb_geometry = s.wkb_geometry
        FROM (parcels_""" + state_lower + """_""" + county_lower + """_shp_temp as a LEFT JOIN parcels_template_st_johns as b on a.pin_orig = b.pin) as s
        WHERE p.wkb_geometry is null and substr(p.pin,1,5) = substr(s.pin_orig,1,5) AND 
            s.subdiv_id = p.subdiv_id AND
            s.lusedor = '09'

        ;"""

        #print sql
        #cursor.execute(sql)
        #connection.commit()        
    
    #
    # EXTREMELY IMPORTANT !!!
    # UPDATE ogc_fid to contain a sequence value from parcels_std_2010_shp_temp_ogc_fid_seq
    # this is because when we bring in geometry for stacked condos, they have no ogc_fid
    # and then we don;t copy them to parcels_std_project if there is no ogc_fid
    #
    sql = """
    UPDATE parcels_""" + state_lower + """_""" + county_lower + """ set ogc_fid = nextval('parcels_std_2010_shp_temp_ogc_fid_seq') where ogc_fid is null
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 8/31/2022 - is this really a special case - or more generic config needed for more special cases?
    # Sussex is special case - it has multiple records that share the same polygon and have the same PIN!
    # maybe this is wrong, but that is how it currently is, so we need to set ogc_fid to nothing and put new ones in so we have unique ogc_fids.
    if (county_upper == 'SUSSEX' and state_upper == 'DE') :
        sql = """
        UPDATE parcels_""" + state_lower + """_""" + county_lower + """ set ogc_fid = null
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()

        sql = """
        UPDATE parcels_""" + state_lower + """_""" + county_lower + """ set ogc_fid = nextval('parcels_std_2010_shp_temp_ogc_fid_seq') where ogc_fid is null
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
   

    # 8/31/2022 - ???
    # could not use the new method due to postgis memory error when doing the multi-poly step

    #
    #CREATE TABLE parcels_hillsborough 
    #	AS SELECT * FROM parcels_std_2010_shp_temp AS prcl_shp 
    #	LEFT OUTER JOIN parcels_template_hillsborough AS prcl_tmplt ON prcl_shp.pin_orig = prcl_tmplt.altkey WHERE prcl_shp.d_county_orig = 'HILLSBOROUGH' ;
    #

    # ================================================================================
    # CREATE INDEXES
    # ================================================================================
    # FIX ME - choose indexes to create based on county
    sql = """
        --CREATE INDEX """ + idx_parcels_cnty_pin_orig + """ ON """ + parcels_county + """ USING btree (pin_orig);
        CREATE INDEX """ + idx_parcels_cnty_pin + """ ON """ + parcels_county + """ USING btree (pin);
        CREATE INDEX """ + idx_parcels_cnty_altkey + """ ON """ + parcels_county + """ USING btree (altkey);
        CREATE INDEX """ + idx_parcels_cnty_o_name1 + """ ON """ + parcels_county + """ USING btree (o_name1);
        CREATE INDEX """ + idx_parcels_cnty_d_county + """ ON """ + parcels_county + """ USING btree (d_county);"""

    print(sql)
    cursor.execute(sql)
    connection.commit()


    # ISSUE - 1185 records don't match
    # not sure why they are doing this, but they have added an extra polygon for condo polys (stacked) that does not match the cd.txt file


    # Update the geometry_columns table so postgis knows about the new data set
    # schema
    # oid;f_table_catalog;f_table_schema;f_table_name;f_geometry_column;coord_dimension;srid;type
    # 2969036;"''";"public";"parcels_noatts";"wkb_geometry";2;900915;"GEOMETRY"
    # The OID gets inserted automatically
    #/*
    #INSERT INTO geometry_columns 
    #	(f_table_catalog, f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type) 
    #	VALUES ('','public','parcels_hillsborough','wkb_geometry',2,32767,'GEOMETRY');
    #*/


    # =========================================
    #  -- ACRES_GIS
    # =========================================

    # FYI round(value,number) is supposed to round numeric numbers to a specified number of digits, however it says no function available
    # BUT for now, we don't need that
    # METERS NOW!
    sql = "UPDATE " + parcels_county + " SET acres_gis = ST_Area(wkb_geometry) / 4046.85642;"
    print(sql)
    cursor.execute(sql)
    connection.commit()
    


    # =========================================
    #  -- S_CITY, S_ZIPCODE
    # =========================================

    # update site address info via master address table, etc.

    # ??? - get rid of this custom code and turn into table based config
    
    # =========================================
    # PIN - A few polygons do not have matching records in parcels_template
    # =========================================
    # This is causing problems for counties that use an alternate version of pin to match, i.e. a clean version
    # fix on a case by case basis
    # problem shows up when doing a shapefile export, because you get mixed clean and non-clean versions of pin
    # Hendry - need to have pin_clean populated
    # pin needs to be like 
    if (county_upper in ['HENDRY'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ SET pin = """ + raw_pk + """ ,pin_clean = """ + raw_pk + """ WHERE pin is null;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
    elif (county_upper in ['BREVARD','CITRUS','CLAY','HILLSBOROUGH','VOLUSIA'] and state_upper == 'FL') :
        # is this doing anything?
        sql = """UPDATE """ + parcels_county + """ SET altkey = """ + raw_pk + """ WHERE altkey is null;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
    elif (state_upper == 'FL'):
        sql = "UPDATE " + parcels_county + " SET pin = " + raw_pk + " WHERE pin is null;"
        print(sql)
        cursor.execute(sql)
        connection.commit()
    else:
        print('Forget about it')
        
    sql = "UPDATE " + parcels_county + " SET altkey = " + raw_altkey + " WHERE altkey is null;"
    print(sql)
    #FIX ME - choose whether or not to do this
    #cursor.execute(sql)
    #connection.commit()

    # PALM_BEACH - extra query needed to add owners where parcels are ahead of propertydata file provided by county
    # should probably switch what gets used as parcels_template
    if (county_upper == 'PALM_BEACH' and state_upper == 'FL') :
        # join on aa rec10 table
        # bring latest owner info
        sql = """UPDATE parcels_palm_beach as p
                SET
                o_name1 = owner.o_name1,
                o_address1 = owner.o_address1,
                o_address2 = owner.o_address2,
                o_address3 = owner.o_address3,
                o_zipcode = owner.o_zipcode,
                o_zipcode4 = owner.o_zipcode4
                FROM raw_palm_beach_aa_rec10 as owner
                WHERE p.pin = owner.pin and p.o_name1 is null;"""
        #print sql
        #cursor.execute(sql)
        #connection.commit()

        # Delete empty condo pin records
        #sql = """DELETE FROM parcels_palm_beach WHERE length(pin) = 10;"""
        #print sql
        #cursor.execute(sql)
        #connection.commit()

        # fill in some blanks - issues with county parcel file missing old and new records
        # join on parcel table
        # valuation values are already present in parcels_template_palm_beach 
        sql = """UPDATE parcels_template_palm_beach as p
                SET
                s_section = parcel.s_section,
                s_township = parcel.s_township,
                s_range = parcel.s_range,
                subdiv_id = parcel.subdiv_id,
                block_pin = parcel.block_pin,
                lot_pin = parcel.lot_pin,
                name_misc = parcel.name_misc,
                luse = parcel.luse,
                luse_d = parcel.luse_d,
                lusedor = parcel.lusedor,
                condo = parcel.condo
                --mrkt_bld = parcel.mrkt_bld,
                --mrkt_impr = parcel.mrkt_impr,
                --mrkt_lnd = parcel.mrkt_lnd,
                --mrkt_ag = parcel.mrkt_ag,
                --mrkt_tot = parcel.mrkt_tot
                
                FROM raw_palm_beach_parcel as parcel
                WHERE p.pin = parcel.pin and p.o_name1 is null;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()


        # bring in lusedor info from FDOR
        sql = """
            UPDATE parcels_template_palm_beach as p
                SET
                    lusedor = CAST(f.dor_uc as text)
                FROM parcels_fdor_2024 as f
                WHERE p.pin = f.parcel_id AND f.co_no = 60 and lusedor is null;

            UPDATE parcels_template_palm_beach AS p
                SET
                    lusedor = '0' || lusedor
                WHERE length(lusedor) = 1;

            UPDATE parcels_template_palm_beach as p
                SET lusedor = substring(lusedor,2,2)
                WHERE length(lusedor) = 3;              
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()        
        
    # SEMINOLE HAS WEIRD ISSUE
    # Homeowners association polygons are not in FDOR data which is the basis of parcels_template
    # 7k+ polygons - discovered while trying to match a list of polygons from duke energy
    if (county_upper in ['SEMINOLE'] and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ as p
                SET
                o_name1 = raw.o_name1,
                o_name2 = raw.o_name2,
                o_name3 = raw.o_name3, 
                o_address1 = raw.o_address1,
                o_address2 = '',
                o_address3 = '',
                o_city = raw.o_city,
                o_state = raw.o_state,
                o_country = raw.o_country,
                o_zipcode = raw.o_zipcode,
                name_misc = raw.name_misc,
                s_section = raw.s_section,
                s_township = raw.s_township,
                s_range = raw.s_range,
                altkey = raw.altkey,
                condo = raw.condo,
                s_number = raw.s_number,
                s_pdir = raw.s_pdir,
                s_name = raw.s_name,
                s_type = raw.s_type,
                s_sdir = raw.s_sdir,
                s_unit = raw.s_unit,
                s_address = raw.s_address,
                mrkt_tot = raw.mrkt_tot,
                assd_tot = raw.assd_tot,
                sqft_htd = raw.sqft_htd,
                sqft_tot = raw.sqft_tot,
                yrblt_act = raw.yrblt_act,
                luse = raw.luse,
                lusedor = raw.lusedor
                FROM parcels_template_seminole2 as raw
                WHERE p.pin = raw.pin and p.o_name1 is null;"""
        #print sql
        #cursor.execute(sql)
        #connection.commit()

        sql = "UPDATE " + parcels_template + " SET lusedor_d = codes_lusedor.luse_desc FROM codes_lusedor WHERE " + parcels_template + ".lusedor = codes_lusedor.luse;"
        #print sql
        #cursor.execute(sql)
        #connection.commit()
        
        
    # DELETES
    
    # DELETE records that have no info other than geometry, pin, acres and county
    sql = """
    DELETE FROM """ + parcels_county + """ 
        WHERE d_state is null and o_name1 is null;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    
    # =========================================
    # EMPTY PIN and O_NAME1 - get rid of these polygons
    # =========================================
    # do this for all counties?
    if (county_upper == 'COLLIER' and state_upper == 'FL') :
        sql = """DELETE from """ + parcels_county + """ where o_name1 is null and pin is null;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # REMOVE IF NOT NEEDED
    # =========================================
    # UPDATE PIN(x) with shapefile version(s)
    # =========================================    
    # MONROE 10/2019 - pin2 version needed to point to PA records online
    if (county_upper == 'MONROE' and state_upper == 'FL') :
        sql = """UPDATE """ + parcels_county + """ SET pin2 = pin2_orig ;
            UPDATE """ + parcels_county + """ SET pin2_clean = replace(pin2_orig, '-','') ;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # !!!!!!!!!
    # 12/2020 - review the duplicate records issue
    # handling some with sort -u now in pasco
    
    # 8/31/2022 - make more generic
    # =========================================
    # HILLSBOROUGH HAS SOME DUPLICATE PARCEL RECORDS THAT WE NEED TO GET RID OF, e.g. select * from parcels_template_hillsborough where pin = 'U-20-32-18-ZZZ-000001-10720.0'
    # =========================================
    # 5180 records removed
    # parcels_template_hills - 474028
    #raw_shp - 467152 
    if (county_upper == 'HILLSBOROUGH' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    # this is removing about 310k records
    # so why is there that much redundnacy with pin_geom?
    if (county_upper == 'A_GA_ATTOM') :
        sql = """
        DELETE FROM parcels_a_ga_attom 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin_geom), ctid 
                FROM parcels_a_ga_attom) x 
                WHERE x.row_number > 1));
        """
        #print sql    
        #cursor.execute(sql)
        #connection.commit()

    if (county_upper == 'BREVARD' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin,altkey), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

    if (county_upper == 'COLUMBIA' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

    if (county_upper == 'DESOTO' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'DIXIE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

    if (county_upper == 'DUVAL' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

    if (county_upper == 'ESCAMBIA' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'FRANKLIN' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
        
    if (county_upper == 'GADSDEN' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit() 
        
    if (county_upper == 'GILCHRIST' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x   -- WHERE pin = '1006190000000210'
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'INDIAN_RIVER' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()        
        
    if (county_upper == 'LAKE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY altkey), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'LEE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

    if (county_upper == 'MANATEE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()        

    if (county_upper == 'MARION' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'MIAMI-DADE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE o_name1 is null;"""	    
        print(sql)
        cursor.execute(sql)
        connection.commit()


    if (county_upper == 'MARTIN' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'MONROE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'NASSAU' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'ORANGE' and state_upper == 'FL') :
    
        # This is to take care of emnpty polygons that have no attributes other than altkey
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE o_name1 is null;"""	    
        print(sql)
        cursor.execute(sql)
        connection.commit()  
        
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin2_clean), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'OSCEOLA' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()     

    if (county_upper == 'PASCO' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()           

    if (county_upper == 'PUTNAM' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit() 
        
    if (county_upper == 'ST_LUCIE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY altkey), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

    if (county_upper == 'SUMTER' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()   

    if (county_upper == 'UNION' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x   -- WHERE pin = '1006190000000210'
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()   

    # so is this the spot where we do X county specific stuff?
    if (county_upper == 'VOLUSIA' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
        # This is to take care of emnpty polygons that have no attributes other than altkey
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE altkey is not null AND o_name1 is null AND pin is null;"""	    
        print(sql)
        cursor.execute(sql)
        connection.commit()        
        
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE pin is null AND o_name1 is null;"""	    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'WAKULLA' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
        
    if (county_upper == 'WALTON' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY pin), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()         

    # get rid of road right of way parcels
    if (county_upper == 'HERNANDO' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE o_name1 = 'HERNANDO COUNTY' and lusedor = '94';
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()        

    # Handle one friggin record that is a problem
    if (county_upper == 'CHARLOTTE' and state_upper == 'FL') :
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ogc_fid = 107142683 and sqft_htd = 240;
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()

        # a couple duplicate polygons - this is not from the shp, its from the raw data
        sql = """
        DELETE FROM """ + parcels_county + """ 
            WHERE ctid = ANY(ARRAY(SELECT ctid 
            FROM (SELECT row_number() OVER (PARTITION BY ogc_fid), ctid 
                FROM """ + parcels_county + """) x 
                WHERE x.row_number > 1));
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()        
        
    # =========================================
    # SALE_Q1 update
    # =========================================
    # 8/31/2022 - don't need to reference county, right?
    # --WHERE d_county = '""" + county_upper + """' and sale1_amt > 100
    # --WHERE d_county = '""" + county_upper + """' and sale2_amt > 100 and sale1q_amt is null;
    # --WHERE d_county = '""" + county_upper + """' and sale3_amt > 100 and sale1q_amt is null;
    sql = """
    UPDATE """ + parcels_county + """ SET
        sale1q_amt = sale1_amt,
        sale1q_year = sale1_year,
        sale1q_date = sale1_date,
        sale1q_date_date = sale1_date_date
        WHERE sale1_amt > 100;

    UPDATE """ + parcels_county + """ SET
        sale1q_amt = sale2_amt,
        sale1q_year = sale2_year,
        sale1q_date = sale2_date,
        sale1q_date_date = sale2_date_date
        WHERE sale2_amt > 100 and sale1q_amt is null;

    UPDATE """ + parcels_county + """ SET
        sale1q_amt = sale3_amt,
        sale1q_year = sale3_year,
        sale1q_date = sale3_date,
        sale1q_date_date = sale3_date_date
        WHERE sale3_amt > 100 and sale1q_amt is null;        

    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # set county and date for parcels_<county>
   
    if (county.lower() == 'a_ga_attom') :
        print("don't touch the county name")
    else:
        sql = """UPDATE """ + parcels_county + """ SET d_county = '""" + county_upper + """';"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    sql = """UPDATE """ + parcels_county + """ SET d_date = '""" + data_date + """';"""
    print(sql)
    cursor.execute(sql)
    connection.commit()  
    
    


    # close communication with the database
    cursor.close()
    connection.close()

    
# ===============================================================================================
#  UPDATE SALE1Q FIELDS
# ===============================================================================================
# This doesn;t need to be run in general, because its already run at end of load_join_process() 
def update_sale1q(county) :
    """assume there is no data in the fields since this is only run after a data update to parcels_std_project
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_sale1q(county)")
    print("----------------------------------------------------------------------")
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
    
    sql = """set work_mem = '3500MB';
    UPDATE parcels_std_project SET
        sale1q_amt = sale1_amt,
        sale1q_year = sale1_year,
        sale1q_date = sale1_date,
        sale1q_date_date = sale1_date_date
        WHERE d_county = '""" + county_upper + """' and sale1_amt > 100;

    UPDATE parcels_std_project SET
        sale1q_amt = sale2_amt,
        sale1q_year = sale2_year,
        sale1q_date = sale2_date,
        sale1q_date_date = sale2_date_date
        WHERE d_county = '""" + county_upper + """' and sale2_amt > 100 and sale1q_amt is null;

    UPDATE parcels_std_project SET
        sale1q_amt = sale3_amt,
        sale1q_year = sale3_year,
        sale1q_date = sale3_date,
        sale1q_date_date = sale3_date_date
        WHERE d_county = '""" + county_upper + """' and sale3_amt > 100 and sale1q_amt is null;        

    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    print('SALE1Q_xx field updates for ',county, ' county complete')


# ===============================================================================================
#  UPDATE PRODUCTION V2 -- NEW VERSION of parcels_std_project
#  - delete existing data and insert new data from parcels_<county>
# TODO: Document key sections in this function
# Provide an index here
# ===============================================================================================
def update_production(state, county) :
    """delete existing data and insert new data from parcels_<county>.
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_production(state, county)")
    print("----------------------------------------------------------------------")

    print("STATE: ",state)
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
    
    county_lower = county.lower()
    
    state_upper = state.upper()
    state_lower = state.lower()
    
    print("\n\nstate_lower: ",state_lower,"\n\n")

    # Delete and INSERT existing parcels
    if county_lower == 'a_ga_attom':
        print('DELETING and INSERTING',county_upper, ' data......')
        sql = """set work_mem = '3500MB';
        DELETE FROM parcels_std_saunders WHERE condo_method = 'a_ga_attom';"""
    else:
        print('DELETING and INSERTING',county_upper, ' data......')
        # 9/6/2022 - HACK FOR now
        sql = """set work_mem = '3500MB';
        DELETE FROM parcels_std_project WHERE d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' AND condo_method is null;
        DELETE FROM parcels_std_saunders WHERE d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' AND condo_method is null;
        """      
    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # ADD COLUMN d_state to template table
    # if d_state gets incorporated into main table definition, this needs to go.
    sql = """ALTER TABLE parcels_""" + state_lower + """_""" + county_lower + """ ADD COLUMN IF NOT EXISTS d_state text;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 12/1/23 - state is now already there
    # W/ attom doing multiple states at a time
    #sql = """ UPDATE parcels_""" + state_lower + """_""" + county_lower + """ SET d_state = '""" + state_upper + """';"""
    #print sql
    #cursor.execute(sql)
    #connection.commit()

    
    sql_insert_saunders = """    
        INSERT INTO parcels_std_saunders 
            (
            ogc_fid, wkb_geometry, s_section, s_township, s_range, subdiv_id, subdiv_nm, subdiv_nm2,
            block_pin, lot_pin, block_legal, lot_legal,
            pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, upin, pin_fdor, 
            acres_deed, acres_gis,
            condo, condo_method, condo_key,
            name_misc, o_name1, o_name2, o_name3, o_address1, o_address2, o_address3, 
            o_city, o_state, o_country, o_zipcode, o_zipcode4,
            s_number, s_pdir, s_name, s_type, s_sdir, s_unit, s_address, s_city, s_zipcode, s_zipcode4,
            sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor, sale1_grantee, 
            sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum, sale2_grantor, sale2_grantee,
            sale3_amt, sale3_year, sale3_date, sale3_date_date, sale3_vac, sale3_typ, sale3_qual, sale3_multi, sale3_bk, sale3_pg, sale3_docnum, sale3_grantor, sale3_grantee,
            sale4_amt, sale4_year, sale4_date, sale4_date_date, sale4_vac, sale4_typ, sale4_qual, sale4_multi, sale4_bk, sale4_pg, sale4_docnum, sale4_grantor, sale4_grantee,
            sale5_amt, sale5_year, sale5_date, sale5_date_date, sale5_vac, sale5_typ, sale5_qual, sale5_multi, sale5_bk, sale5_pg, sale5_docnum, sale5_grantor, sale5_grantee,
            mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot,
            assd_tot, exempt_tot, taxable_tot, homestead, tax_amt1, tax_amt2, tax_amt3,
            num_bldg, res_units, sqft_htd, sqft_tot, sqft_adj, stories, yrblt_act, yrblt_eff, num_bed, num_bath, num_bath_half, 
            luse, luse_d, lusedor, lusedor_d, zoning,
            legal_full, legal1, legal2, legal3, legal4, legal5, legal6,
            d_date, d_county, sale1q_amt, sale1q_year, sale1q_date, sale1q_date_date, d_state, owner_occupied, pin_geom, fips
            )
            
            SELECT
            ogc_fid, wkb_geometry, s_section, s_township, s_range, subdiv_id, subdiv_nm, subdiv_nm2,
            block_pin, lot_pin, block_legal, lot_legal,
            pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, upin, pin_fdor, 
            acres_deed, acres_gis,
            condo, condo_method, condo_key,
            name_misc, o_name1, o_name2, o_name3, o_address1, o_address2, o_address3, 
            o_city, o_state, o_country, o_zipcode, o_zipcode4,
            s_number, s_pdir, s_name, s_type, s_sdir, s_unit, s_address, s_city, s_zipcode, s_zipcode4,
            sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor, sale1_grantee, 
            sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum, sale2_grantor, sale2_grantee,
            sale3_amt, sale3_year, sale3_date, sale3_date_date, sale3_vac, sale3_typ, sale3_qual, sale3_multi, sale3_bk, sale3_pg, sale3_docnum, sale3_grantor, sale3_grantee,
            sale4_amt, sale4_year, sale4_date, sale4_date_date, sale4_vac, sale4_typ, sale4_qual, sale4_multi, sale4_bk, sale4_pg, sale4_docnum, sale4_grantor, sale4_grantee,
            sale5_amt, sale5_year, sale5_date, sale5_date_date, sale5_vac, sale5_typ, sale5_qual, sale5_multi, sale5_bk, sale5_pg, sale5_docnum, sale5_grantor, sale5_grantee,
            mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot,
            assd_tot, exempt_tot, taxable_tot, homestead, tax_amt1, tax_amt2, tax_amt3,
            num_bldg, res_units, sqft_htd, sqft_tot, sqft_adj, stories, yrblt_act, yrblt_eff, num_bed, num_bath, num_bath_half, 
            luse, luse_d, lusedor, lusedor_d, zoning,
            legal_full, legal1, legal2, legal3, legal4, legal5, legal6, 
            d_date, d_county, sale1q_amt, sale1q_year, sale1q_date, sale1q_date_date, d_state, owner_occupied, pin_geom, fips
            
            FROM parcels_""" + state_lower + """_""" + county_lower + """ WHERE ogc_fid is not null and wkb_geometry is not null;
            """
            
    sql_insert_parcels = """    
        INSERT INTO parcels_std_project 
            (
            ogc_fid, wkb_geometry, s_section, s_township, s_range, subdiv_id, subdiv_nm, subdiv_nm2,
            block_pin, lot_pin, block_legal, lot_legal,
            pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, upin, pin_fdor, 
            acres_deed, acres_gis,
            condo, condo_method, condo_key,
            name_misc, o_name1, o_name2, o_name3, o_address1, o_address2, o_address3, 
            o_city, o_state, o_country, o_zipcode, o_zipcode4,
            s_number, s_pdir, s_name, s_type, s_sdir, s_unit, s_address, s_city, s_zipcode, s_zipcode4,
            sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor, sale1_grantee, 
            sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum, sale2_grantor, sale2_grantee,
            sale3_amt, sale3_year, sale3_date, sale3_date_date, sale3_vac, sale3_typ, sale3_qual, sale3_multi, sale3_bk, sale3_pg, sale3_docnum, sale3_grantor, sale3_grantee,
            sale4_amt, sale4_year, sale4_date, sale4_date_date, sale4_vac, sale4_typ, sale4_qual, sale4_multi, sale4_bk, sale4_pg, sale4_docnum, sale4_grantor, sale4_grantee,
            sale5_amt, sale5_year, sale5_date, sale5_date_date, sale5_vac, sale5_typ, sale5_qual, sale5_multi, sale5_bk, sale5_pg, sale5_docnum, sale5_grantor, sale5_grantee,
            mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot,
            assd_tot, exempt_tot, taxable_tot, homestead, tax_amt1, tax_amt2, tax_amt3,
            num_bldg, res_units, sqft_htd, sqft_tot, sqft_adj, stories, yrblt_act, yrblt_eff, num_bed, num_bath, num_bath_half, 
            luse, luse_d, lusedor, lusedor_d, zoning,
            legal_full, legal1, legal2, legal3, legal4, legal5, legal6,
            d_date, d_county, sale1q_amt, sale1q_year, sale1q_date, sale1q_date_date, d_state, owner_occupied, pin_geom, fips
            )
            
            SELECT
            ogc_fid, wkb_geometry, s_section, s_township, s_range, subdiv_id, subdiv_nm, subdiv_nm2,
            block_pin, lot_pin, block_legal, lot_legal,
            pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, upin, pin_fdor, 
            acres_deed, acres_gis,
            condo, condo_method, condo_key,
            name_misc, o_name1, o_name2, o_name3, o_address1, o_address2, o_address3, 
            o_city, o_state, o_country, o_zipcode, o_zipcode4,
            s_number, s_pdir, s_name, s_type, s_sdir, s_unit, s_address, s_city, s_zipcode, s_zipcode4,
            sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor, sale1_grantee, 
            sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum, sale2_grantor, sale2_grantee,
            sale3_amt, sale3_year, sale3_date, sale3_date_date, sale3_vac, sale3_typ, sale3_qual, sale3_multi, sale3_bk, sale3_pg, sale3_docnum, sale3_grantor, sale3_grantee,
            sale4_amt, sale4_year, sale4_date, sale4_date_date, sale4_vac, sale4_typ, sale4_qual, sale4_multi, sale4_bk, sale4_pg, sale4_docnum, sale4_grantor, sale4_grantee,
            sale5_amt, sale5_year, sale5_date, sale5_date_date, sale5_vac, sale5_typ, sale5_qual, sale5_multi, sale5_bk, sale5_pg, sale5_docnum, sale5_grantor, sale5_grantee,
            mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot,
            assd_tot, exempt_tot, taxable_tot, homestead, tax_amt1, tax_amt2, tax_amt3,
            num_bldg, res_units, sqft_htd, sqft_tot, sqft_adj, stories, yrblt_act, yrblt_eff, num_bed, num_bath, num_bath_half, 
            luse, luse_d, lusedor, lusedor_d, zoning,
            legal_full, legal1, legal2, legal3, legal4, legal5, legal6, 
            d_date, d_county, sale1q_amt, sale1q_year, sale1q_date, sale1q_date_date, d_state, owner_occupied, pin_geom, fips
            
            FROM parcels_""" + state_lower + """_""" + county_lower + """ WHERE ogc_fid is not null and wkb_geometry is not null;
            """
            
    # ATTOM Data only goes into parcels_std_saunders
    if county_lower == 'a_ga_attom':

        # insert into parcels_std_saunders
        print(sql_insert_saunders)
        cursor.execute(sql_insert_saunders)
        connection.commit()
    
    else:
        
        # insert into parcels_std_project
        print(sql_insert_parcels)
        cursor.execute(sql_insert_parcels)
        connection.commit()
        
        # insert into parcels_std_saunders
        print(sql_insert_saunders)
        cursor.execute(sql_insert_saunders)
        connection.commit()


    print("##### QUERY -- ogc_fid is null ##### ")
    sql = """
    select count(*) FROM parcels_""" + state_lower + """_""" + county_lower + """ WHERE ogc_fid is null;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
       
    
    
    # close communication with the database
    cursor.close()
    connection.close()

    print('Production update for ',county_upper, ' county complete')


# ===============================================================================================
#  PARCEL DATA TABLE REPORT
#  - print some basic stats about the data for QA
#  - starting point to expand into deeper automated QA in the future
# ===============================================================================================
def table_report(county) :
    """Testing postgres connections.

    Keyword arguments:
    county -- the county

    record = cursor.fetchone()
    print record

    record = cursor.fetchall()
    for i in record: 
        print 'record: ',i[0]
        
    """
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    # REPORT parcel count
    sql = "SELECT count(*) FROM parcels_" + county + " WHERE d_county = '" + county.upper() + "' LIMIT 10"
    #print sql
    cursor.execute(sql)
    record = cursor.fetchall()
    for i in record: 
        print('\nTotal records: ',i[0])

    # REPORT last sale date
    sql = "SELECT sale1_date FROM parcels_" + county + " WHERE sale1_year = 2011 AND d_county = '" + county.upper() + "' ORDER BY sale1_date DESC LIMIT 1 "
    #print sql
    cursor.execute(sql)
    record = cursor.fetchall()
    for i in record: 
        print('\nLast sale date: ',i[0])

    # REPORT ST_SRID
    sql = "SELECT ST_srid(wkb_geometry) FROM parcels_" + county + " WHERE d_county = '" + county.upper() + "' LIMIT 1 "
    #print sql
    cursor.execute(sql)
    record = cursor.fetchall()
    for i in record: 
        print('\nST_SRID: ',i[0])        

    # REPORT pin, altkey variations
    sql = "SELECT pin, altkey FROM parcels_" + county + " WHERE d_county = '" + county.upper() + "' LIMIT 10 "
    #print sql
    cursor.execute(sql)
    record = cursor.fetchall()
    print('\nPIN \t\t ALTKEY')
    for i in record: 
        print(i[0], '\t', i[1])


    # commit the transaction
    connection.commit()

    # close communication with the database
    cursor.close()
    connection.close() 


# ===============================================================================================
#  OGRINFO on SHAPEFILE
#  - DEPENDENCIES
#       - raw SHP must exist in source_data
#       - values must be current and valid in parcel_shp_fields table
#
# ===============================================================================================  
def ogrinfo_shp(county) :

    print("----------------------------------------------------------------------")
    print("  FUNCTION ogrinfo_shp(county)")
    print("----------------------------------------------------------------------")
    
    # connect to database
    connection = psycopg2.connect(pg_connection)
    
    # arg to cursor allows selection by column name
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

    county_upper = county.upper()
    county_lower = county.lower()    

    path =  '/srv/mapwise_dev/county/' + county_lower + '/processing/vector/propapp/current'
    os.chdir(path)
    
    sql = """SELECT * FROM parcel_shp_fields WHERE county = '""" + county_upper + """';  """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # initialize variables that have info about the SHP from parcel_shp_fields
    rows = cursor.fetchall()
    for row in rows:
        print("COUNTY = ", row['county'])
        shp_name = row['shp_name']
        shp_epsg = str(row['shp_epsg'])
        shp_pin = row['shp_pin']
        shp_pin_clean = row['shp_pin_clean']
        shp_pin2 = row['shp_pin2']
        shp_pin2_clean = row['shp_pin2_clean']
        shp_altkey = row['shp_altkey']
        import_fields = row['import_fields']

        
    mycmd = "ogrinfo -so source_data/" + shp_name + " " + shp_name.replace('.shp','')
    print('Executing: ', mycmd)
    os.system(mycmd)

    # close communication with the database
    cursor.close()
    connection.close()
    return()    

# REMOVED 9/13/2020 and put into load_parcel_geometry.py
# ===============================================================================================
#  PROCESS SHAPEFILE
#  - DEPENDENCIES
#       - raw_<county>_parcels must exist in gidev on zeus
#       - values must be current and valid in parcel_shp_fields table
#
# ===============================================================================================
def process_shapefile(county, repair) :

    print("*********************************")
    print("NOW IN load_parcel_geometry.py")
    print(" ")
    print("----------------------------------------------------------------------")
    print("  FUNCTION process_shapefile(county, repair)")
    print("----------------------------------------------------------------------")


# ===============================================================================================
#  UPDATE_FMO_SETS
#   - this is needed for updating geometry in fmo_selected_sets and fmo_selected_sets_save
#   - these tables need to get current geometry from parcels_std_2010_shp_temp when the parcel geometry is updated
#   - this updates the geometry and the ogc_fids in fmo_selected_sets and fmo_selected_sets_save
#   - probably not perfect, but should do a good enough job
#   - First part handles updating fmo_selected_sets
#   - Second part handles updating fmo_selected_sets_save
#   - We are only handling aggregates for the saved sets because the fmo_selected_sets are just temporary and more used
#   - The aggregates are also bound to have problems, because when you re-run aggregates the aggregates can change quite a bit
#
# ===============================================================================================
def update_fmo_sets(county) :
    
    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()
    
    # PART 1 - Update fmo_selected_sets
    
    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp1"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp2"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # create the set of parcels that intersects the current selected set from the new geometry
    sql = """CREATE TABLE fmo_selected_sets_temp1 AS SELECT st_buffer(s1.wkb_geometry, -10) as wkb_geometry, s1.tbl_name, s1.e_created, s1.e_created_by, s1.sess_id, s1.where_str, s1.ogc_fid from fmo_selected_sets as s1, parcels_std_2010_shp_temp as p1 
        WHERE p1.d_county_orig = '""" +  county_upper + """' and s1.tbl_name = 'parcels_std_project' and st_intersects(s1.wkb_geometry, p1.wkb_geometry)
        GROUP BY s1.wkb_geometry, s1.tbl_name, s1.e_created, s1.e_created_by, s1.sess_id, s1.where_str, s1.ogc_fid;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """CREATE TABLE fmo_selected_sets_temp2 AS SELECT p1.wkb_geometry, s1.tbl_name, s1.e_created, s1.e_created_by, s1.sess_id, s1.where_str, p1.ogc_fid from fmo_selected_sets_temp1 as s1, parcels_std_2010_shp_temp as p1
        WHERE st_intersects(s1.wkb_geometry, p1.wkb_geometry) ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # delete the current selected and saved sets
    # we are using the the ogc_fids from the original selected set geometry contained in fmo_selected_sets_temp1  
    sql = """DELETE FROM fmo_selected_sets USING fmo_selected_sets_temp1
        WHERE fmo_selected_sets.ogc_fid = fmo_selected_sets_temp1.ogc_fid ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # insert the new records
    sql = """INSERT INTO fmo_selected_sets (wkb_geometry, tbl_name, e_created, e_created_by, sess_id, where_str, ogc_fid)
        SELECT wkb_geometry, tbl_name, e_created, e_created_by, sess_id, where_str, ogc_fid from fmo_selected_sets_temp2;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()

    #--------------------------------------------------------
    # PART 2 - Update fmo_selected_sets_save
    #--------------------------------------------------------
    
    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp1_save"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp2_save"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # create the set of parcels that intersects the current selected set from the new geometry
    sql = """
        CREATE TABLE fmo_selected_sets_temp1_save AS SELECT st_buffer(s1.wkb_geometry, -10) as wkb_geometry, 
            s1.set_name, s1.set_status, s1.set_category, s1.set_comments,
            s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, s1.ogc_fid 
            FROM fmo_selected_sets_save as s1, parcels_std_2010_shp_temp as p1 
        WHERE p1.d_county_orig = '""" +  county_upper + """' and s1.tbl_name = 'parcels_std_project' and 
            ST_INTERSECTS(s1.wkb_geometry, p1.wkb_geometry)
        GROUP BY s1.wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments, s1.tbl_name, s1.e_created, 
        s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, s1.ogc_fid;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """
        CREATE TABLE fmo_selected_sets_temp2_save AS 
        SELECT p1.wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments,
            s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, p1.ogc_fid 
        FROM fmo_selected_sets_temp1_save as s1, parcels_std_2010_shp_temp as p1
        WHERE ST_INTERSECTS(s1.wkb_geometry, p1.wkb_geometry) ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # delete the current selected and saved sets
    # we are using the the ogc_fids from the original selected set geometry contained in fmo_selected_sets_temp1_save
    sql = """
        DELETE FROM fmo_selected_sets_save 
        USING fmo_selected_sets_temp1_save
        WHERE fmo_selected_sets_save.ogc_fid = fmo_selected_sets_temp1_save.ogc_fid ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
 
    
    # insert the new records
    sql = """
        INSERT INTO fmo_selected_sets_save 
            (wkb_geometry, set_name, set_status, set_category, set_comments, 
            tbl_name, e_created, e_created_by, e_edited, e_edited_by, sess_id, where_str, ogc_fid)
        SELECT 
            wkb_geometry, set_name, set_status, set_category, set_comments, tbl_name, e_created, 
            e_created_by, e_edited, e_edited_by, sess_id, where_str, ogc_fid 
        FROM fmo_selected_sets_temp2_save;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #--------------------------------------------------------
    # PART 2 AGG SALES - Update fmo_selected_sets_save
    #--------------------------------------------------------
    
    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp1_save"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp2_save"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # create the set of parcels that intersects the current selected set from the new geometry
    sql = """CREATE TABLE fmo_selected_sets_temp1_save AS SELECT st_buffer(s1.wkb_geometry, -10) as wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments,
            s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, s1.ogc_fid from fmo_selected_sets_save as s1, saunders_agg_sales as p1 
        WHERE p1.d_county = '""" +  county_upper + """' and s1.tbl_name = 'saunders_agg_sales' and st_intersects(s1.wkb_geometry, p1.wkb_geometry)
        GROUP BY s1.wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments, s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, s1.ogc_fid;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """CREATE TABLE fmo_selected_sets_temp2_save AS SELECT p1.wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments,
        s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, p1.ogc_fid from fmo_selected_sets_temp1_save as s1, saunders_agg_sales as p1
        WHERE st_intersects(s1.wkb_geometry, p1.wkb_geometry) ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # delete the current selected and saved sets
    # we are using the the ogc_fids from the original selected set geometry contained in fmo_selected_sets_temp1_save
    sql = """DELETE FROM fmo_selected_sets_save USING fmo_selected_sets_temp1_save
        WHERE fmo_selected_sets_save.ogc_fid = fmo_selected_sets_temp1_save.ogc_fid ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
 
    
    # insert the new records
    sql = """INSERT INTO fmo_selected_sets_save (wkb_geometry, set_name, set_status, set_category, set_comments, tbl_name, e_created, e_created_by, e_edited, e_edited_by, sess_id, where_str, ogc_fid)
        SELECT wkb_geometry, set_name, set_status, set_category, set_comments, tbl_name, e_created, e_created_by, e_edited, e_edited_by, sess_id, where_str, ogc_fid from fmo_selected_sets_temp2_save;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #--------------------------------------------------------
    # PART 2 AGG OWNER - Update fmo_selected_sets_save
    #--------------------------------------------------------
    
    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp1_save"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # drop temp tables in gislib
    mycmd = ''.join([pg_psql,' -c "drop table fmo_selected_sets_temp2_save"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # create the set of parcels that intersects the current selected set from the new geometry
    sql = """CREATE TABLE fmo_selected_sets_temp1_save AS SELECT st_buffer(s1.wkb_geometry, -10) as wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments,
            s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, s1.ogc_fid from fmo_selected_sets_save as s1, saunders_agg_owner as p1 
        WHERE p1.d_county = '""" +  county_upper + """' and s1.tbl_name = 'saunders_agg_owner' and st_intersects(s1.wkb_geometry, p1.wkb_geometry)
        GROUP BY s1.wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments, s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, s1.ogc_fid;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """CREATE TABLE fmo_selected_sets_temp2_save AS SELECT p1.wkb_geometry, s1.set_name, s1.set_status, s1.set_category, s1.set_comments,
        s1.tbl_name, s1.e_created, s1.e_created_by, s1.e_edited, s1.e_edited_by, s1.sess_id, s1.where_str, p1.ogc_fid from fmo_selected_sets_temp1_save as s1, saunders_agg_owner as p1
        WHERE st_intersects(s1.wkb_geometry, p1.wkb_geometry) ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # delete the current selected and saved sets
    # we are using the the ogc_fids from the original selected set geometry contained in fmo_selected_sets_temp1_save
    sql = """DELETE FROM fmo_selected_sets_save USING fmo_selected_sets_temp1_save
        WHERE fmo_selected_sets_save.ogc_fid = fmo_selected_sets_temp1_save.ogc_fid ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()    
 
    
    # insert the new records
    sql = """INSERT INTO fmo_selected_sets_save (wkb_geometry, set_name, set_status, set_category, set_comments, tbl_name, e_created, e_created_by, e_edited, e_edited_by, sess_id, where_str, ogc_fid)
        SELECT wkb_geometry, set_name, set_status, set_category, set_comments, tbl_name, e_created, e_created_by, e_edited, e_edited_by, sess_id, where_str, ogc_fid from fmo_selected_sets_temp2_save;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()     
    
    
# ===============================================================================================
#  UPDATE_SHP_TEMP_GISLIB
#   - this is needed for updating geometry in fmo_selected_sets and fmo_selected_sets_save
#   - these tables need to get current geometry from parcels_std_2010_shp_temp when the parcel geometry is updated
#   - this merely updates one county of parcels_std_2010_shp_temp on gislib by copying geometry from gisdev
#
# ===============================================================================================
def update_shp_temp_gislib(county) :

    county_upper = county.upper()
    county_lower = county.lower()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    pg_connection_gisdev = 'host=localhost port=5432 dbname=gisdev user=postgres password=galactic529'
    pg_psql_gisdev = 'psql -d gisdev -U postgres '
    
    pg_connection_gislib = 'host=192.168.2.132 port=5432 dbname=gislib user=postgres password=galactic529'
    pg_psql_gislib = 'psql -h 192.168.2.132 -p 5432 -d gislib -U postgres '

    # Connect to postgres and open cursor
    connection_gisdev = psycopg2.connect(pg_connection_gisdev)
    cursor_gisdev = connection_gisdev.cursor()

    connection_gislib = psycopg2.connect(pg_connection_gislib)
    cursor_gislib = connection_gislib.cursor()

    # drop temp table in gisdev
    mycmd = ''.join([pg_psql_gisdev,' -c "drop table temp_parcel_geom"'])
    print('Executing: ', mycmd)
    os.system(mycmd)

    # drop temp table in gislib
    mycmd = ''.join([pg_psql_gislib,' -c "drop table temp_parcel_geom"'])
    print('Executing: ', mycmd)
    os.system(mycmd)    
    
    # create a temp table for the county geom
    sql = """CREATE TABLE temp_parcel_geom AS SELECT * FROM parcels_std_2010_shp_temp WHERE d_county_orig = '""" + county_upper + """'"""
    print(sql)
    cursor_gisdev.execute(sql)
    connection_gisdev.commit()
        
    # make a backup of the county
    mycmd = 'pg_dump --host localhost --username postgres --format custom --verbose --file "M:\\backups\\zeus\\postgres\\gislib\\temp_parcel_geom.backup" --table "public.temp_parcel_geom" gisdev'
    print('Executing: ', mycmd)
    os.system(mycmd) 
    
    # restore the backup in gislib
    mycmd = 'pg_restore --host localhost -U postgres -d gislib -v "M:\\backups\\zeus\\postgres\\gislib\\temp_parcel_geom.backup" '
    print('Executing: ', mycmd)
    os.system(mycmd)
   
    
    # replace the geometry
    sql = """DELETE FROM parcels_std_2010_shp_temp WHERE d_county_orig = '""" + county_upper + """';"""
    print(sql)
    cursor_gislib.execute(sql)
    connection_gislib.commit()

    sql = """INSERT INTO parcels_std_2010_shp_temp SELECT * FROM temp_parcel_geom;"""
    print(sql)
    cursor_gislib.execute(sql)
    connection_gislib.commit()    
    
    # drop temp table in gisdev
    #mycmd = ''.join([pg_psql_gisdev,' -c "drop table temp_parcel_geom"'])
    #print 'Executing: ', mycmd
    #os.system(mycmd)

    # drop temp table in gislib
    mycmd = ''.join([pg_psql_gislib,' -c "drop table temp_parcel_geom"'])
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    # remove the temp backup    


    # close communication with the database
    cursor_gislib.close()
    connection_gislib.close()

    cursor_gisdev.close()
    connection_gisdev.close()   
    
# ===============================================================================================
#  EXPORT SHAPEFILE helper function
# ===============================================================================================
def shp_rewind(file) :
    # run shprewind on it

    mycmd = "rm " + file + "_old.*"
    os.system(mycmd)
    
    mycmd = "rm " + file + "_rewind.*"
    os.system(mycmd)

    # Utility to validate and reset the winding order of rings in polygon geometries to match the ordering required by spec.
    # Helps ArcGIS deal with shapefiles output from postgis
    # Only outputs new shp and shx
    mycmd = "shprewind " + file + " " + file + "_rewind"
    print('Executing: ', mycmd)
    os.system(mycmd)
    
    mycmd = "mv " + file + ".shp " + file + "_old.shp"
    os.system(mycmd)
    
    mycmd = "mv " + file + ".shx " + file + "_old.shx"
    os.system(mycmd)
    
    mycmd = "mv " + file + "_rewind.shp " + file + ".shp"
    os.system(mycmd)
    
    mycmd = "mv " + file + "_rewind.shx " + file + ".shx"
    os.system(mycmd)
	
# ===============================================================================================
#  EXPORT SHAPEFILE
#  - DEPENDENCIES
#       - raw_<county>_parcels must exist in gidev on plato
#       - values must be current and valid in parcel_shp_fields table
#       - county must be in parcels_std_project table in plato
#
#   this must be a two step process for stacked counties
#
#   STEP) Read config info from parcel_shp_fields.
#   STEP) DROP existing parcels_export_<county>
#   STEP) CREATE TABLE parcels_export_<county> from existing parcels_std_project
#   STEP) ADD COLUMN geometry2 to parcels_export_<county>
#   STEP) If needed, define pin columns and processing needed to match raw native geom with parcels_std_project.
#   STEP) UPDATE geometry2 geometry from native where there is a match between native pin and parcels_export_<county>
#       use ST_Multi(ST_Union(wkb_geometry)) to match handling of geometry in parcels_std_project.
#   STEP) UPDATE geometry2 geometry to match partial pins like we do in load join to fill in condo geom.
#   STEP) Use same partial pin matching code from there.
#   STEP) Export
#
#   QA
#   STEP) Check wkb_geometry2 for null records 
#               select count(*) from parcels_export_collier where wkb_geometry2 is null
#         and check counts between wkb_geometry2 and wkb_geometry in parcels_export_<county>
#               select count(*) from parcels_export_collier where wkb_geometry is not null -- 284943
#               select count(*) from parcels_export_collier where wkb_geometry2 is not null -- 262924 -- difference is 22019
#               select count(*) from parcels_export_collier where wkb_geometry is not null AND lusedor = '04' -- 99495 (same as number of condos select count(*) from parcels_export_collier where lusedor = '04')
#               select count(*) from parcels_export_collier where wkb_geometry2 is not null AND lusedor = '04' -- 79706 -- difference is 19789
#               -- so in this case, 19789 condo records are missing geometry2 info - why?
#   STEP) Make sure heated sq ft is correct, if its there and adjusted sqft is accounted for if its there.
#   STEP) Open table and quick review for info in fields.
#   STEP) Open parcels_std.shp and display against parcles_std_project - check for holes / missing polygons.
#   STEP) Make sure condos were accounted for - do an identify on a condo polygon to see the records (for stacked condos).
#   STEP) Make sure all possible valuation values are there.
#   STEP) Make sure land use fdor is handled properly.
#   STEP) The county will have to be accounted for in a special section of the code if it hasn't been done before - both pin and condo issues.
#
# ===============================================================================================
def export_shapefile(county) :

    print("----------------------------------------------------------------------")
    print("  FUNCTION export_shapefile(county)")
    print("----------------------------------------------------------------------")
    
    # connect to database
    connection = psycopg2.connect(pg_connection)
    
    # arg to cursor allows selection by column name
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()

    
    path =  '/srv/mapwise_dev/county/' + county_lower + '/processing/vector/propapp/current'
    os.chdir(path)    
    
    # 5/17/24 - Must search on FL or things fall apart
    # TODO: Add state argument
    sql = """SELECT * FROM parcel_shp_fields WHERE county = '""" + county_upper + """' and state = 'FL';  """
    print(sql)
    cursor.execute(sql)

    # initialize variables that have info about the SHP from parcel_shp_fields
    rows = cursor.fetchall()
    for row in rows:
        print("COUNTY = ", row['county'])
        shp_name = row['shp_name']
        shp_pin = row['shp_pin']
        shp_pin_clean = row['shp_pin_clean']
        shp_pin2 = row['shp_pin2']
        shp_pin2_clean = row['shp_pin2_clean']
        shp_altkey = row['shp_altkey']
        shp_epsg = row['shp_epsg']


    # drop existing table
    mycmd = pg_psql + """ -c 'DROP TABLE temp.parcels_export_""" + county_lower + """' ;"""
    print('Executing: ', mycmd)
    os.system(mycmd)    

    # CREATE parcels_export_<county>
    sql = """CREATE TABLE temp.parcels_export_""" + county_lower + """ AS SELECT * from parcels_std_project WHERE d_county = '""" + county_upper + """'; """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """ALTER TABLE temp.parcels_export_""" + county_lower + """ ADD COLUMN wkb_geometry2 geometry(Geometry, """ + str(shp_epsg) + """);"""
    print(sql)
    cursor.execute(sql)
    connection.commit()        

    # ASSUME shp_pin matches taxroll_pin, unless otherwise noted as an exception per county(?)
    # s.parcelno = p.pin    

    # Note need to bring in raw geometry as multi-polygons to match the multi-poly treatment of processed parcels
    
    # LAKE
    if (county_upper in ['CITRUS','LAKE']) :
        join_clause = "s." + shp_altkey + " = p.altkey"
        from_clause = """(SELECT """ + shp_altkey + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_altkey + """) as s"""

    # COLLIER - using pin2, which includes the condo_key pins        
    elif (county_upper in ['COLLIER']) :
        join_clause = "s." + shp_pin + " = p.pin"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""

    # HERNANDO PIN has spaces in it
    elif (county_upper in ['HERNANDO']) :
        join_clause = "replace(s." + shp_pin + ", ' ', '') = p.pin2"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""
        
    # HENDRY PIN has spaces in it
    # The pin in parcels_std_project is clean
    # pin in basemap.shp has dots and dashes in it
    # NAL file missing some records - assuming these are confidential
    # the following replaces spaces, dashes, dots
    # regexp_replace(pin, '( ){1,}|(-){1,}|(\.){1,}','','g')
    elif (county_upper in ['HENDRY']) :
        #join_clause = "s." + shp_pin + " = replace(p.pin, ' ', '')"
        join_clause = "regexp_replace(s." + shp_pin + ", '( ){1,}|(-){1,}|(\.){1,}','','g') = p.pin_clean"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""
        
    elif (county_upper in ['MANATEE']) :
        join_clause = "s." + shp_pin + " = p.pin_clean"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""

    elif (county_upper in ['SANTA_ROSA']) :
        join_clause = "s." + shp_pin + " = p.pin_clean"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""
        
    # MARION PIN - remove dashes
    elif (county_upper in ['MARION']) :
        #join_clause = "replace(replace(s." + shp_pin + ", '-', ''), '+','') = p.pin"
        join_clause = "s." + shp_pin + " = p.pin"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""

    # MARTIN PIN - substring pin to match
    elif (county_upper in ['MARTIN']) :
        join_clause = "substr(s." + shp_pin_clean + ",1,18) = p.pin_clean"
        from_clause = """(SELECT substr(""" + shp_pin_clean + """,1,18) as pcn,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY substr(""" + shp_pin_clean + """,1,18)) as s"""
        
    # ORANGE        
    elif (county_upper in ['ORANGE']) :
        join_clause = "s." + shp_pin + " = p.pin_clean"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""

    # PASCO 
    elif (county_upper in ['PASCO']) :
        join_clause = "s." + shp_pin + " = p.pin"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""

    # PINELLAS 
    elif (county_upper in ['PINELLAS']) :
        join_clause = "replace(s." + shp_pin + ", ' ', '') = p.pin"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""        

    elif (county_upper in ['ST_JOHNS']) :
        join_clause = "s." + shp_pin + " = p.pin_clean"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry,condo FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """,condo) as s"""
        
    elif (county_upper in ['BREVARD','VOLUSIA']) :
        join_clause = "CAST(s." + shp_altkey + " as text) = p.altkey"
        from_clause = """(SELECT """ + shp_altkey + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_altkey + """) as s"""
        
    else :
        join_clause = "s." + shp_pin + " = p.pin"
        from_clause = """(SELECT """ + shp_pin + """,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_""" + county_lower + """_parcels GROUP BY """ + shp_pin + """) as s"""

    # Add native SHP geom to wkb_geometry2
    # FROM raw_fl_""" + county_lower + """_parcels as s
    # FROM (SELECT parid,ST_Multi(ST_Union(wkb_geometry)) as wkb_geometry FROM raw_fl_palm_beach_parcels GROUP BY parid) as s 
    sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p
        SET wkb_geometry2 = s.wkb_geometry
        FROM """ + from_clause + """
        WHERE  """ + join_clause + """
    ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # fill in geom for stacked condos that are a partial match
    # NOTE HAVE TO MAKE A SHP PIN TO USE WITH EXPORT
    if (county_upper in ['BREVARD']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,17) = substr(s.""" + shp_pin + """,1,17);""" 
        print(sql)
        cursor.execute(sql)
        connection.commit()       


    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['BROWARD']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,8) = substr(s.""" + shp_pin + """,1,8);""" 
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['COLLIER']) :
        shp_pin + " = p.pin2"
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and p.condo_key = trim(leading '0' from s.""" + shp_pin + """);"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        #UPDATE parcels_collier as p SET
        #    wkb_geometry = st_transform(s.wkb_geometry, 32767)
        #    FROM parcels_collier_shp_temp as s 
        #    WHERE p.wkb_geometry is null and p.condo_key = trim(leading '0' from s.pin_orig);"""
        
    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['INDIAN_RIVER']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,11) = substr(s.""" + shp_pin + """,1,11);""" 
        print(sql)
        cursor.execute(sql)
        connection.commit()        

    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['MARTIN']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin_clean,1,9) = substr(s.""" + shp_pin_clean + """,1,9);"""        
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['MIAMI-DADE']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,9) = substr(s.""" + shp_pin + """,1,9);"""        
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['PALM_BEACH']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,10) = substr(s.""" + shp_pin + """,1,10);"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['SARASOTA']) :

        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and p.condo_key = s.""" + shp_altkey + """;"""
        # CHANGE altkey to pin_clean after we make that change!
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['ST_JOHNS']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,4) = substr(s.""" + shp_pin + """,1,4) and p.subdiv_id = s.condo;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # ST_JOHNS - extra query needed to pick up some condos
    if (county_upper == 'ST_JOHNS') :

        # need to join shp table to parcel table to get the subdiv ids        
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM (raw_fl_""" + county_lower + """_parcels as a LEFT JOIN parcels_template_st_johns as b on a.""" + shp_pin + """ = b.pin) as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,5) = substr(s.""" + shp_pin + """,1,5) AND 
            s.subdiv_id = p.subdiv_id AND
            s.lusedor = '09';"""
        #print sql
        #cursor.execute(sql)
        #connection.commit()

    # fill in geom for stacked condos that are a partial match
    if (county_upper in ['ST_LUCIE']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin,1,8) = substr(s.""" + shp_pin + """,1,8);"""
        print(sql)
        cursor.execute(sql)
        connection.commit()

    # volusia 
    if (county_upper in ['VOLUSIA']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin2,1,6) = substr(s.pid,1,6) and st_area(s.wkb_geometry) > 2000;"""
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
    # get the next round not using a spatial size so we can get small guys
    if (county_upper in ['VOLUSIA']) :
        sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p 
        SET
        wkb_geometry2 = s.wkb_geometry
        FROM raw_fl_""" + county_lower + """_parcels as s
        WHERE p.wkb_geometry2 is null and substr(p.pin2,1,6) = substr(s.pid,1,6) and p.lusedor IN ('04');"""
        print(sql)
        cursor.execute(sql)
        connection.commit()


    # fill in geom and attributes for parcels missing in allparcels but in shapefile
    if (county_upper in ['ORANGE']) :
        mycmd = 'ogr2ogr -overwrite -a_srs "EPSG:2881" -skipfailures -select "PARCEL, NAME1, NAME2, PROP_NAME, SUBTYPE, TYPE_CODE, FLOOR_NO, CITY_CODE, MILL_CODE, DOR_CODE, EXEMPT_COD, NBHD_CODE, CONDO_FLAG, FEAT_CODE, CONDO_VAL, LAND_MKT, BLDG_MKT, XFOB_MKT, TOTAL_MKT, TOTAL_ASSD, TOTAL_XMPT, TAXABLE, TAXES, TOTAL_LAND, STR_NUM, FRACTION, PRE_TYPE, PRE_DIR, STR_NAME, POST_TYPE, POST_DIR, UNIT_TYPE, UNIT_NUM, SITUS, ZIP_SITUS, STYS, BATH, BEDS, LIVING_ARE, ACREAGE, ACRE_CODE, POOL, MKTIDX, AYB, EYB, SALE_DATE, SALE_ADJ_V, QUAL_CODE, ADD1, ADD2, ADD3, ADD4, CITY, STATE, ZIP, ZIP4, COUNTRY, LAND_LINE_, LAND_DOR_C, ZONING_COD, LAND_QTY_C, LAND_QTY, LAND_UNIT_, LAND_UNIT1, CLASSIFIED, PYASSESSED, PYJUST_VAL, PYTAXABLE_, JUST_CHANG, CRA_CODE, DOR_CODE_O, PARENT_ID, BLDG_DOR_C, CITY_SITUS" -nlt GEOMETRY -f "PostgreSQL" PG:"user=postgres dbname=gisdev host=localhost port=5432 password=galactic529" -nln temp.parcels_orange_full_raw PARCELS.shp'
        print(mycmd)
        #os.system(mycmd)
    
        sql = """INSERT INTO temp.parcels_export_orange (ogc_fid, wkb_geometry2, pin_clean, o_name1, o_name2, luse,
            s_number, s_pdir, s_name, s_type, s_sdir, s_unit, s_address, s_zipcode,
            sqft_htd, yrblt_act, yrblt_eff, sale1_date, sale1_amt, sale1_qual,
            o_address1, o_address2, o_address3, o_city, o_state, o_zipcode, o_zipcode4, o_country, s_city,
            mrkt_lnd, mrkt_bld, mrkt_impr, mrkt_tot, assd_tot, taxable_tot)

        SELECT r.ogc_fid, r.wkb_geometry, r.parcel, r.name1, r.name2, r.dor_code,
            r.str_num, r.pre_dir, r.str_name, r.post_type, r.post_dir, r.unit_num, r.situs, r.zip_situs,
            r.living_are, r.ayb, r.eyb, r.sale_date, r.sale_adj_v, r.qual_code,
            r.add1, r.add2, r.add3, r.city, r.state, r.zip, r.zip4, r.country, r.city_situs,
            r.land_mkt, r.bldg_mkt, r.xfob_mkt, r.total_mkt, r.total_assd, r.taxable
        
        FROM temp.parcels_orange_full_raw as r LEFT JOIN temp.parcels_export_orange as e ON r.parcel = e.pin_clean 
        WHERE e.pin_clean is null;""" 
        print(sql)
        cursor.execute(sql)
        connection.commit()

    #    feat_code, condo_val,      total_xmpt, , taxes, total_land, 
    #    unit_type,    stys, bath, beds,  acreage, 
    #    pool, mktidx,   add4,  land_dor_c,
    #   zoning_cod, classified, pyassessed, pyjust_val, pytaxable_, just_chang, dor_code_o,
    #         


    # fix st_geometrytype = ST_GeometryCollection issues
    sql = """UPDATE temp.parcels_export_""" + county_lower + """ as p SET wkb_geometry2 = ST_Buffer(wkb_geometry2,0.0) where st_geometrytype(wkb_geometry2) = 'ST_GeometryCollection' ;"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # Create Indexes
    sql = """CREATE INDEX ix_exp_""" + county_lower + """_wkb_geometry ON temp.parcels_export_""" + county_lower + """ USING gist (wkb_geometry );"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """CREATE INDEX ix_exp_""" + county_lower + """2_wkb_geometry ON temp.parcels_export_""" + county_lower + """ USING gist (wkb_geometry2 );"""
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """ALTER TABLE temp.parcels_export_""" + county_lower + """ ADD CONSTRAINT parcels_export_""" + county_lower + """_pk PRIMARY KEY(ogc_fid );""" 
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    #command_1 = '/usr/lib/postgresql/9.1/bin/pgsql2shp -f '
    #command_1 = '/home/bmay/src/postgis/postgis-2.4.8/loader/pgsql2shp -f '
    command_1 = '/home/bmay/src/postgis/postgis-2.5.5/loader/pgsql2shp -f '
    command_2 = ' -g wkb_geometry2 -u postgres gisdev "'
    
    select = "SELECT p.wkb_geometry2, p.s_section::int, p.s_township::char(3), p.s_range::char(3), p.subdiv_id::char(10), p.subdiv_nm::char(70), p.block_pin::char(10), p.lot_pin::char(10), p.pin::char(50), p.pin2::char(50), p.altkey::char(30), p.acres_deed, p.acres_gis, p.condo::char(3),p.condo_key::char(50),  p.name_misc::char(40), p.o_name1::char(100), p.o_name2::char(100), p.o_name3::char(100), p.o_address1::char(100), p.o_address2::char(100), p.o_address3::char(100), p.o_city::char(50), p.o_state::char(40), p.o_country::char(40), p.o_zipcode::char(10), p.o_zipcode4::char(4), p.s_number::char(10), p.s_pdir::char(10), p.s_name::char(50), p.s_type::char(10), p.s_sdir::char(10), p.s_unit::char(10), p.s_address::char(100), p.s_city::char(50), p.s_zipcode::char(10), p.sale1_amt, p.sale1_year, p.sale1_date, p.sale1_vac::char(10), p.sale1_typ::char(30), p.sale1_qual::char(30), p.sale1_bk::char(10), p.sale1_pg::char(10), p.sale1_docnum::char(10), p.sale1_grantor::char(50) as sale1_grtr, p.sale1_grantee::char(50) as sale1_grte, p.sale2_amt, p.sale2_year, p.sale2_date, p.sale2_vac::char(10), p.sale2_typ::char(30), p.sale2_qual::char(30), p.sale2_bk::char(10), p.sale2_pg::char(10), p.sale2_docnum::char(10), p.sale2_grantor::char(50) as sale2_grtr, p.sale2_grantee::char(50) as sale2_grte, p.sale3_amt, p.sale3_year, p.sale3_date, p.sale3_vac::char(10), p.sale3_typ::char(30), p.sale3_qual::char(30),p.sale3_bk::char(10), p.sale3_pg::char(10), p.sale3_docnum::char(10), p.sale3_grantor::char(50) as sale3_grtr, p.sale3_grantee::char(50) as sale3_grte, p.sale4_amt, p.sale4_year, p.sale4_date, p.sale4_vac::char(10), p.sale4_typ::char(30), p.sale4_qual::char(30),p.sale4_bk::char(10), p.sale4_pg::char(10), p.sale4_docnum::char(10), p.sale4_grantor::char(50) as sale4_grtr, p.sale4_grantee::char(50) as sale4_grte, p.sale5_amt, p.sale5_year, p.sale5_date, p.sale5_vac::char(10), p.sale5_typ::char(30), p.sale5_qual::char(30),p.sale5_bk::char(10), p.sale5_pg::char(10), p.sale5_docnum::char(10), p.sale5_grantor::char(50) as sale5_grtr, p.sale5_grantee::char(50) as sale5_grte, p.mrkt_bld, p.mrkt_impr, p.mrkt_lnd, p.mrkt_ag, p.mrkt_tot, p.assd_tot, p.exempt_tot, p.taxable_tot, p.homestead, p.num_bldg, p.sqft_htd, p.sqft_tot, p.sqft_adj, p.stories, p.yrblt_act, p.yrblt_eff, p.num_bed, p.num_bath, p.luse::char(10), p.luse_d::char(40), p.lusedor::char(10), p.lusedor_d::char(40), p.zoning::char(30), p.legal1::char(254), p.legal2::char(254), p.legal3::char(254), p.legal4::char(254), p.legal5::char(254), p.legal6::char(254), p.d_date::char(10), p.d_county::char(20), p.sale1q_amt, p.sale1q_year, p.sale1q_date::char(10)"
        
    if (county_upper in ['BROWARD','MIAMI-DADE','PALM_BEACH']) :
         
        #mycmd = """ FROM raw_fl_""" + county_lower + """_parcels as s LEFT OUTER JOIN parcels_""" + county_lower + """ as p ON """ + join_clause + """ " """

        out_file = 'parcels_std.shp'
        mycmd = command_1 + out_file + command_2 + select + """ FROM temp.parcels_export_""" + county_lower + """ as p WHERE lusedor NOT IN ('04','01') OR lusedor is null" """
        print('Executing: ', mycmd)
        os.system(mycmd) 
        
        #old = select + """  FROM raw_fl_""" + county_lower + """_parcels as s LEFT OUTER JOIN parcels_""" + county_lower + """ as p ON """ + join_clause + """ " """

        out_file = 'parcels_std_luse01.shp'
        mycmd = command_1 + out_file + command_2 + select + """  FROM temp.parcels_export_""" + county_lower + """ as p WHERE lusedor = '01'  " """
        print('Executing: ', mycmd)
        os.system(mycmd) 
        
        out_file = 'parcels_std_luse04.shp'
        mycmd = command_1 + out_file + command_2 + select + """  FROM temp.parcels_export_""" + county_lower + """ as p WHERE lusedor = '04'  " """
        print('Executing: ', mycmd)
        os.system(mycmd)        

    else:
        
        out_file = 'parcels_std.shp'
        
        # what exactly is this doing?
        #mycmd = select +  FROM raw_fl_""" + county_lower + """_parcels as s LEFT OUTER JOIN parcels_""" + county_lower + """ as p ON """ + join_clause + """ " """

        # export wkb_geometry2
        #mycmd = select +  FROM temp.parcels_export_""" + county_lower + """ as p " """

        # export wkb_geometry
        mycmd = command_1 + out_file + command_2 + select + ' FROM temp.parcels_export_' + county_lower + ' as p ' + """  WHERE st_geometrytype(wkb_geometry) = 'ST_MultiPolygon' " """
        
        #mycmd = """/usr/lib/postgresql/9.1/bin/pgsql2shp -f parcels_std -u postgres gisdev 'SELECT p.wkb_geometry, p.s_section::int, p.s_township::char(3), p.s_range::char(3), p.subdiv_id::char(10) FROM temp.parcels_export_""" + county_lower + """ as p ' """

        print('Executing: ', mycmd)
        os.system(mycmd)
        
        #mycmd = select +  FROM a_parcels_tmp as q full outer join parcels_export_manatee as p on q.pin = p.pin where q.pin is null  " " """
        #print 'Executing: ', mycmd
        #os.system(mycmd)

        # This exports a small subset of polygons that screwed up for whatever reason
        # manually edit this as needed
        if (county_upper in ['LEE']) :
                
                #mycmd = select +  FROM raw_fl_""" + county_lower + """_parcels as s LEFT OUTER JOIN parcels_""" + county_lower + """ as p ON """ + join_clause + """ " """
                mycmd = mycmd = command_1 + out_file + ".shp" + command_2 + select + """ FROM temp.parcels_export_""" + county_lower + """ as p WHERE pin IN ('36472600000020010', '36472600000020040', '36472600000020050', '36472600000020090', '36472600000020100', '36472600000020110', '36472600000020140', '36472600000020150', '36472600000020170', '36472600000020180', '36472600000030000', '3647260000003005A', '36472600000030080', '36472600000030130', '36472600000030140', '36472600000030180', '36472600000030190', '36472600000040010', '36472600000040030', '36472600000040040', '36472600000040060', '36472600000040080', '36472600000040110', '3647260000004011A', '36472600000040120', '3647260000004012A', '36472600000040200', '36472600000020000', '36472600000010080')" """
                print('Executing: ', mycmd)
                os.system(mycmd)

                #exit()                

    # run shprewind on it
    shp_rewind('parcels_std')

    # create a spatial index on it
    mycmd = "/srv/tools/python/lib/add_shapefile_index.py parcels_std.shp"
    #os.system(mycmd)

    # create one for qgis as well
    mycmd = "shptree parcels_std.shp"
    os.system(mycmd)

    # remove existing zip file 
    mycmd = "rm parcels_" + county_lower + ".zip"
    os.system(mycmd)
   
    mycmd = "zip parcels_" + county_lower + ".zip parcels_std.*"
    os.system(mycmd)

    # do it again for the big counties that have a secondary shp

    if (county_upper in ['BROWARD','MIAMI-DADE','PALM_BEACH']) :
        
        # run shprewind on it
        shp_rewind('parcels_std_luse01')
        
        shp_rewind('parcels_std_luse04')

        # create a spatial index on it
        mycmd = "/srv/tools/python/lib/add_shapefile_index.py parcels_std2.shp"
        #os.system(mycmd)

        # create one for qgis as well
        mycmd = "shptree parcels_std_luse01.shp"
        os.system(mycmd)
        
        mycmd = "shptree parcels_std_luse04.shp"
        os.system(mycmd)
 
        mycmd = "rm parcels_" + county_lower + "_luse01.zip"
        os.system(mycmd)
        
        mycmd = "zip parcels_" + county_lower + "_luse01.zip parcels_std_luse01.*"
        os.system(mycmd)
        
        mycmd = "rm parcels_" + county_lower + "_luse04.zip"
        os.system(mycmd)
        
        mycmd = "zip parcels_" + county_lower + "_luse04.zip parcels_std_luse04.*"
        os.system(mycmd)
    
    # close communication with the database
    cursor.close()
    connection.close()
    return()

    print('Shapefile Export processing for ',county, ' county complete')
    




# ===============================================================================================
#  UPDATE WATCH LIST TABLE
# ===============================================================================================
def update_watch_list(county) :
    """
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_watch_list(county)")
    print("----------------------------------------------------------------------")
    
    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'

    now = datetime.datetime.now()

    # copy previous prcl_data_date into prcl_data_date_prev
    # copy previous chg_last_check into chg_last_check_prev
    sql = """UPDATE saunders_watch_list as w
            SET
                prcl_data_date_prev = prcl_data_date,
                chg_last_check_prev = chg_last_check
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """'
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # sets last check date    
    sql = """UPDATE saunders_watch_list
            SET
                chg_last_check = '""" + str(now)[:10] + """'
        WHERE county = '""" + county_upper + """'
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    
    # this resets the stats
    # set parcel data date
    sql = """UPDATE saunders_watch_list as w
            SET
                chg_type_prev = chg_type,
                chg_date_prev = chg_date
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and chg_type != 'NONE'
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """UPDATE saunders_watch_list as w
            SET
                chg_type = 'NONE',
                chg_date = null,
                prcl_data_date = p.d_date
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """'
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # this gets owner name changes
    # first have to set the current owner value to previous value
    sql = """UPDATE saunders_watch_list as w
            SET
                o_name1_prev = w.o_name1
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and p.o_name1 != w.o_name1
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # this gets owner name changes
    # then update the o_name1 value to current parcel value
    sql = """UPDATE saunders_watch_list as w
            SET
                o_name1 = p.o_name1,
                chg_date = '""" + str(now)[:10] + """',
                chg_type = 'O_NAME_CHANGE'
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and p.o_name1 != w.o_name1
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # this gets owner mail changes
    # first set current info to previous columns
    sql = """UPDATE saunders_watch_list as w
            SET
                o_address1_prev = w.o_address1,
                o_city_prev = w.o_city,
                o_state_prev = w.o_state,
                o_zipcode_prev = w.o_zipcode
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and p.o_address1 != w.o_address1
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # this gets owner mail changes
    # then get the new o_address info
    sql = """UPDATE saunders_watch_list as w
            SET
                o_address1 = p.o_address1,
                o_city = p.o_city,
                o_state = p.o_state,
                o_zipcode = p.o_zipcode,
                chg_date = '""" + str(now)[:10] + """',
                chg_type = 'O_ADDRESS_CHANGE'
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and p.o_address1 != w.o_address1
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # this gets sale changes
    # this can pick up false positives if the sale date format changed
    # first set previous columns to before info
    sql = """UPDATE saunders_watch_list as w
            SET
                sale1_date = w.sale1_date,
                sale1_amt = w.sale1_amt
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and p.sale1_date != w.sale1_date
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # this gets sale changes
    # this can pick up false positives if the sale date format changed
    # next set the columns to new info
    sql = """UPDATE saunders_watch_list as w
            SET
                sale1_date = p.sale1_date,
                sale1_amt = p.sale1_amt,
                chg_date = '""" + str(now)[:10] + """',
                chg_type = 'SALE_CHANGE'
            FROM parcels_std_project as p
        WHERE p.pin = w.pin and w.county = '""" + county_upper + """' and p.sale1_date != w.sale1_date
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    
    
    
    # close communication with the database
    cursor.close()
    connection.close()

    # run php file to email people changes
    #mycmd = 'php c:\\ms4w_wms1\\apps\\saunders\\htdocs\\fmo_watch_list_email.php' + county_lower
    #print mycmd
    #os.system(mycmd)
    
    print('Watch List updates for ',county, ' county complete')


		
# ===============================================================================================
#  # 11/19/2023 - now deprecated, switching to splitting this into separate
#  mapwise and saunders versions. 
#  UPDATE SAUNDERS AGGREGATE TABLES
#  - delete existing data and insert new data from parcels_<county>
# ===============================================================================================
def update_agg_tables(state,county) :
    """delete existing data and insert new data from parcels_<county>.
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_agg_tables(state, county)")
    print("----------------------------------------------------------------------")
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county = county.upper()
    
    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()
    if county_lower == 'miami-dade' :
        county_lower = 'miami_dade'
        
    # if state is empty, we are assuming FL
    if len(state) == 0:
        state = 'FL'
        print('NO STATE')
        #exit()
        
    if county_upper == 'A_GA_ATTOM':
        state = 'GA'    
    
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()

    # Delete existing parcels
    print('\nUPDATING ',state,county, 'aggregate tables......')
    

    # some counties now throw the error 
    #   -- GEOSUnaryUnion: TopologyException: found non-noded intersection between LINESTRING 
    # so, use alternate ST_Union
    # TODO: Double-check if this is happening with other counties
    # Decide if we should just assume there may be errors and do the "makevalid" trick anyway
    # and double-check that we shoul dbe going with makevalid vs this older "hack"
    if county_upper in ['BAY','BROWARD','HILLSBOROUGH','HOLMES','JACKSON','ST_JOHNS','ST_LUCIE','SUMTER'] :
        st_union_sql = "ST_UNION(ST_BuildArea(ST_Boundary(wkb_geometry))) as wkb_geometry"
    else :
        st_union_sql = "ST_UNION(wkb_geometry) as wkb_geometry"
        
    sql = """--################################################################
    -- SALES AGGREGATE - 

    set work_mem = '3500MB';
    DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """';
    ;
    -- keeping this here to deal with counties that haven;t had state included yet.
    DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """';
    ;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # 3/28/2023 -- Set minimum acre size to 0.1
    # REMEMBER - Any sales that are represented by zeros are getting aggregfated to a random owner.
    # SO, we need to make sure that all sale1_bk, sale1_pg and sale1_docnum are null instead of 
    #   something like 0000 or 000
    # Added some extra sql logic, but we need to make sure all sales processing code produces clean data.
    # TODO: 9/27/23 - review the query syntax - why are we using min(o_name2), etc?
    # Shouldn't we be using some kind of DISTINCT query that includes
    # o_name1, o_name2, o_address1, etc?
    # Like we want distinct versions of that
    #   vs owner name is distinct, but addresses can be different?
    # We should probably explain all of the logic in a separate doc.
    # Go through all sections of parcels_convert.py and explain the various sections
    #   where more than basic logic is used to explain why we are doing things certain ways, etc.
    sql = """
    set enable_hashagg to off;
    INSERT INTO saunders_agg_sales 
        (wkb_geometry, acres_gis, parcels_num, pin_arr,
        o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country,
        s_address, s_city, s_zipcode,
        sale1_date, sale1_amt, sale1_typ, sale1_vac, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor,
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, 
        mrkt_bld_arr, mrkt_impr_arr, mrkt_lnd_arr, mrkt_ag_arr, mrkt_tot_arr, 
        sqft_htd_sum, sqft_tot_sum, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        d_date, d_county, d_state)
    SELECT 
        """ + st_union_sql + """, 
        round(SUM(ST_AREA(wkb_geometry)) / 4046.85642) AS acres_gis,
        count(pin) as parcels_num,
        array_agg(pin) as pin_arr,
        min(o_name1), 
        min(o_name2),
        min(o_address1),
        min(o_address2),
        min(o_city),
        min(o_state),
        min(o_zipcode),
        min(o_country),
        min(s_address),
        min(s_city),
        min(s_zipcode),
        CAST(sale1_date as date),
        max(sale1_amt) as sale1_amt,
        max(sale1_typ) as sale1_typ,
        max(sale1_vac) as sale1_vac,
        sale1_bk, 
        sale1_pg,
        sale1_docnum,
        max(sale1_grantor) as sale1_grantor,
        sum(mrkt_bld) as mrkt_bld_sum,
        sum(mrkt_impr) as mrkt_impr_sum,
        sum(mrkt_lnd) as mrkt_lnd_sum,
        sum(mrkt_ag) as mrkt_ag_sum,
        sum(mrkt_tot) as mrkt_tot_sum,
        array_agg(mrkt_bld) as mrkt_bld_arr,
        array_agg(mrkt_impr) as mrkt_impr_arr,
        array_agg(mrkt_lnd) as mrkt_lnd_arr,
        array_agg(mrkt_ag) as mrkt_ag_arr,
        array_agg(mrkt_tot) as mrkt_tot_arr,
        sum(sqft_htd) as sqft_htd_sum,
        sum(sqft_tot) as sqft_tot_sum,
        array_agg(luse) as luse_arr,
        array_agg(luse_d) as luse_d_arr,
        array_agg(lusedor) as lusedor_arr,
        array_agg(lusedor_d) as lusedor_d_arr,
        array_agg(zoning) as zoning_arr,
        min(d_date),
        min(d_county),
        min(d_state)
    FROM 
        -- DISTINCT added to handle duplicate stacked polygons that are not condos, e.g. alachua, GEOSUnaryUnion: TopologyException: no outgoing dirEdge found at 5...
        (select DISTINCT ON (wkb_geometry) * from parcels_""" + state_lower + """_""" + county_lower + """) as """ + state_lower + """_""" + county_lower + """
    WHERE 
        o_name1 != ''
        AND o_name1 is not null
        AND pin != ''
        AND pin is not null
        AND acres_gis > .1
        AND ((sale1_bk is not null and sale1_pg is not null) or (sale1_bk != '0000' and sale1_pg != '0000')  or (sale1_bk != '00000' and sale1_pg != '0000') or (sale1_docnum is not null and sale1_docnum != '0'))
        --AND (sale1_bk is not null and sale1_pg is not null and sale1_docnum is not null) 
        AND ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection'
    GROUP BY 
        sale1_bk, sale1_pg, sale1_docnum, sale1_date;
    """
    # 
    # WHERE AND lusedor != '04'
    # GROUP BY o_name1
    # ORDER BY o_name1
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # set work_mem = '1000MB';
    # set work_mem = '384MB';
    
    # Delete all aggregate parcels under x acres
    # 3/28/2023 - Switched to all counties acres_gis < 3 and parcels_num > 1
    #   was: POLK acres_gis < 9 and parcels_num > 1, REST acres_gis < 9
    #if (county_upper == 'POLK') :
    #    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
    #        AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    #else :
    #    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    # QA Queries:
    # -- select sale1_date,sale1_amt,d_county from saunders_agg_sales where sale1_date is null  limit 100 -- parcels_num = 1
    # -- delete from saunders_agg_sales where sale1_date is null  
    
    # 3/28/2023 - Changed logic and remove POLK exception
    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and sale1_amt is null;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # Why are we closing and reopening the connection?
    # close communication with the database
    #cursor.close()
    #connection.close()
    
    #connection = psycopg2.connect(pg_connection)
    #cursor = connection.cursor()


    
    sql = """ 
    --################################################################
    -- OWNER AGGREGATE 

    -- TRUNCATE saunders_agg_owner;
    set work_mem = '3500MB';
    DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' ;
    -- set work_mem = '384MB';
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 3/28/2023 -- Set minimum acre size to 0.1
    acres = '.1'
        
    sql = """
    set enable_hashagg to off;
    INSERT INTO saunders_agg_owner 
        (wkb_geometry, acres_gis, parcels_num, pin_arr,
        o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country,
        -- s_address, s_city, s_zipcode,
        -- sale1_date, sale1_amt, sale1_bk, sale1_pg, 
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, 
        mrkt_bld_arr, mrkt_impr_arr, mrkt_lnd_arr, mrkt_ag_arr, mrkt_tot_arr, 
        sqft_htd_sum, sqft_tot_sum, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        d_date, d_county, d_state)
    SELECT 
        """ + st_union_sql + """,  
        round(SUM(ST_AREA(wkb_geometry)) / 4046.85642) AS acres_gis,
        count(pin) as parcels_num,
        array_agg(pin) as pin_arr,
        o_name1, 
        min(o_name2),
        min(o_address1),
        min(o_address2),
        min(o_city),
        min(o_state),
        min(o_zipcode),
        min(o_country),
        /*
        min(s_address),
        min(s_city),
        min(s_zipcode),
        CAST(sale1_date as date),
        max(sale1_amt) as sale1_amt,
        sale1_bk, 
        sale1_pg, 
        */
        sum(mrkt_bld) as mrkt_bld_sum,
        sum(mrkt_impr) as mrkt_impr_sum,
        sum(mrkt_lnd) as mrkt_lnd_sum,
        sum(mrkt_ag) as mrkt_ag_sum,
        sum(mrkt_tot) as mrkt_tot_sum,
        array_agg(mrkt_bld) as mrkt_bld_arr,
        array_agg(mrkt_impr) as mrkt_impr_arr,
        array_agg(mrkt_lnd) as mrkt_lnd_arr,
        array_agg(mrkt_ag) as mrkt_ag_arr,
        array_agg(mrkt_tot) as mrkt_tot_arr,
        sum(sqft_htd) as sqft_htd_sum,
        sum(sqft_tot) as sqft_tot_sum,
        array_agg(luse) as luse_arr,
        array_agg(luse_d) as luse_d_arr,
        array_agg(lusedor) as lusedor_arr,
        array_agg(lusedor_d) as lusedor_d_arr,
        array_agg(zoning) as zoning_arr,
        min(d_date),
        min(d_county),
        min(d_state)
    FROM 
        -- DISTINCT added to handle duplicate stacked polygons that are not condos, e.g. alachua, GEOSUnaryUnion: TopologyException: no outgoing dirEdge found at 5...
        (select DISTINCT ON (wkb_geometry) * from parcels_""" + state_lower + """_""" + county_lower + """) as parcels_""" + state_lower + """_""" + county_lower + """
    WHERE 
        o_name1 != ''
        AND o_name1 is not null
        AND pin != ''
        AND pin is not null
        -- AND lusedor != '04'
        AND acres_gis > """ + acres + """
        AND ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection'
    GROUP BY 
        o_name1
    ORDER BY 
        o_name1;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()

    # Delete all aggregate parcels under x acres
    # 3/28/2023 - Switched to all counties acres_gis < 3 and parcels_num < 2
    #   was: POLK acres_gis < 9 and parcels_num > 1, REST acres_gis < 9
    # 
    #if (county_upper == 'POLK') :
    #    sql = """DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """'
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    #else :
    #    sql = """DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """' 
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    
    # 3/28/2023 - Changed logic and remove POLK exception 
    sql = """DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    
        
    sql = """DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    
    #===========================================    
    # SQL -- dissagregate the owner polygons

    sql = """DELETE FROM saunders_agg_owner_single where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' ;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """INSERT INTO saunders_agg_owner_single 
        (wkb_geometry, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state) 
        SELECT (ST_DUMP(wkb_geometry)).geom, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state
        FROM saunders_agg_owner 
        WHERE d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' ;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # calc acres
    sql = """UPDATE saunders_agg_owner_single SET acres_gis = round((ST_AREA(wkb_geometry)/ 4046.85642)::numeric, 1);"""
    print(sql)   
    cursor.execute(sql)
    connection.commit()

    # calc the remaining fields based on intersect with parcels_std_project

    sql = """TRUNCATE saunders_agg_owner_single_proc;"""
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # This has a filter for acres_gis > 1, but I think I set the minumm to 3 and was previously 9
    # So for now, shouldn't make a difference.
    # This may be the most time consuming SQL block - probably sue to ST_COVERS
    # TODO: Use explain analyze and some googling / chatgpt to look for optimizations
    # NOTE: Dissagregate will have parcels_num = 1 due to the fact that in that case its a single parcel in the dissagregate of the whole county, 
    # so there's minimum 2 parcels associated with the owner, its just that only 1 is at that location
    sql = """INSERT INTO saunders_agg_owner_single_proc 
        (parcels_num, pin_arr, altkey_arr, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, assd_tot_sum,
        sqft_htd_sum, sqft_tot_sum, yrblt_act_min, yrblt_eff_max, ogc_fid_orig)
    SELECT  
        count(p.pin) as parcels_num, 
        array_agg(p.pin) as pin_arr,
        array_agg(p.altkey) as altkey_arr,
        array_agg(p.luse) as luse_arr,
        array_agg(p.luse_d) as luse_d_arr,
        array_agg(p.lusedor) as lusedor_arr,
        array_agg(p.lusedor_d) as lusedor_d_arr,
        array_agg(p.zoning) as zoning_arr, 
        sum(p.mrkt_bld) as mrkt_bld_sum, 
        sum(p.mrkt_impr) as mrkt_impr_sum, 
        sum(p.mrkt_lnd) as mrkt_lnd_sum, 
        sum(p.mrkt_ag) as mrkt_ag_sum, 
        sum(p.mrkt_tot) as mrkt_tot_sum, 
        sum(p.assd_tot) as assd_tot_sum, 
        sum(p.sqft_htd) as sqft_htd_sum, 
        sum(p.sqft_tot) as sqft_tot_sum, 
        min(p.yrblt_act) as yrblt_act_min, 
        max(p.yrblt_eff) as yrblt_eff_max, 
        agg.ogc_fid as ogc_fid_orig
    FROM 
        (SELECT wkb_geometry, pin, altkey, mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot, assd_tot, luse, luse_d, lusedor, lusedor_d, zoning,
            sqft_htd, sqft_tot, yrblt_act, yrblt_eff
            FROM parcels_""" + state_lower + """_""" + county_lower + """ 
            -- acres_gis > 1 AND 
            WHERE ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection') AS p, 
        saunders_agg_owner_single AS agg 
    WHERE 
        ST_Covers(agg.wkb_geometry,p.wkb_geometry) GROUP BY agg.ogc_fid;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()


    sql = """UPDATE saunders_agg_owner_single as agg
        SET 
            parcels_num = temp.parcels_num,
            pin_arr = temp.pin_arr,
            altkey_arr = temp.altkey_arr,
            luse_arr = temp.luse_arr,
            luse_d_arr = temp.luse_d_arr,
            lusedor_arr = temp.lusedor_arr,
            lusedor_d_arr = temp.lusedor_d_arr,
            zoning_arr = temp.zoning_arr, 
            mrkt_bld_sum = temp.mrkt_bld_sum,
            mrkt_impr_sum = temp.mrkt_impr_sum,
            mrkt_lnd_sum = temp.mrkt_lnd_sum,
            mrkt_ag_sum = temp.mrkt_ag_sum,
            mrkt_tot_sum = temp.mrkt_tot_sum,
            assd_tot_sum = temp.assd_tot_sum,
            sqft_htd_sum = temp.sqft_htd_sum, 
            sqft_tot_sum = temp.sqft_tot_sum, 
            yrblt_act_min = temp.yrblt_act_min, 
            yrblt_eff_max = temp.yrblt_eff_max	
        FROM saunders_agg_owner_single_proc as temp
        WHERE agg.ogc_fid = temp.ogc_fid_orig;
    """ 
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # 3/28/2023 - Changed logic and remove POLK exception 
    sql = """DELETE FROM saunders_agg_owner_single where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    cursor.execute(sql)
    connection.commit()    
        
    sql = """DELETE FROM saunders_agg_owner_single where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    
    print('Aggregate tables update for ',county, ' county complete')


# ===============================================================================================
#  UPDATE MAPWISE AGGREGATE TABLES
#  - delete existing data and insert new data from parcels_<county>
# ===============================================================================================
def update_agg_tables_mapwise(state,county) :
    """delete existing data and insert new data from parcels_<county>.
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_agg_tables(state, county)")
    print("----------------------------------------------------------------------")
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county = county.upper()
    
    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()
    if county_lower == 'miami-dade' :
        county_lower = 'miami_dade'
        
    # if state is empty, we are assuming FL
    if len(state) == 0:
        state = 'FL'
        print('NO STATE')
        #exit()
        
    
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()

    # Delete existing parcels
    print('\nUPDATING ',state,county, 'aggregate tables......')
    

    # some counties now throw the error 
    #   -- GEOSUnaryUnion: TopologyException: found non-noded intersection between LINESTRING 
    # so, use alternate ST_Union
    # TODO: Double-check if this is happening with other counties
    # Decide if we should just assume there may be errors and do the "makevalid" trick anyway
    # and double-check that we shoul dbe going with makevalid vs this older "hack"
    if county_upper in ['BAY','BROWARD','HILLSBOROUGH','HOLMES','JACKSON','ST_JOHNS','ST_LUCIE','SUMTER'] :
        st_union_sql = "ST_UNION(ST_BuildArea(ST_Boundary(wkb_geometry))) as wkb_geometry"
    else :
        st_union_sql = "ST_UNION(wkb_geometry) as wkb_geometry"
        
    sql = """--################################################################
    -- SALES AGGREGATE - 

    set work_mem = '3500MB';
    DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """';
    ;
    -- keeping this here to deal with counties that haven't had state included yet.
    DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """';
    ;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    

    # 3/28/2023 -- Set minimum acre size to 0.1
    # REMEMBER - Any sales that are represented by zeros are getting aggregfated to a random owner.
    # SO, we need to make sure that all sale1_bk, sale1_pg and sale1_docnum are null instead of 
    #   something like 0000 or 000
    # Added some extra sql logic, but we need to make sure all sales processing code produces clean data.
    # TODO: 9/27/23 - review the query syntax - why are we using min(o_name2), etc?
    # Shouldn't we be using some kind of DISTINCT query that includes
    # o_name1, o_name2, o_address1, etc?
    # Like we want distinct versions of that
    #   vs owner name is distinct, but addresses can be different?
    # We should probably explain all of the logic in a separate doc.
    # Go through all sections of parcels_convert.py and explain the various sections
    #   where more than basic logic is used to explain why we are doing things certain ways, etc.
    sql = """
    set enable_hashagg to off;
    INSERT INTO mapwise_agg_sales 
        (wkb_geometry, acres_gis, parcels_num, pin_arr,
        o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country,
        s_address, s_city, s_zipcode,
        sale1_date, sale1_amt, sale1_typ, sale1_vac, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor,
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, 
        mrkt_bld_arr, mrkt_impr_arr, mrkt_lnd_arr, mrkt_ag_arr, mrkt_tot_arr, 
        sqft_htd_sum, sqft_tot_sum, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        d_date, d_county, d_state)
    SELECT 
        """ + st_union_sql + """, 
        round(SUM(ST_AREA(wkb_geometry)) / 4046.85642) AS acres_gis,
        count(pin) as parcels_num,
        array_agg(pin) as pin_arr,
        min(o_name1), 
        min(o_name2),
        min(o_address1),
        min(o_address2),
        min(o_city),
        min(o_state),
        min(o_zipcode),
        min(o_country),
        min(s_address),
        min(s_city),
        min(s_zipcode),
        CAST(sale1_date as date),
        max(sale1_amt) as sale1_amt,
        max(sale1_typ) as sale1_typ,
        max(sale1_vac) as sale1_vac,
        sale1_bk, 
        sale1_pg,
        sale1_docnum,
        max(sale1_grantor) as sale1_grantor,
        sum(mrkt_bld) as mrkt_bld_sum,
        sum(mrkt_impr) as mrkt_impr_sum,
        sum(mrkt_lnd) as mrkt_lnd_sum,
        sum(mrkt_ag) as mrkt_ag_sum,
        sum(mrkt_tot) as mrkt_tot_sum,
        array_agg(mrkt_bld) as mrkt_bld_arr,
        array_agg(mrkt_impr) as mrkt_impr_arr,
        array_agg(mrkt_lnd) as mrkt_lnd_arr,
        array_agg(mrkt_ag) as mrkt_ag_arr,
        array_agg(mrkt_tot) as mrkt_tot_arr,
        sum(sqft_htd) as sqft_htd_sum,
        sum(sqft_tot) as sqft_tot_sum,
        array_agg(luse) as luse_arr,
        array_agg(luse_d) as luse_d_arr,
        array_agg(lusedor) as lusedor_arr,
        array_agg(lusedor_d) as lusedor_d_arr,
        array_agg(zoning) as zoning_arr,
        min(d_date),
        min(d_county),
        min(d_state)
    FROM 
        -- DISTINCT added to handle duplicate stacked polygons that are not condos, e.g. alachua, GEOSUnaryUnion: TopologyException: no outgoing dirEdge found at 5...
        (select DISTINCT ON (wkb_geometry) * from parcels_""" + state_lower + """_""" + county_lower + """) as """ + state_lower + """_""" + county_lower + """
    WHERE 
        o_name1 != ''
        AND o_name1 is not null
        AND pin != ''
        AND pin is not null
        AND acres_gis > .1
        AND ((sale1_bk is not null and sale1_pg is not null) or (sale1_bk != '0000' and sale1_pg != '0000')  or (sale1_bk != '00000' and sale1_pg != '0000') or (sale1_docnum is not null and sale1_docnum != '0'))
        --AND (sale1_bk is not null and sale1_pg is not null and sale1_docnum is not null) 
        AND ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection'
    GROUP BY 
        sale1_bk, sale1_pg, sale1_docnum, sale1_date;
    """
    # 
    # WHERE AND lusedor != '04'
    # GROUP BY o_name1
    # ORDER BY o_name1
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # set work_mem = '1000MB';
    # set work_mem = '384MB';
    
    # Delete all aggregate parcels under x acres
    # 3/28/2023 - Switched to all counties acres_gis < 3 and parcels_num > 1
    #   was: POLK acres_gis < 9 and parcels_num > 1, REST acres_gis < 9
    #if (county_upper == 'POLK') :
    #    sql = """DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """' 
    #        AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    #else :
    #    sql = """DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """' 
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    # QA Queries:
    # -- select sale1_date,sale1_amt,d_county from mapwise_agg_sales where sale1_date is null  limit 100 -- parcels_num = 1
    # -- delete from mapwise_agg_sales where sale1_date is null  
    
    # 3/28/2023 - Changed logic and remove POLK exception
    sql = """DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and sale1_amt is null;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    sql = """DELETE FROM mapwise_agg_sales where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()


    # Why are we closing and reopening the connection?
    # close communication with the database
    #cursor.close()
    #connection.close()
    
    #connection = psycopg2.connect(pg_connection)
    #cursor = connection.cursor()


    
    sql = """ 
    --################################################################
    -- OWNER AGGREGATE 

    -- TRUNCATE mapwise_agg_owner;
    set work_mem = '3500MB';
    DELETE FROM mapwise_agg_owner where d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' ;
    -- set work_mem = '384MB';
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 3/28/2023 -- Set minimum acre size to 0.1
    acres = '.1'
        
    sql = """
    set enable_hashagg to off;
    INSERT INTO mapwise_agg_owner 
        (wkb_geometry, acres_gis, parcels_num, pin_arr,
        o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country,
        -- s_address, s_city, s_zipcode,
        -- sale1_date, sale1_amt, sale1_bk, sale1_pg, 
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, 
        mrkt_bld_arr, mrkt_impr_arr, mrkt_lnd_arr, mrkt_ag_arr, mrkt_tot_arr, 
        sqft_htd_sum, sqft_tot_sum, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        d_date, d_county, d_state)
    SELECT 
        """ + st_union_sql + """,  
        round(SUM(ST_AREA(wkb_geometry)) / 4046.85642) AS acres_gis,
        count(pin) as parcels_num,
        array_agg(pin) as pin_arr,
        o_name1, 
        min(o_name2),
        min(o_address1),
        min(o_address2),
        min(o_city),
        min(o_state),
        min(o_zipcode),
        min(o_country),
        /*
        min(s_address),
        min(s_city),
        min(s_zipcode),
        CAST(sale1_date as date),
        max(sale1_amt) as sale1_amt,
        sale1_bk, 
        sale1_pg, 
        */
        sum(mrkt_bld) as mrkt_bld_sum,
        sum(mrkt_impr) as mrkt_impr_sum,
        sum(mrkt_lnd) as mrkt_lnd_sum,
        sum(mrkt_ag) as mrkt_ag_sum,
        sum(mrkt_tot) as mrkt_tot_sum,
        array_agg(mrkt_bld) as mrkt_bld_arr,
        array_agg(mrkt_impr) as mrkt_impr_arr,
        array_agg(mrkt_lnd) as mrkt_lnd_arr,
        array_agg(mrkt_ag) as mrkt_ag_arr,
        array_agg(mrkt_tot) as mrkt_tot_arr,
        sum(sqft_htd) as sqft_htd_sum,
        sum(sqft_tot) as sqft_tot_sum,
        array_agg(luse) as luse_arr,
        array_agg(luse_d) as luse_d_arr,
        array_agg(lusedor) as lusedor_arr,
        array_agg(lusedor_d) as lusedor_d_arr,
        array_agg(zoning) as zoning_arr,
        min(d_date),
        min(d_county),
        min(d_state)
    FROM 
        -- DISTINCT added to handle duplicate stacked polygons that are not condos, e.g. alachua, GEOSUnaryUnion: TopologyException: no outgoing dirEdge found at 5...
        (select DISTINCT ON (wkb_geometry) * from parcels_""" + state_lower + """_""" + county_lower + """) as parcels_""" + state_lower + """_""" + county_lower + """
    WHERE 
        o_name1 != ''
        AND o_name1 is not null
        AND pin != ''
        AND pin is not null
        -- AND lusedor != '04'
        AND acres_gis > """ + acres + """
        AND ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection'
    GROUP BY 
        o_name1
    ORDER BY 
        o_name1;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()

    # Delete all aggregate parcels under x acres
    # 3/28/2023 - Switched to all counties acres_gis < 3 and parcels_num < 2
    #   was: POLK acres_gis < 9 and parcels_num > 1, REST acres_gis < 9
    # 
    #if (county_upper == 'POLK') :
    #    sql = """DELETE FROM mapwise_agg_owner where d_county = '""" + county_upper + """'
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    #else :
    #    sql = """DELETE FROM mapwise_agg_owner where d_county = '""" + county_upper + """' 
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    
    # 3/28/2023 - Changed logic and remove POLK exception 
    sql = """DELETE FROM mapwise_agg_owner where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()    
        
    sql = """DELETE FROM mapwise_agg_owner where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    #exit()
    
    #===========================================    
    # SQL -- dissagregate the owner polygons

    sql = """DELETE FROM mapwise_agg_owner_single where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' ;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = """INSERT INTO mapwise_agg_owner_single 
        (wkb_geometry, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state) 
        SELECT (ST_DUMP(wkb_geometry)).geom, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state
        FROM mapwise_agg_owner 
        WHERE d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' ;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # calc acres
    sql = """UPDATE mapwise_agg_owner_single SET acres_gis = round((ST_AREA(wkb_geometry)/ 4046.85642)::numeric, 1);"""
    print(sql)   
    cursor.execute(sql)
    connection.commit()

    # calc the remaining fields based on intersect with parcels_std_project

    sql = """TRUNCATE mapwise_agg_owner_single_proc;"""
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # This has a filter for acres_gis > 1, but I think I set the minumm to 3 and was previously 9
    # So for now, shouldn't make a difference.
    # This may be the most time consuming SQL block - probably sue to ST_COVERS
    # TODO: Use explain analyze and some googling / chatgpt to look for optimizations
    # NOTE: Dissagregate will have parcels_num = 1 due to the fact that in that case its a single parcel in the dissagregate of the whole county, 
    # so there's minimum 2 parcels associated with the owner, its just that only 1 is at that location
    sql = """INSERT INTO mapwise_agg_owner_single_proc 
        (parcels_num, pin_arr, altkey_arr, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, assd_tot_sum,
        sqft_htd_sum, sqft_tot_sum, yrblt_act_min, yrblt_eff_max, ogc_fid_orig)
    SELECT  
        count(p.pin) as parcels_num, 
        array_agg(p.pin) as pin_arr,
        array_agg(p.altkey) as altkey_arr,
        array_agg(p.luse) as luse_arr,
        array_agg(p.luse_d) as luse_d_arr,
        array_agg(p.lusedor) as lusedor_arr,
        array_agg(p.lusedor_d) as lusedor_d_arr,
        array_agg(p.zoning) as zoning_arr, 
        sum(p.mrkt_bld) as mrkt_bld_sum, 
        sum(p.mrkt_impr) as mrkt_impr_sum, 
        sum(p.mrkt_lnd) as mrkt_lnd_sum, 
        sum(p.mrkt_ag) as mrkt_ag_sum, 
        sum(p.mrkt_tot) as mrkt_tot_sum, 
        sum(p.assd_tot) as assd_tot_sum, 
        sum(p.sqft_htd) as sqft_htd_sum, 
        sum(p.sqft_tot) as sqft_tot_sum, 
        min(p.yrblt_act) as yrblt_act_min, 
        max(p.yrblt_eff) as yrblt_eff_max, 
        agg.ogc_fid as ogc_fid_orig
    FROM 
        (SELECT wkb_geometry, pin, altkey, mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot, assd_tot, luse, luse_d, lusedor, lusedor_d, zoning,
            sqft_htd, sqft_tot, yrblt_act, yrblt_eff
            FROM parcels_""" + state_lower + """_""" + county_lower + """ 
            -- acres_gis > 1 AND 
            WHERE ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection') AS p, 
        mapwise_agg_owner_single AS agg 
    WHERE 
        ST_Covers(agg.wkb_geometry,p.wkb_geometry) GROUP BY agg.ogc_fid;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()


    sql = """UPDATE mapwise_agg_owner_single as agg
        SET 
            parcels_num = temp.parcels_num,
            pin_arr = temp.pin_arr,
            altkey_arr = temp.altkey_arr,
            luse_arr = temp.luse_arr,
            luse_d_arr = temp.luse_d_arr,
            lusedor_arr = temp.lusedor_arr,
            lusedor_d_arr = temp.lusedor_d_arr,
            zoning_arr = temp.zoning_arr, 
            mrkt_bld_sum = temp.mrkt_bld_sum,
            mrkt_impr_sum = temp.mrkt_impr_sum,
            mrkt_lnd_sum = temp.mrkt_lnd_sum,
            mrkt_ag_sum = temp.mrkt_ag_sum,
            mrkt_tot_sum = temp.mrkt_tot_sum,
            assd_tot_sum = temp.assd_tot_sum,
            sqft_htd_sum = temp.sqft_htd_sum, 
            sqft_tot_sum = temp.sqft_tot_sum, 
            yrblt_act_min = temp.yrblt_act_min, 
            yrblt_eff_max = temp.yrblt_eff_max	
        FROM mapwise_agg_owner_single_proc as temp
        WHERE agg.ogc_fid = temp.ogc_fid_orig;
    """ 
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # 3/28/2023 - Changed logic and remove POLK exception 
    sql = """DELETE FROM mapwise_agg_owner_single where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    cursor.execute(sql)
    connection.commit()    
        
    sql = """DELETE FROM mapwise_agg_owner_single where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    
    print('Aggregate tables update for ',county, ' county complete')
    
    
    
# ===============================================================================================
#  UPDATE SAUNDERS AGGREGATE TABLES
#  - delete existing data and insert new data from parcels_<county>
# ===============================================================================================
def update_agg_tables_saunders(state,county) :
    """delete existing data and insert new data from parcels_<county>.
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_agg_tables_saunders(state, county)")
    print("----------------------------------------------------------------------")
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county = county.upper()
    
    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()
    if county_lower == 'miami-dade' :
        county_lower = 'miami_dade'
        
    # if state is empty, we are assuming FL
    if len(state) == 0:
        state = 'FL'
        print('NO STATE')
        exit()
        
    if county_upper == 'A_GA_ATTOM':
        state = 'GA'    
    
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()

    # Delete existing parcels
    print('\nUPDATING ',state,county, 'aggregate tables......')
    
    # Manually set which states to delete for ATTOM data
    if county_upper == 'A_GA_ATTOM':
        parcel_table = 'parcels_ga_a_ga_attom'
        
        sql = """--################################################################
        -- SALES AGGREGATE - 

        set work_mem = '3500MB';
        DELETE FROM saunders_agg_sales where d_state IN ('AL','GA');
        ;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    else:
        parcel_table = """parcels_""" + state_lower + """_""" + county_lower
    
        sql = """--################################################################
        -- SALES AGGREGATE - 

        set work_mem = '3500MB';
        DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """'
            AND d_state = '""" + state_upper + """';
        ;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
    # some counties now throw the error 
    #   -- GEOSUnaryUnion: TopologyException: found non-noded intersection between LINESTRING 
    # so, use alternate ST_Union
    # TODO: Double-check if this is happening with other counties
    # Decide if we should just assume there may be errors and do the "makevalid" trick anyway
    # and double-check that we shoul dbe going with makevalid vs this older "hack"
    if county_upper in ['BAY','BROWARD','HILLSBOROUGH','HOLMES','JACKSON','ST_JOHNS','ST_LUCIE','SUMTER'] :
        st_union_sql = "ST_UNION(ST_BuildArea(ST_Boundary(wkb_geometry))) as wkb_geometry"
    else :
        st_union_sql = "ST_UNION(wkb_geometry) as wkb_geometry"   
    

    # 3/28/2023 -- Set minimum acre size to 0.1
    # REMEMBER - Any sales that are represented by zeros are getting aggregfated to a random owner.
    # SO, we need to make sure that all sale1_bk, sale1_pg and sale1_docnum are null instead of 
    #   something like 0000 or 000
    # Added some extra sql logic, but we need to make sure all sales processing code produces clean data.
    # TODO: 9/27/23 - review the query syntax - why are we using min(o_name2), etc?
    # Shouldn't we be using some kind of DISTINCT query that includes
    # o_name1, o_name2, o_address1, etc?
    # Like we want distinct versions of that
    #   vs owner name is distinct, but addresses can be different?
    # We should probably explain all of the logic in a separate doc.
    # Go through all sections of parcels_convert.py and explain the various sections
    #   where more than basic logic is used to explain why we are doing things certain ways, etc.
    sql = """
    set enable_hashagg to off;
    INSERT INTO saunders_agg_sales 
        (wkb_geometry, acres_gis, parcels_num, pin_arr,
        o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country,
        s_address, s_city, s_zipcode,
        sale1_date, sale1_amt, sale1_typ, sale1_vac, sale1_bk, sale1_pg, sale1_docnum, sale1_grantor,
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, 
        mrkt_bld_arr, mrkt_impr_arr, mrkt_lnd_arr, mrkt_ag_arr, mrkt_tot_arr, 
        sqft_htd_sum, sqft_tot_sum, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        d_date, d_county, d_state)
    SELECT 
        """ + st_union_sql + """, 
        round(SUM(ST_AREA(wkb_geometry)) / 4046.85642) AS acres_gis,
        count(pin) as parcels_num,
        array_agg(pin) as pin_arr,
        min(o_name1), 
        min(o_name2),
        min(o_address1),
        min(o_address2),
        min(o_city),
        min(o_state),
        min(o_zipcode),
        min(o_country),
        min(s_address),
        min(s_city),
        min(s_zipcode),
        CAST(sale1_date as date),
        max(sale1_amt) as sale1_amt,
        max(sale1_typ) as sale1_typ,
        max(sale1_vac) as sale1_vac,
        sale1_bk, 
        sale1_pg,
        sale1_docnum,
        max(sale1_grantor) as sale1_grantor,
        sum(mrkt_bld) as mrkt_bld_sum,
        sum(mrkt_impr) as mrkt_impr_sum,
        sum(mrkt_lnd) as mrkt_lnd_sum,
        sum(mrkt_ag) as mrkt_ag_sum,
        sum(mrkt_tot) as mrkt_tot_sum,
        array_agg(mrkt_bld) as mrkt_bld_arr,
        array_agg(mrkt_impr) as mrkt_impr_arr,
        array_agg(mrkt_lnd) as mrkt_lnd_arr,
        array_agg(mrkt_ag) as mrkt_ag_arr,
        array_agg(mrkt_tot) as mrkt_tot_arr,
        sum(sqft_htd) as sqft_htd_sum,
        sum(sqft_tot) as sqft_tot_sum,
        array_agg(luse) as luse_arr,
        array_agg(luse_d) as luse_d_arr,
        array_agg(lusedor) as lusedor_arr,
        array_agg(lusedor_d) as lusedor_d_arr,
        array_agg(zoning) as zoning_arr,
        min(d_date),
        min(d_county),
        min(d_state)
    FROM 
        -- DISTINCT added to handle duplicate stacked polygons that are not condos, e.g. alachua, GEOSUnaryUnion: TopologyException: no outgoing dirEdge found at 5...
        -- (SELECT DISTINCT ON (wkb_geometry) * from parcels_""" + state_lower + """_""" + county_lower + """) AS """ + state_lower + """_""" + county_lower + """
        (SELECT DISTINCT ON (wkb_geometry) * FROM """ + parcel_table + """) AS mysubselect
    WHERE 
        o_name1 != ''
        AND o_name1 is not null
        AND pin != ''
        AND pin is not null
        AND acres_gis > .1
        AND ((sale1_bk is not null and sale1_pg is not null) or (sale1_bk != '0000' and sale1_pg != '0000')  or (sale1_bk != '00000' and sale1_pg != '0000') or (sale1_docnum is not null and sale1_docnum != '0'))
        --AND (sale1_bk is not null and sale1_pg is not null and sale1_docnum is not null) 
        AND ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection'
    GROUP BY 
        sale1_bk, sale1_pg, sale1_docnum, sale1_date;
    """
    # 
    # WHERE AND lusedor != '04'
    # GROUP BY o_name1
    # ORDER BY o_name1
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # set work_mem = '1000MB';
    # set work_mem = '384MB';
    
    # Delete all aggregate parcels under x acres
    # 3/28/2023 - Switched to all counties acres_gis < 3 and parcels_num > 1
    #   was: POLK acres_gis < 9 and parcels_num > 1, REST acres_gis < 9
    #if (county_upper == 'POLK') :
    #    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
    #        AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    #else :
    #    sql = """DELETE FROM saunders_agg_sales where d_county = '""" + county_upper + """' 
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    # QA Queries:
    # -- select sale1_date,sale1_amt,d_county from saunders_agg_sales where sale1_date is null  limit 100 -- parcels_num = 1
    # -- delete from saunders_agg_sales where sale1_date is null  


    if county_upper == 'A_GA_ATTOM':
        # 3/28/2023 - Changed logic and remove POLK exception
        sql = """DELETE FROM saunders_agg_sales  
            WHERE d_state IN ('AL','GA') AND sale1_amt is null;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        sql = """DELETE FROM saunders_agg_sales 
            WHERE d_state IN ('AL','GA') AND acres_gis < 3;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        sql = """DELETE FROM saunders_agg_sales 
            WHERE d_state IN ('AL','GA') AND parcels_num < 2;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()   

    else:
        # 3/28/2023 - Changed logic AND remove POLK exception
        sql = """DELETE FROM saunders_agg_sales 
            WHERE d_county = '""" + county_upper + """' 
            AND d_state = '""" + state_upper + """' AND sale1_amt is null;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        sql = """DELETE FROM saunders_agg_sales 
            WHERE d_county = '""" + county_upper + """' 
            AND d_state = '""" + state_upper + """' AND acres_gis < 3;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
        sql = """DELETE FROM saunders_agg_sales 
            WHERE d_county = '""" + county_upper + """' 
            AND d_state = '""" + state_upper + """' AND parcels_num < 2;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()  
    
    
    #exit()

    # Why are we closing and reopening the connection?
    # close communication with the database
    #cursor.close()
    #connection.close()
    
    #connection = psycopg2.connect(pg_connection)
    #cursor = connection.cursor()


    # END SALES AGGREGATE
    

    # Manually set which states to delete for ATTOM data
    if county_upper == 'A_GA_ATTOM':
        sql = """--################################################################
        -- OWNER AGGREGATE - 

        set work_mem = '3500MB';
        DELETE FROM saunders_agg_owner where d_state IN ('AL','GA');
        ;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    else:
        sql = """--################################################################
        -- OWNER AGGREGATE - 

        set work_mem = '3500MB';
        DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """'
            AND d_state = '""" + state_upper + """';
        ;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()



    # 3/28/2023 -- Set minimum acre size to 0.1
    acres = '.1'
        
    sql = """
    set enable_hashagg to off;
    INSERT INTO saunders_agg_owner 
        (wkb_geometry, acres_gis, parcels_num, pin_arr,
        o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country,
        -- s_address, s_city, s_zipcode,
        -- sale1_date, sale1_amt, sale1_bk, sale1_pg, 
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, 
        mrkt_bld_arr, mrkt_impr_arr, mrkt_lnd_arr, mrkt_ag_arr, mrkt_tot_arr, 
        sqft_htd_sum, sqft_tot_sum, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        d_date, d_county, d_state)
    SELECT 
        """ + st_union_sql + """,  
        round(SUM(ST_AREA(wkb_geometry)) / 4046.85642) AS acres_gis,
        count(pin) as parcels_num,
        array_agg(pin) as pin_arr,
        o_name1, 
        min(o_name2),
        min(o_address1),
        min(o_address2),
        min(o_city),
        min(o_state),
        min(o_zipcode),
        min(o_country),
        /*
        min(s_address),
        min(s_city),
        min(s_zipcode),
        CAST(sale1_date as date),
        max(sale1_amt) as sale1_amt,
        sale1_bk, 
        sale1_pg, 
        */
        sum(mrkt_bld) as mrkt_bld_sum,
        sum(mrkt_impr) as mrkt_impr_sum,
        sum(mrkt_lnd) as mrkt_lnd_sum,
        sum(mrkt_ag) as mrkt_ag_sum,
        sum(mrkt_tot) as mrkt_tot_sum,
        array_agg(mrkt_bld) as mrkt_bld_arr,
        array_agg(mrkt_impr) as mrkt_impr_arr,
        array_agg(mrkt_lnd) as mrkt_lnd_arr,
        array_agg(mrkt_ag) as mrkt_ag_arr,
        array_agg(mrkt_tot) as mrkt_tot_arr,
        sum(sqft_htd) as sqft_htd_sum,
        sum(sqft_tot) as sqft_tot_sum,
        array_agg(luse) as luse_arr,
        array_agg(luse_d) as luse_d_arr,
        array_agg(lusedor) as lusedor_arr,
        array_agg(lusedor_d) as lusedor_d_arr,
        array_agg(zoning) as zoning_arr,
        min(d_date),
        min(d_county),
        min(d_state)
    FROM 
        -- DISTINCT added to handle duplicate stacked polygons that are not condos, e.g. alachua, GEOSUnaryUnion: TopologyException: no outgoing dirEdge found at 5...
        --(select DISTINCT ON (wkb_geometry) * from parcels_""" + state_lower + """_""" + county_lower + """) as parcels_""" + state_lower + """_""" + county_lower + """
        (SELECT DISTINCT ON (wkb_geometry) * FROM """ + parcel_table + """) AS mysubselect
    WHERE 
        o_name1 != ''
        AND o_name1 is not null
        AND pin != ''
        AND pin is not null
        -- AND lusedor != '04'
        AND acres_gis > """ + acres + """
        AND ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection'
    GROUP BY 
        o_name1
    ORDER BY 
        o_name1;
    """
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    #exit()

    # Delete all aggregate parcels under x acres
    # 3/28/2023 - Switched to all counties acres_gis < 3 and parcels_num < 2
    #   was: POLK acres_gis < 9 and parcels_num > 1, REST acres_gis < 9
    # 
    #if (county_upper == 'POLK') :
    #    sql = """DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """'
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""
    #else :
    #    sql = """DELETE FROM saunders_agg_owner where d_county = '""" + county_upper + """' 
    #    AND d_state = '""" + state_upper + """' and acres_gis < 3 and parcels_num < 2;"""


    if county_upper == 'A_GA_ATTOM':    
        # 3/28/2023 - Changed logic and remove POLK exception 
        sql = """DELETE FROM saunders_agg_owner
            WHERE d_state IN ('AL','GA') AND acres_gis < 3;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()    
            
        sql = """DELETE FROM saunders_agg_owner
            WHERE d_state IN ('AL','GA') AND parcels_num < 2;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    else:
        # 3/28/2023 - Changed logic and remove POLK exception 
        sql = """DELETE FROM saunders_agg_owner 
            WHERE d_county = '""" + county_upper + """'
            AND d_state = '""" + state_upper + """' and acres_gis < 3;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()    
            
        sql = """DELETE FROM saunders_agg_owner 
            WHERE d_county = '""" + county_upper + """' 
            AND d_state = '""" + state_upper + """' and parcels_num < 2;
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()    
    
    
    #exit()
    
    #===========================================    
    # SQL -- dissagregate the owner polygons

    # Manually set which states to delete for ATTOM data
    if county_upper == 'A_GA_ATTOM':
        sql = """--################################################################
        -- OWNER AGGREGATE - 

        set work_mem = '3500MB';
        DELETE FROM saunders_agg_owner_single where d_state IN ('AL','GA');
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()
    else:
        sql = """--################################################################
        -- OWNER AGGREGATE - 

        set work_mem = '3500MB';
        DELETE FROM saunders_agg_owner_single where d_county = '""" + county_upper + """'
            AND d_state = '""" + state_upper + """';
        """
        print(sql)
        cursor.execute(sql)
        connection.commit()

    if county_upper == 'A_GA_ATTOM':
        sql = """INSERT INTO saunders_agg_owner_single 
            (wkb_geometry, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state) 
            SELECT (ST_DUMP(wkb_geometry)).geom, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state
            FROM saunders_agg_owner 
            WHERE d_state IN ('AL','GA');
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()
    else:
        sql = """INSERT INTO saunders_agg_owner_single 
            (wkb_geometry, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state) 
            SELECT (ST_DUMP(wkb_geometry)).geom, o_name1, o_name2, o_address1, o_address2, o_city, o_state, o_zipcode, o_country, d_date, d_county, d_state
            FROM saunders_agg_owner 
            WHERE d_county = '""" + county_upper + """' AND d_state = '""" + state_upper + """' ;
        """
        print(sql)    
        cursor.execute(sql)
        connection.commit()  
    
    # calc acres
    sql = """UPDATE saunders_agg_owner_single SET acres_gis = round((ST_AREA(wkb_geometry)/ 4046.85642)::numeric, 1);"""
    print(sql)   
    cursor.execute(sql)
    connection.commit()

    # calc the remaining fields based on intersect with parcels_std_project

    sql = """TRUNCATE saunders_agg_owner_single_proc;"""
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # This has a filter for acres_gis > 1, but I think I set the minumm to 3 and was previously 9
    # So for now, shouldn't make a difference.
    # This may be the most time consuming SQL block - probably sue to ST_COVERS
    # TODO: Use explain analyze and some googling / chatgpt to look for optimizations
    # NOTE: Dissagregate will have parcels_num = 1 due to the fact that in that case its a single parcel in the dissagregate of the whole county, 
    # so there's minimum 2 parcels associated with the owner, its just that only 1 is at that location
    sql = """INSERT INTO saunders_agg_owner_single_proc 
        (parcels_num, pin_arr, altkey_arr, 
        luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr, zoning_arr,
        mrkt_bld_sum, mrkt_impr_sum, mrkt_lnd_sum, mrkt_ag_sum, mrkt_tot_sum, assd_tot_sum,
        sqft_htd_sum, sqft_tot_sum, yrblt_act_min, yrblt_eff_max, ogc_fid_orig)
    SELECT  
        count(p.pin) as parcels_num, 
        array_agg(p.pin) as pin_arr,
        array_agg(p.altkey) as altkey_arr,
        array_agg(p.luse) as luse_arr,
        array_agg(p.luse_d) as luse_d_arr,
        array_agg(p.lusedor) as lusedor_arr,
        array_agg(p.lusedor_d) as lusedor_d_arr,
        array_agg(p.zoning) as zoning_arr, 
        sum(p.mrkt_bld) as mrkt_bld_sum, 
        sum(p.mrkt_impr) as mrkt_impr_sum, 
        sum(p.mrkt_lnd) as mrkt_lnd_sum, 
        sum(p.mrkt_ag) as mrkt_ag_sum, 
        sum(p.mrkt_tot) as mrkt_tot_sum, 
        sum(p.assd_tot) as assd_tot_sum, 
        sum(p.sqft_htd) as sqft_htd_sum, 
        sum(p.sqft_tot) as sqft_tot_sum, 
        min(p.yrblt_act) as yrblt_act_min, 
        max(p.yrblt_eff) as yrblt_eff_max, 
        agg.ogc_fid as ogc_fid_orig
    FROM 
        (SELECT wkb_geometry, pin, altkey, mrkt_bld, mrkt_impr, mrkt_lnd, mrkt_ag, mrkt_tot, assd_tot, luse, luse_d, lusedor, lusedor_d, zoning,
            sqft_htd, sqft_tot, yrblt_act, yrblt_eff
            FROM parcels_""" + state_lower + """_""" + county_lower + """ 
            -- acres_gis > 1 AND 
            WHERE ST_GeometryType(wkb_geometry) != 'ST_GeometryCollection') AS p, 
        saunders_agg_owner_single AS agg 
    WHERE 
        ST_Covers(agg.wkb_geometry,p.wkb_geometry) GROUP BY agg.ogc_fid;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()


    sql = """UPDATE saunders_agg_owner_single as agg
        SET 
            parcels_num = temp.parcels_num,
            pin_arr = temp.pin_arr,
            altkey_arr = temp.altkey_arr,
            luse_arr = temp.luse_arr,
            luse_d_arr = temp.luse_d_arr,
            lusedor_arr = temp.lusedor_arr,
            lusedor_d_arr = temp.lusedor_d_arr,
            zoning_arr = temp.zoning_arr, 
            mrkt_bld_sum = temp.mrkt_bld_sum,
            mrkt_impr_sum = temp.mrkt_impr_sum,
            mrkt_lnd_sum = temp.mrkt_lnd_sum,
            mrkt_ag_sum = temp.mrkt_ag_sum,
            mrkt_tot_sum = temp.mrkt_tot_sum,
            assd_tot_sum = temp.assd_tot_sum,
            sqft_htd_sum = temp.sqft_htd_sum, 
            sqft_tot_sum = temp.sqft_tot_sum, 
            yrblt_act_min = temp.yrblt_act_min, 
            yrblt_eff_max = temp.yrblt_eff_max	
        FROM saunders_agg_owner_single_proc as temp
        WHERE agg.ogc_fid = temp.ogc_fid_orig;
    """ 
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # 3/28/2023 - Changed logic and remove POLK exception 
    sql = """DELETE FROM saunders_agg_owner_single where d_county = '""" + county_upper + """'
        AND d_state = '""" + state_upper + """' and acres_gis < 3;
    """
    cursor.execute(sql)
    connection.commit()    
        
    sql = """DELETE FROM saunders_agg_owner_single where d_county = '""" + county_upper + """' 
        AND d_state = '""" + state_upper + """' and parcels_num < 2;
    """
    cursor.execute(sql)
    connection.commit()

    
    # close communication with the database
    cursor.close()
    connection.close()
    
    print('Aggregate tables update for ',county, ' county complete')
    
# ===============================================================================================
#  UPDATE SUNBIZ PARCEL OWNERS
#  - delete existing data and insert new data from parcels_<county>
# ===============================================================================================
# sunbiz_parcel_owners contains sunbiz info for sunbiz records where parcel owner name matches the corporate owner name
# AND only where the sunbiz lookup table contains a link to the sunbiz records
# 
# I created the function for generating and updating sunbiz_parcel_owners in early July 2012
# the postgres log files will have the sql code


def update_sunbiz_owners(county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_sunbiz_owners(county)")
    print("----------------------------------------------------------------------")
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()
    
    sql = """
    DELETE FROM  sunbiz_parcel_owners where d_county = '""" + county_upper + """';

    INSERT INTO sunbiz_parcel_owners 
        SELECT c.nm, c.corporate_id, c.corporate_name, c.corp_add1, c.corp_add2, c.corp_city, c.corp_state, c.corp_zip, c.mail_add1, c.mail_add2, c.mail_city, c.mail_state, c.mail_zip, c.ra_name, c.ra_add1, c.ra_city, c.ra_state, c.ra_zip, c.c1_title, c.c1_name, c.c1_add1, c.c1_city, c.c1_state, c.c1_zip, c.c2_title, c.c2_name, c.c2_add1, c.c2_city, c.c2_state, c.c2_zip, c.c3_title, c.c3_name, c.c3_add1, c.c3_city, c.c3_state, c.c3_zip, c.c4_title, c.c4_name, c.c4_add1, c.c4_city, c.c4_state, c.c4_zip, c.c5_title, c.c5_name, c.c5_add1, c.c5_city, c.c5_state, c.c5_zip, c.c6_title, c.c6_name, c.c6_add1, c.c6_city, c.c6_state, c.c6_zip, c.corporate_name2,
        p.d_county
        FROM parcels_std_project AS p 
        INNER JOIN 
            (SELECT sunbiz_lookup.corporate_name as nm, sunbiz_processed.* FROM sunbiz_lookup 
            JOIN sunbiz_processed USING (corporate_id)) as c 
        ON p.o_name1 = c.nm
        WHERE p.d_county = '""" + county_upper + """'
        GROUP BY c.nm, c.corporate_id, c.corporate_name, c.corp_add1, c.corp_add2, c.corp_city, c.corp_state, c.corp_zip,
            c.mail_add1, c.mail_add2, c.mail_city, c.mail_state, c.mail_zip, c.ra_name, c.ra_add1, c.ra_city, c.ra_state, c.ra_zip,
            c.c1_title, c.c1_name, c.c1_add1, c.c1_city, c.c1_state, c.c1_zip, c.c2_title, c.c2_name, c.c2_add1, c.c2_city, c.c2_state, c.c2_zip,
            c.c3_title, c.c3_name, c.c3_add1, c.c3_city, c.c3_state, c.c3_zip, c.c4_title, c.c4_name, c.c4_add1, c.c4_city, c.c4_state, c.c4_zip,
            c.c5_title, c.c5_name, c.c5_add1, c.c5_city, c.c5_state, c.c5_zip, c.c6_title, c.c6_name, c.c6_add1, c.c6_city, c.c6_state, c.c6_zip,
            c.corporate_name2, p.d_county;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()

    # Get the matches that do not come from the lookup table
    # We will be deleting dupes, although it is assumed a match may not be happening anyway
    sql = """
    
    INSERT INTO sunbiz_parcel_owners 
        SELECT c.corporate_name2, c.corporate_id, c.corporate_name, c.corp_add1, c.corp_add2, c.corp_city, c.corp_state, c.corp_zip,
        c.mail_add1, c.mail_add2, c.mail_city, c.mail_state, c.mail_zip, c.ra_name, c.ra_add1, c.ra_city, c.ra_state, c.ra_zip,
        c.c1_title, c.c1_name, c.c1_add1, c.c1_city, c.c1_state, c.c1_zip, c.c2_title, c.c2_name, c.c2_add1, c.c2_city, c.c2_state, c.c2_zip,
        c.c3_title, c.c3_name, c.c3_add1, c.c3_city, c.c3_state, c.c3_zip, c.c4_title, c.c4_name, c.c4_add1, c.c4_city, c.c4_state, c.c4_zip,
        c.c5_title, c.c5_name, c.c5_add1, c.c5_city, c.c5_state, c.c5_zip, c.c6_title, c.c6_name, c.c6_add1, c.c6_city, c.c6_state, c.c6_zip,
        c.corporate_name2,
        '""" + county_upper + """'
        FROM
        sunbiz_processed as c, 
        (SELECT o_name1 FROM parcels_std_project WHERE d_county = '""" + county_upper + """' GROUP BY o_name1) as p WHERE c.corporate_name2 = p.o_name1
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # delete dupes
    sql = """
    DELETE FROM sunbiz_parcel_owners 
        WHERE ctid = ANY(ARRAY(SELECT ctid 
        FROM (SELECT row_number() OVER (PARTITION BY corporate_id), ctid 
            FROM sunbiz_parcel_owners) x 
            WHERE x.row_number > 1));
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # this is 20x slower! could be more didn't let it finish!
    sql = """
    DELETE
        FROM sunbiz_parcel_owners
        WHERE  ctid NOT IN
        (SELECT  MIN(dup.ctid)
        FROM   sunbiz_parcel_owners As dup
        GROUP BY  dup.corporate_id);
    """

    # close communication with the database
    cursor.close()
    connection.close()

    
# ===============================================================================================
#  UPDATE SAUNDERS SALES NEW TABLE
#  2023-06-13 - updating code and comments
#  
#
#  Original comment - delete existing data and insert new data from parcels_<county>
#  2023-06-13 - I don't see any deleting, just adding to records. Only deleting is removing duplicate records (I think) 
# ===============================================================================================
# 
def update_saunders_sales_new(county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION update_saunders_sales_new(county)")
    print("----------------------------------------------------------------------")
    
    connection = psycopg2.connect(pg_connection)

    cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()

    # Delete existing parcels
    print('UPDATING ',county, 'saunders sales new tables......')
    
    # NOW WE ARE TRUNCATING!
    sql = """
    TRUNCATE saunders_sales_new
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()   

    # WHERE
    #   -- (sale.sale1_bk != agg.sale1_bk AND sale.sale1_pg != agg.sale1_pg AND sale.sale1_docnum != agg.sale1_docnum) AND
    #    -- query: land sales statwide 49+ ac $125k
    #    -- filter out condos and multi-family
    sql = """
    INSERT INTO saunders_sales_new 
        (ogc_fid, wkb_geometry, pin_arr, sale1_bk, sale1_pg, 
        sale1_docnum, d_county, sale1_date, sale1_amt, sale1_grantor, 
        acres_gis, o_name1, o_name2, o_address1, o_address2, 
        o_city, o_state, o_zipcode, o_country, s_address, 
        s_city, s_zipcode, mrkt_bld_sum, mrkt_tot_sum, luse_arr, 
        luse_d_arr, lusedor_arr, lusedor_d_arr, e_created, e_created_by, 
        category, proptype, search_type)
    SELECT agg.ogc_fid, agg.wkb_geometry, agg.pin_arr, agg.sale1_bk, agg.sale1_pg, 
        agg.sale1_docnum, agg.d_county, agg.sale1_date, agg.sale1_amt, agg.sale1_grantor, 
        agg.acres_gis, agg.o_name1, agg.o_name2, agg.o_address1, agg.o_address2, 
        agg.o_city, agg.o_state, agg.o_zipcode, agg.o_country, agg.s_address, 
        agg.s_city, agg.s_zipcode, agg.mrkt_bld_sum, agg.mrkt_tot_sum, agg.luse_arr, 
        agg.luse_d_arr, agg.lusedor_arr, agg.lusedor_d_arr, CURRENT_DATE, 'SCRIPT', 
        'Not_Reviewed', '', 'FL_LARGE_LAND'
    FROM saunders_agg_sales as agg LEFT OUTER JOIN saunders_sales_new as sale ON agg.ogc_fid = sale.ogc_fid
    WHERE 
        sale.ogc_fid is NULL AND
        agg.sale1_date >= '2022-01-01' AND 
        agg.sale1_amt >= 125000 AND
        agg.acres_gis > 49 AND
        '08' != ANY (agg.lusedor_arr) AND
        '04' != ANY (agg.lusedor_arr) ;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()

    sql = """
    INSERT INTO saunders_sales_new (ogc_fid, wkb_geometry, pin_arr, sale1_bk, sale1_pg, sale1_docnum, d_county, sale1_date, sale1_amt, sale1_grantor, acres_gis, o_name1, o_name2,
        o_address1, o_address2, o_city, o_state, o_zipcode, o_country, s_address, s_city, s_zipcode, mrkt_bld_sum, mrkt_tot_sum, luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr,
        e_created, e_created_by, category, proptype, search_type)
    SELECT agg.ogc_fid, agg.wkb_geometry, agg.pin_arr, agg.sale1_bk, agg.sale1_pg, agg.sale1_docnum, 
        agg.d_county, agg.sale1_date, agg.sale1_amt, agg.sale1_grantor, agg.acres_gis, agg.o_name1, agg.o_name2,
        agg.o_address1, agg.o_address2, agg.o_city, agg.o_state, agg.o_zipcode, agg.o_country, 
        agg.s_address, agg.s_city, agg.s_zipcode, agg.mrkt_bld_sum, agg.mrkt_tot_sum, agg.luse_arr, agg.luse_d_arr, agg.lusedor_arr, agg.lusedor_d_arr, 
        CURRENT_DATE, 'SCRIPT', 'Not_Reviewed', 'Citrus', 'FL_CITRUS'
        FROM saunders_agg_sales as agg LEFT OUTER JOIN saunders_sales_new as sale ON agg.ogc_fid = sale.ogc_fid
        WHERE 
        sale.ogc_fid is NULL AND	
        -- query: Citrus (66) statewide 19+ ac $100k
        agg.sale1_date >= '2022-01-01' AND 
        agg.sale1_amt >= 100000 AND
        agg.acres_gis >= 19 AND
        '66' = ANY (agg.lusedor_arr);
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()

    sql = """
    INSERT INTO saunders_sales_new (ogc_fid, wkb_geometry, pin_arr, sale1_bk, sale1_pg, sale1_docnum, d_county, sale1_date, sale1_amt, sale1_grantor, acres_gis, o_name1, o_name2,
        o_address1, o_address2, o_city, o_state, o_zipcode, o_country, s_address, s_city, s_zipcode, mrkt_bld_sum, mrkt_tot_sum, luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr,
        e_created, e_created_by, category, proptype, search_type)
    SELECT agg.ogc_fid, agg.wkb_geometry, agg.pin_arr, agg.sale1_bk, agg.sale1_pg, agg.sale1_docnum, 
        agg.d_county, agg.sale1_date, agg.sale1_amt, agg.sale1_grantor, agg.acres_gis, agg.o_name1, agg.o_name2,
        agg.o_address1, agg.o_address2, agg.o_city, agg.o_state, agg.o_zipcode, agg.o_country, 
        agg.s_address, agg.s_city, agg.s_zipcode, agg.mrkt_bld_sum, agg.mrkt_tot_sum, agg.luse_arr, agg.luse_d_arr, agg.lusedor_arr, agg.lusedor_d_arr, 
        CURRENT_DATE, 'SCRIPT', 'Not_Reviewed', '', 'POLK_COMMERCIAL_LARGE'
        FROM saunders_agg_sales as agg LEFT OUTER JOIN saunders_sales_new as sale ON agg.ogc_fid = sale.ogc_fid
        WHERE 
        sale.ogc_fid is NULL AND	
        -- query: Commercial (2-49 & 70-79) large acreage $400k Polk
        agg.sale1_date > '2022-01-01' AND 
        agg.sale1_amt >= 400000 AND
        agg.acres_gis >= 9 AND
        agg.d_county = 'POLK' AND
        (
        (replace(agg.lusedor_arr[1], ' ', '') NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99')) OR 
        (replace(agg.lusedor_arr[2], ' ', '') NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99')) OR 
        (replace(agg.lusedor_arr[3], ' ', '') NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99')) OR 
        (replace(agg.lusedor_arr[4], ' ', '') NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99')) OR 
        (replace(agg.lusedor_arr[5], ' ', '') NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99')) OR 
        (replace(agg.lusedor_arr[6], ' ', '') NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99'))
        );
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # Criteria: Review WHERE clause
    # Getting sales direct from parcels_std_project
    # TODO: Switch to saunders, right?
    # TODO: Add selecting using d_state
    # QUESTION: Only gets Polk - is that what we want?
    sql = """
    -- WITH AGGREGATE - commercial small
    INSERT INTO saunders_sales_new (wkb_geometry, pin_arr, sale1_bk, sale1_pg, sale1_docnum, d_county, sale1_date, sale1_amt, sale1_grantor, acres_gis, o_name1, o_name2,
        o_address1, o_address2, o_city, o_state, o_zipcode, o_country, s_address, s_city, s_zipcode, mrkt_bld_sum, mrkt_tot_sum, luse_arr, luse_d_arr, lusedor_arr, lusedor_d_arr,
        e_created, e_created_by, category, proptype, search_type)
    SELECT 
        ST_UNION(agg.wkb_geometry) as wkb_geometry, 
        array_agg(agg.pin) as pin_arr,
        agg.sale1_bk, agg.sale1_pg, agg.sale1_docnum, 
        max(agg.d_county), 
        agg.sale1_date, 
        max(agg.sale1_amt), 
        max(agg.sale1_grantor), 
        round(SUM(ST_AREA(agg.wkb_geometry)) / 4046.85642) AS acres_gis, 
        agg.o_name1, min(agg.o_name2),
        min(agg.o_address1),  min(agg.o_address2),  min(agg.o_city),  min(agg.o_state),  min(agg.o_zipcode),  min(agg.o_country), 
        min(agg.s_address),  min(agg.s_city),  min(agg.s_zipcode), sum(agg.mrkt_bld), sum(agg.mrkt_tot), 
        array_agg(agg.luse), array_agg(agg.luse_d), array_agg(agg.lusedor), array_agg(agg.lusedor_d), 
        CURRENT_DATE, 'SCRIPT', 'Not_Reviewed', '', 'POLK_COMMERCIAL_SMALL'
    FROM parcels_std_project as agg LEFT OUTER JOIN saunders_sales_new as sale ON agg.ogc_fid = sale.ogc_fid
    WHERE 
        sale.ogc_fid is NULL AND	
        -- query: Commercial (2-49 & 70-79) parcel search < 9 acres $400k Polk
        agg.sale1_date >= '2022-01-01' AND 
        agg.sale1_amt >= 400000 AND
        agg.acres_gis < 9 AND
        agg.d_county = 'POLK' AND
        lusedor NOT IN ('00','01','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99') AND
        agg.o_name1 != ''
    GROUP BY 
        agg.o_name1, agg.sale1_bk, agg.sale1_pg, agg.sale1_docnum, agg.sale1_date
        ;
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()

    # delete dupes
    sql = """
    DELETE FROM saunders_sales_new 
        WHERE ctid = ANY(ARRAY(SELECT ctid 
        FROM (SELECT row_number() OVER (PARTITION BY sale1_bk,sale1_pg,sale1_docnum,sale1_date), ctid 
            FROM saunders_sales_new order by e_created) x 
            WHERE x.row_number > 1));
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()
    
    # close communication with the database
    cursor.close()
    connection.close()

    
# ===============================================================================================
#  DUMP PARCELS
#  - 
# ===============================================================================================
def dump_parcels(county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION dump_parcels(county)")
    print("----------------------------------------------------------------------")
    
    #connection = psycopg2.connect(pg_connection)

    #cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
        
    county_lower = county.lower()

    mycmd = pg_psql + """ -c "DROP TABLE parcels_""" + county_lower + """_temp " """
    os.system(mycmd)

    # temp hack
    if county == 'a_ga_attom' :
        mycmd = pg_psql + """ -c "CREATE TABLE parcels_""" + county_lower + """_temp AS (SELECT * FROM parcels_std_saunders WHERE d_state IN ('AL','GA'))" """
    else :
        mycmd = pg_psql + """ -c "CREATE TABLE parcels_""" + county_lower + """_temp AS (SELECT * FROM parcels_std_project WHERE d_county IN ('""" + county_upper + """'))" """
    
    os.system(mycmd)    

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/parcels_""" + county_lower + """_temp.backup" --table "\"temp\".\"parcels_""" + county_lower + """_temp\"" gisdev"""
    os.system(mycmd)

    mycmd = pg_psql + """ -c "DROP TABLE parcels_""" + county_lower + """_temp " """
    os.system(mycmd)
    
# ===============================================================================================
#  DUMP AGGREGATES
#  - 
# ===============================================================================================
def dump_agg_tables(state,county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION dump_agg_tables(county)")
    print("----------------------------------------------------------------------")
    
    #connection = psycopg2.connect(pg_connection)

    #cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
    county_lower = county.lower()
    
    # if state is empty, we are assuming FL
    if len(state) == 0:
        #state = 'FL'
        print('NO STATE')
        exit()
        
    if county_upper == 'A_GA_ATTOM':
        state = 'GA'    
    
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()


    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_sales_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_single_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_sales_""" + county_lower + """ AS (SELECT * FROM saunders_agg_sales WHERE d_county IN ('""" + county_upper + """'))" """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_owner_""" + county_lower + """ AS (SELECT * FROM saunders_agg_owner WHERE d_county IN ('""" + county_upper + """'))" """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_owner_single_""" + county_lower + """ AS (SELECT * FROM saunders_agg_owner_single WHERE d_county IN ('""" + county_upper + """'))" """
    os.system(mycmd)

    # dump from gisdev
    # /usr/lib/postgresql/9.1/bin/pg_dump
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_agg_owner_""" + county_lower + """.backup" --table "\"temp\".\"saunders_agg_owner_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_agg_owner_single_""" + county_lower + """.backup" --table "\"temp\".\"saunders_agg_owner_single_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_agg_sales_""" + county_lower + """.backup" --table "\"temp\".\"saunders_agg_sales_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)    

    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_sales_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_single_""" + county_lower + """ " """
    os.system(mycmd)
    
    
# ===============================================================================================
#  DUMP AGGREGATES
#  - 
# ===============================================================================================
def dump_mapwise_agg_tables(state,county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION dump_agg_mapwise_tables(state,county)")
    print("----------------------------------------------------------------------")
    
    #connection = psycopg2.connect(pg_connection)

    #cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
    county_lower = county.lower()
    
    # if state is empty, we are assuming FL
    if len(state) == 0:
        #state = 'FL'
        print('NO STATE')
        #exit() 
    
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()


    mycmd = pg_psql + """ -c "DROP TABLE mapwise_agg_sales_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE mapwise_agg_owner_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE mapwise_agg_owner_single_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE mapwise_agg_sales_""" + county_lower + """ AS (SELECT * FROM mapwise_agg_sales WHERE d_county IN ('""" + county_upper + """'))" """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE mapwise_agg_owner_""" + county_lower + """ AS (SELECT * FROM mapwise_agg_owner WHERE d_county IN ('""" + county_upper + """'))" """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE mapwise_agg_owner_single_""" + county_lower + """ AS (SELECT * FROM mapwise_agg_owner_single WHERE d_county IN ('""" + county_upper + """'))" """
    os.system(mycmd)

    # dump from gisdev
    # /usr/lib/postgresql/9.1/bin/pg_dump
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/mapwise_agg_owner_""" + county_lower + """.backup" --table "\"temp\".\"mapwise_agg_owner_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/mapwise_agg_owner_single_""" + county_lower + """.backup" --table "\"temp\".\"mapwise_agg_owner_single_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/mapwise_agg_sales_""" + county_lower + """.backup" --table "\"temp\".\"mapwise_agg_sales_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)    

    mycmd = pg_psql + """ -c "DROP TABLE mapwise_agg_sales_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE mapwise_agg_owner_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE mapwise_agg_owner_single_""" + county_lower + """ " """
    os.system(mycmd)
    

def dump_saunders_agg_tables(state,county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION dump_agg_tables(county)")
    print("----------------------------------------------------------------------")
    
    #connection = psycopg2.connect(pg_connection)

    #cursor = connection.cursor()

    county_upper = county.upper()
    if county_upper == 'MIAMI_DADE' :
        county_upper = 'MIAMI-DADE'
    county_lower = county.lower()
    
    # if state is empty, we are assuming FL
    if len(state) == 0:
        #state = 'FL'
        print('NO STATE')
        exit()
        
    if county_upper == 'A_GA_ATTOM':
        state = 'GA'
        where_clause = "d_state IN ('AL','GA')"
    else:
        where_clause = """d_county = '""" + county_upper + """' AND d_state = 'FL'"""
        
    # TODO: update command references to always run with state
    # TODO: option to specify a state/county FIPS combo instead of a county and/or state
    state_upper = state.upper()
    state_lower = state.lower()


    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_sales_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_single_""" + county_lower + """ " """
    os.system(mycmd)
    
    #mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_sales_""" + county_lower + """ AS (SELECT * FROM saunders_agg_sales WHERE d_county IN ('""" + county_upper + """'))" """
    mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_sales_""" + county_lower + """ AS (SELECT * FROM saunders_agg_sales WHERE """ + where_clause + """)" """
    print(mycmd)
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_owner_""" + county_lower + """ AS (SELECT * FROM saunders_agg_owner WHERE """ + where_clause + """)" """
    print(mycmd)
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "CREATE TABLE saunders_agg_owner_single_""" + county_lower + """ AS (SELECT * FROM saunders_agg_owner_single WHERE """ + where_clause + """)" """
    print(mycmd)
    os.system(mycmd)

    # dump from gisdev
    # /usr/lib/postgresql/9.1/bin/pg_dump
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_agg_owner_""" + county_lower + """.backup" --table "\"temp\".\"saunders_agg_owner_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_agg_owner_single_""" + county_lower + """.backup" --table "\"temp\".\"saunders_agg_owner_single_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)

    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_agg_sales_""" + county_lower + """.backup" --table "\"temp\".\"saunders_agg_sales_""" + county_lower + """\"" gisdev"""
    os.system(mycmd)    

    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_sales_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_""" + county_lower + """ " """
    os.system(mycmd)
    
    mycmd = pg_psql + """ -c "DROP TABLE saunders_agg_owner_single_""" + county_lower + """ " """
    os.system(mycmd)
    
    
    
# ===============================================================================================
#  DUMP saunders_sales_new
#  - 
# ===============================================================================================
def dump_saunders_sales_new(county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION dump_saunders_sales_new(county)")
    print("----------------------------------------------------------------------")
    
    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/saunders_sales_new.backup" --table "\"customers\".\"saunders_sales_new\"" gisdev"""
    print('Executing: ',mycmd)
    os.system(mycmd)


# ===============================================================================================
#  DUMP sunbiz_owners
#  - 
# ===============================================================================================
def dump_sunbiz_owners(county) :
    """xx
    """

    print("----------------------------------------------------------------------")
    print("  FUNCTION dump_sunbiz_owners(county)")
    print("----------------------------------------------------------------------")
    
    # dump from gisdev    
    mycmd = """pg_dump --username postgres --format custom --verbose --file "/var/www/apps/mapwise/htdocs/x342/sunbiz_parcel_owners.backup" --table "\"gisdata\".\"sunbiz_parcel_owners\"" gisdev"""
    os.system(mycmd)
    
# ----------------------------------- END FUNCTIONS -----------------------------------



# =======================================================================================
# FDOR DATA
# - process raw FDOR data and get it into parcels_template_<county>
# - county is then ready to go straight into production OR is ready to be supplemented with additional sales info
# =======================================================================================
# This was for processing older FDOR versions of Broward
def process_raw_fdor_broward_FDOR_HISTORICAL(county) :

    print("----------------------------------------------------------------------")
    print("  FUNCTION process_raw_fdor(county)")
    print("----------------------------------------------------------------------")
    
    # change working directory
    os.chdir(pathProcessing)
    print('Current working directory: ',os.getcwd())

    county_upper = county.upper()
    county_lower = county.lower()

    if (county_upper == 'MIAMI_DADE') :
        county_upper = 'MIAMI-DADE'

    # Connect to postgres and open cursor
    connection = psycopg2.connect(pg_connection)
    #cursor = connection.cursor()

    # arg to cursor allows selection by column name
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

    
    #-----------------------------------------------------------------------------------------
    # Get FDOR COUNTY CODE FROM fdor_code_county table
    #-----------------------------------------------------------------------------------------    
    sql = """SELECT * FROM fdor_code_county WHERE d_county = '""" + county_upper + """';  """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # initialize variables that have info about the SHP from parcel_shp_fields
    rows = cursor.fetchall()
    for row in rows:
        print("COUNTY = ", row['d_county'])
        fdor_co_no = row['co_no']

    #-----------------------------------------------------------------------------------------
    # Get FDOR file names FROM parcels_fdor_raw_files table
    #-----------------------------------------------------------------------------------------    
    sql = """SELECT * FROM parcels_fdor_raw_files WHERE county = '""" + county_upper + """';  """
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # initialize variables that have info about the SHP from parcel_shp_fields
    rows = cursor.fetchall()
    for row in rows:
        print("COUNTY = ", row['county'])
        file_2008 = row['file_2008']
        file_2009 = row['file_2009']
        file_2010 = row['file_2010']
        file_2011 = row['file_2011']
        file_2012 = row['file_2012']
        file_2013 = row['file_2013']
        file_2014 = row['file_2014']
        file_2015 = row['file_2015']
        file_2016 = row['file_2016']
        file_2017 = row['file_2017']
    

    
    #-----------------------------------------------------------------------------------------
    # Process older sales
    # For each FDOR year, create standardized sales files to load into postgres
    # e.g. L:\mapwise_dev\county\suwannee\processing\database\current\parcels_sales_2008
    # Once these are run once, except if its a preliminary file, the output files can be set to read only to save
    # processing time on larger counties and to eliminateissues if the source files dissapear
    #-----------------------------------------------------------------------------------------

    mycmd = """/srv/projects\\tools\\python\\parcel_processing\\a_FDOR\\fdor_2008_sales.py """ + county_lower + """ """ + file_2008
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/projects\\tools\\python\\parcel_processing\\a_FDOR\\fdor_2009_sales.py """ + county_lower + """ """ + file_2009
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/projects\\tools\\python\\parcel_processing\\a_FDOR\\fdor_2010_sales.py """ + county_lower + """ """ + file_2010
    print(mycmd)
    os.system(mycmd)

    mycmd = """/srv/projects\\tools\\python\\parcel_processing\\a_FDOR\\fdor_2011_sales.py """ + county_lower + """ """ + file_2011
    print(mycmd)
    os.system(mycmd)



    #-----------------------------------------------------------------------------------------    
    # load sales data into pg tables
    # ISSUE - 2014-01-14 - do we need separate tables? They all have the same schema, right?
    # Might make troubleshooting easier the first time the fdor sales data is processed
    #-----------------------------------------------------------------------------------------
    sql = """
        TRUNCATE parcels_fdor_sales_2008_temp;
        TRUNCATE parcels_fdor_sales_2009_temp;
        TRUNCATE parcels_fdor_sales_2010_temp;
        TRUNCATE parcels_fdor_sales_2011_temp;
        TRUNCATE parcels_fdor_sales_2012_temp;
        TRUNCATE parcels_fdor_sales_2013_temp;
        TRUNCATE parcels_fdor_sales_2014_temp;
        TRUNCATE parcels_fdor_sales_2015_temp;
        TRUNCATE parcels_fdor_sales_2016_temp;
        TRUNCATE parcels_fdor_sales_2017_temp;
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    sql = "\\copy parcels_fdor_sales_2008_temp from 'parcels_sales_2008.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2009_temp from 'parcels_sales_2009.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2010_temp from 'parcels_sales_2010.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)

    sql = "\\copy parcels_fdor_sales_2011_temp from 'parcels_sales_2011.txt' with delimiter as E'\\t' null as ''"
    print('SQL COMMAND: ', sql)
    mycmd = pg_psql + ' -c "' + sql + '"'
    os.system(mycmd)
    print(mycmd)  

    #-----------------------------------------------------------------------------------------
    # load older fdor sales into normalized table
    #-----------------------------------------------------------------------------------------

    sql = """
    TRUNCATE parcels_fdor_sales_normal_temp;
    TRUNCATE parcels_fdor_sales_denormal_temp;
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()
    
    # 2008 sale1    
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2008_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2008 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2008_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2009 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2009_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2009 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2009_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2010 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2010_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2010 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2010_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2011 sale1
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale1_amt, sale1_year, sale1_date, sale1_date_date, sale1_vac, sale1_typ, sale1_qual, sale1_multi, sale1_bk, sale1_pg, sale1_docnum
    FROM parcels_fdor_sales_2011_temp WHERE sale1_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()

    # 2011 sale2
    sql = """
    INSERT INTO parcels_fdor_sales_normal_temp
    (pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale_amt, sale_year, sale_date, sale_date_date, sale_vac, sale_typ, sale_qual, sale_multi, sale_bk, sale_pg, sale_docnum)
    SELECT pin, pin_clean, pin2, pin2_clean, altkey, altkey_clean, pin_fdor, sale2_amt, sale2_year, sale2_date, sale2_date_date, sale2_vac, sale2_typ, sale2_qual, sale2_multi, sale2_bk, sale2_pg, sale2_docnum
    FROM parcels_fdor_sales_2011_temp WHERE sale2_amt is not null 
    """    
    print(sql)
    cursor.execute(sql)
    connection.commit()


    #-----------------------------------------------------------------------------------------
    # individual county processing
    # load recent sales from web download into parcels_fdor_sales_normal_temp
    # if a county is not listed here, then we are just going with fdor sales
    #-----------------------------------------------------------------------------------------    
        
    if county_upper == 'LAFAYETTE' :

        # note we are extracting the last 4 chars of the date to get the year
        # split_part('abc~@~def~@~ghi', '~@~', 2)
        sql = """
        INSERT INTO parcels_fdor_sales_normal_temp
        (pin, sale_amt, sale_year, sale_date, sale_vac)
        SELECT pin, sale1_amt, CAST(split_part(sale1_date, '-', 1) as int) as sale_year, sale1_date, sale1_vac
        FROM raw_lafayette_sales_export 
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
        
      
        
    # for Grizzly counties (except Sumter) - last 3 sales are included, so its just a simple replace with new info for those records
    # do this after the sales denormalization process
            
    # dedupe normalized table
    sql = """
    DELETE FROM parcels_fdor_sales_normal_temp 
        WHERE ctid = ANY(ARRAY(SELECT ctid 
        FROM (SELECT row_number() OVER (PARTITION BY pin, pin_clean, sale_amt, sale_date, sale_bk, sale_pg, sale_docnum), ctid 
            FROM parcels_fdor_sales_normal_temp) x 
            WHERE x.row_number > 1));
    """
    print(sql)    
    cursor.execute(sql)
    connection.commit()

    # sometimes we need to use a different column other than pin to copy sales data into template
    # example is baker, which switched from clean pin to dashes - so we are using clean pin for sales
    if county_upper in ('BAKER','LEVY','MONROE','PUTNAM') :
        pin_col = 'pin_clean'
    else:
        pin_col = 'pin'
        
    # denormalize 
    # load normalized sales data into denormal table
    # Hair conservation note:
    # The select fields must mach the insert fields or you will get some errors that don't make sense!!!!
    sql = """INSERT INTO parcels_fdor_sales_denormal_temp 
    SELECT 
        sales_normal.""" + pin_col + """,
        Null,
        Null,
        Null,
        Null,
        Null,
        Null,
        -- section 1
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_amt ELSE NULL END) AS sale1_amt, 
        -- MAX(CASE WHEN sales_normal.i = 1 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_year ELSE NULL END) AS sale1_year,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_date ELSE NULL END) AS sale1_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_vac ELSE NULL END) AS sale1_vac,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_typ ELSE NULL END) AS sale1_typ,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_qual ELSE NULL END) AS sale1_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_bk ELSE NULL END) AS sale1_bk,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_pg ELSE NULL END) AS sale1_pg,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_docnum ELSE NULL END) AS sale1_docnum,
        MAX(CASE WHEN sales_normal.i = 1 THEN sales_normal.sale_grantor ELSE NULL END) AS sale1_grantor,
        Null,

        -- section 2
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_amt ELSE NULL END) AS sale2_amt,
        -- MAX(CASE WHEN sales_normal.i = 2 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_year ELSE NULL END) AS sale2_year,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_date ELSE NULL END) AS sale2_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_vac ELSE NULL END) AS sale2_vac,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_typ ELSE NULL END) AS sale2_typ,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_qual ELSE NULL END) AS sale2_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_bk ELSE NULL END) AS sale2_bk,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_pg ELSE NULL END) AS sale2_pg,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_docnum ELSE NULL END) AS sale2_docnum,
        MAX(CASE WHEN sales_normal.i = 2 THEN sales_normal.sale_grantor ELSE NULL END) AS sale2_grantor,
        Null,

        -- section 3
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_amt ELSE NULL END) AS sale3_amt,
        -- MAX(CASE WHEN sales_normal.i = 3 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_year ELSE NULL END) AS sale3_year,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_date ELSE NULL END) AS sale3_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_vac ELSE NULL END) AS sale3_vac,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_typ ELSE NULL END) AS sale3_typ,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_qual ELSE NULL END) AS sale3_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_bk ELSE NULL END) AS sale3_bk,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_pg ELSE NULL END) AS sale3_pg,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_docnum ELSE NULL END) AS sale3_docnum,
        MAX(CASE WHEN sales_normal.i = 3 THEN sales_normal.sale_grantor ELSE NULL END) AS sale3_grantor,
        Null,

        -- section 4
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_amt ELSE NULL END) AS sale4_amt,
        -- MAX(CASE WHEN sales_normal.i = 4 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_year ELSE NULL END) AS sale4_year,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_date ELSE NULL END) AS sale4_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_vac ELSE NULL END) AS sale4_vac,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_typ ELSE NULL END) AS sale4_typ,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_qual ELSE NULL END) AS sale4_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_bk ELSE NULL END) AS sale4_bk,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_pg ELSE NULL END) AS sale4_pg,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_docnum ELSE NULL END) AS sale4_docnum,
        MAX(CASE WHEN sales_normal.i = 4 THEN sales_normal.sale_grantor ELSE NULL END) AS sale4_grantor,
        Null,

        -- section 5
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_amt ELSE NULL END) AS sale5_amt,
        -- MAX(CASE WHEN sales_normal.i = 5 THEN CAST(EXTRACT(YEAR FROM sales_normal.sale_date) as int) ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_year ELSE NULL END) AS sale5_year,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_date ELSE NULL END) AS sale5_date,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_vac ELSE NULL END) AS sale5_vac,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_typ ELSE NULL END) AS sale5_typ,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_qual ELSE NULL END) AS sale5_qual,
        Null,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_bk ELSE NULL END) AS sale5_bk,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_pg ELSE NULL END) AS sale5_pg,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_docnum ELSE NULL END) AS sale5_docnum,
        MAX(CASE WHEN sales_normal.i = 5 THEN sales_normal.sale_grantor ELSE NULL END) AS sale5_grantor,
        Null         
        
        FROM
            (SELECT 
                """ + pin_col + """,
                --sale_date_date,
                sale_amt,
                sale_year,
                sale_date,
                sale_vac,
                sale_typ,
                sale_qual,
                sale_bk,
                sale_pg,
                sale_docnum,
                --multi,
                sale_grantor,
                --grantee,
                --row_number() OVER (PARTITION BY pin ORDER BY sale_date_date desc) AS i
                row_number() OVER (PARTITION BY """ + pin_col + """ ORDER BY sale_date desc) AS i
                FROM parcels_fdor_sales_normal_temp WHERE sale_date is not null
            ) AS sales_normal
            INNER JOIN 
                parcels_template_""" + county_lower + """ AS interim ON sales_normal.""" + pin_col + """ = interim.""" + pin_col + """
        GROUP BY sales_normal.""" + pin_col + """;"""
    
    print(sql)
    cursor.execute(sql)
    connection.commit()     

    # where we are using pin_clean, have to populate the column in the denormal table
    if county_upper in ('BAKER','LEVY','PUTNAM') :
        sql = """UPDATE parcels_fdor_sales_denormal_temp SET pin_clean = pin
        """    
        print(sql)
        cursor.execute(sql)
        connection.commit()
    
    # bring denormalized sales info into parcels_template
    sql = """UPDATE parcels_template_""" + county_lower + """ as interim
        SET -- all sales columns
        sale1_date = cast(denormal.sale1_date as text),
        sale1_year = denormal.sale1_year,
        sale1_amt = denormal.sale1_amt,
        sale1_typ = denormal.sale1_typ,
        sale1_vac = denormal.sale1_vac,
        sale1_qual = denormal.sale1_qual,
        sale1_multi = denormal.sale1_multi,
        sale1_bk = denormal.sale1_bk,
        sale1_pg = denormal.sale1_pg,
        sale1_docnum = denormal.sale1_docnum,
        sale1_grantor = denormal.sale1_grantor,
        
        sale2_date = cast(denormal.sale2_date as text),
        sale2_year = denormal.sale2_year,
        sale2_amt = denormal.sale2_amt,
        sale2_typ = denormal.sale2_typ,
        sale2_vac = denormal.sale2_vac,
        sale2_qual = denormal.sale2_qual,
        sale2_multi = denormal.sale2_multi,
        sale2_bk = denormal.sale2_bk,
        sale2_pg = denormal.sale2_pg,
        sale2_docnum = denormal.sale2_docnum,
        sale2_grantor = denormal.sale2_grantor,
        
        sale3_date = cast(denormal.sale3_date as text),
        sale3_year = denormal.sale3_year,
        sale3_amt = denormal.sale3_amt,
        sale3_typ = denormal.sale3_typ,
        sale3_vac = denormal.sale3_vac,
        sale3_qual = denormal.sale3_qual,
        sale3_multi = denormal.sale3_multi,
        sale3_bk = denormal.sale3_bk,
        sale3_pg = denormal.sale3_pg,
        sale3_docnum = denormal.sale3_docnum,
        sale3_grantor = denormal.sale3_grantor,

        sale4_date = cast(denormal.sale4_date as text),
        sale4_year = denormal.sale4_year,
        sale4_amt = denormal.sale4_amt,
        sale4_typ = denormal.sale4_typ,
        sale4_vac = denormal.sale4_vac,
        sale4_qual = denormal.sale4_qual,
        sale4_multi = denormal.sale4_multi,
        sale4_bk = denormal.sale4_bk,
        sale4_pg = denormal.sale4_pg,
        sale4_docnum = denormal.sale4_docnum,
        sale4_grantor = denormal.sale4_grantor,

        sale5_date = cast(denormal.sale5_date as text),
        sale5_year = denormal.sale5_year,
        sale5_amt = denormal.sale5_amt,
        sale5_typ = denormal.sale5_typ,
        sale5_vac = denormal.sale5_vac,
        sale5_qual = denormal.sale5_qual,
        sale5_multi = denormal.sale5_multi,
        sale5_bk = denormal.sale5_bk,
        sale5_pg = denormal.sale5_pg,
        sale5_docnum = denormal.sale5_docnum,
        sale5_grantor = denormal.sale5_grantor        
        
        FROM parcels_fdor_sales_denormal_temp as denormal
        WHERE interim.""" + pin_col + """ = denormal.""" + pin_col + """;""" 

    print(sql)
    cursor.execute(sql)
    connection.commit()


    
    # close communication with the database
    cursor.close()
    connection.close()


#--####################################################################################

print('\n-------------------------------\n')
# DEBUG
debug = 'True'
debug = 'False'

# define all text messages here
#
msgUsage = "Usage: parcels_convert <county> <date_stamp> <function> <data_date> <server> <state>"
msgInvalidCounty = "Invalid county -- "
msgInvalidPath = "Path does not exist -- "
msgInvalidFile = "File does not exist  -- "

#
# retrieve the required parameters
#
try:
    county = sys.argv[1].lower()
    date_stamp = sys.argv[2]
    myFunction = sys.argv[3]
    data_date = sys.argv[4]
    server = sys.argv[5].upper()
    try:
        state = sys.argv[6].upper()
    except:
        state = 'FL'
    
    
    #try:
    #    extraArgs = sys.argv[6]
    #except:
    #    pass
    
except:
    print(msgUsage)
    sys.exit(0)

print(server)

if server == 'GISDEV' :
    pg_connection = 'host=localhost port=5432 dbname=gisdev user=postgres password=galactic529'
    pg_psql = 'psql -d gisdev -U postgres '
    
elif server == 'GISLIB' :
    pg_connection = 'host=localhost port=5432 dbname=gislib user=postgres password=galactic529'
    pg_psql = 'psql -d gislib -U postgres '
    
    
else :
    print("must set server name")
    sys.exit(0)

county_upper = county.upper()
county_lower = county.lower()
state_upper = state.upper()
state_lower = state.lower()

# Check for miami-dade special handling of dash vs. underscore required
if (county_upper == 'MIAMI-DADE') :
    county = 'miami_dade'
    county_upper = 'MIAMI-DADE'

if county_lower == 'a_ga_attom' :
    state = 'GA'
    state_upper = state.upper()
    state_lower = state.lower()
    
    pathTopDir = ''.join(['/srv/mapwise_dev/county/a_GA_attom'])
    print('pathTopDir: ',pathTopDir)

    pathProcessing = ''.join(['/srv/mapwise_dev/county/a_GA_attom/current'])
    print('pathProcessing: ',pathProcessing)

    pathSourceData = ''.join(['/srv/mapwise_dev/county/a_GA_attom'])
    print('pathSourceData: ',pathSourceData)
else:
    pathTopDir = ''.join(['/srv/mapwise_dev/county/',county,'/processing/database'])
    print('pathTopDir: ',pathTopDir)

    pathProcessing = ''.join(['/srv/mapwise_dev/county/',county,'/processing/database/',date_stamp])
    print('pathProcessing: ',pathProcessing)

    pathSourceData = ''.join([pathProcessing,'/source_data'])
    print('pathSourceData: ',pathSourceData)

if debug == 'True' :
    print("dirname:",os.path.dirname(pathSourceData))
    print("isdir:",os.path.isdir(pathSourceData))

# check existance of pathSourceData
# if it doesn't exist, create it
if not os.path.isdir(pathSourceData) and myFunction != 'archive_parcel_data':
    print(msgInvalidPath,pathSourceData)
    #sys.exit(0)
    #os.makedirs(pathSourceData)

#=====================================================================
# CHECK WHICH FUNCTION TO CALL
#=====================================================================


if myFunction == 'process_raw_fdor' :
    process_raw_fdor(county)

if myFunction == 'archive_parcel_data' :
    archive_parcel_data(county, date_stamp)

if myFunction == 'drop_temp_tables' :
    drop_temp_tables(state,county)
    
if myFunction == 'drop_temp_tables_fdor' :
    drop_temp_tables_fdor(county) 
    
if myFunction == 'drop_tables' :
    drop_tables(county,state_upper)

if myFunction == 'load_parcels_template' :
    load_parcels_template(county)
    
if myFunction == 'load_join_process' :
    load_join_process(county,state_upper)
    
if myFunction == 'table_report' :
    table_report(county)
    
    
if myFunction == 'create_parcels_template' :
    create_parcels_template(county)

if myFunction == 'update_production' :
    update_production(state,county)

if myFunction == 'update_production_old2new' :
    update_production_old2new(county)

if myFunction == 'update_sale1q' :
    update_sale1q(county)

if myFunction == 'ogrinfo_shp' :
    ogrinfo_shp(county)

if myFunction == 'process_shapefile' :
    # county, repair=TRUE or FALSE
    process_shapefile(county,'TRUE')

if myFunction == 'update_fmo_sets' :
    update_fmo_sets(county)
    
if myFunction == 'update_shp_temp_gislib' :
    update_shp_temp_gislib(county)

if myFunction == 'export_shapefile' :
    export_shapefile(county)       

if myFunction == 'update_agg_tables' :
    update_agg_tables(state,county)
    
# new 11/19/23
if myFunction == 'update_agg_tables_mapwise' :
    update_agg_tables_mapwise(state,county)
    
# new 11/19/2023
if myFunction == 'update_agg_tables_saunders' :
    update_agg_tables_saunders(state,county)

if myFunction == 'dump_parcels' :
    dump_parcels(county)

# switch this to dump_agg_saunders_tables when we have mapwise version working
if myFunction == 'dump_agg_tables' :
    dump_agg_tables(state,county)
    
# dump mapwise agg tables
if myFunction == 'dump_mapwise_agg_tables' :
    dump_mapwise_agg_tables(state,county)
    
if myFunction == 'dump_saunders_agg_tables' :
    dump_saunders_agg_tables(state,county)

if myFunction == 'update_saunders_sales_new' :
    update_saunders_sales_new(county) 

if myFunction == 'update_sunbiz_owners' :
    update_sunbiz_owners(county)

if myFunction == 'update_watch_list' :
    update_watch_list(county)    

if myFunction == 'dump_sunbiz_owners' :
    dump_sunbiz_owners(county)

if myFunction == 'dump_saunders_sales_new' :
    dump_saunders_sales_new(county)   

    

if myFunction == 'process_raw_charlotte' :
    process_raw_charlotte()
    
if myFunction == 'process_raw_collier' :
    process_raw_collier()

if myFunction == 'process_raw_desoto' :
    process_raw_dixie()
    
if myFunction == 'process_raw_dixie' :
    process_raw_dixie()

if myFunction == 'process_raw_duval' :
    process_raw_duval()

if myFunction == 'process_raw_franklin' :
    process_raw_glades()
    
if myFunction == 'process_raw_glades' :
    process_raw_glades()
    
if myFunction == 'process_raw_hardee' :
    process_raw_hardee()

if myFunction == 'process_raw_hendry' :
    process_raw_hendry()

if myFunction == 'process_raw_lee' :
    process_raw_lee()

if myFunction == 'process_raw_okeechobee' :
    process_raw_okeechobee()

if myFunction == 'process_raw_orange' :
    process_raw_orange()
    
if myFunction == 'process_raw_osceola' :
    process_raw_osceola()    

if myFunction == 'process_raw_polk' :
    process_raw_polk()

if myFunction == 'process_raw_volusia' :
    process_raw_volusia()
    
if myFunction == 'process_raw_washington_fdor' :
    process_raw_washington_fdor()

if myFunction == 'process_raw_washington_scrape' :
    process_raw_washington_scrape()


if myFunction == 'process_raw_attom_INIT' :
    process_raw_attom_INIT()


#=====================================================================
# do_all_mapwise
#=====================================================================
if myFunction == 'do_all_mapwise' :

    # download files
    #mycmd = '/srv/projects/Data_Development/05_Parcels/parcels/processes/scripts_county/polk/polk_3_download_attributes.bat'
    #print 'Executing: ', mycmd
    #os.system(mycmd)
    
    state_upper = 'FL'
    state = 'FL'
    
    # change working directory
    if county.lower() == 'a_ga_attom':
        path = '/srv/mapwise_dev/county/a_GA_attom/current'
        state_upper = 'GA'
        state = 'GA'
    else:
        path = '/srv/mapwise_dev/county/' + county.lower() + '/processing/database/current'
        
    os.chdir(path)

    drop_tables(county,state_upper)

    # 8/31/2022 None of these use the county argument!
    # deleting from the code
    if (county.lower() == 'alachua') :
        print('CALL FUNCTION process_raw_alachua()')
        process_raw_alachua()
        
    if (county.lower() == 'baker') :
        print('CALL FUNCTION process_raw_baker()')
        process_raw_baker()

    if (county.lower() == 'bay') :
        print('CALL FUNCTION process_raw_bay()')
        process_raw_bay()

    if (county.lower() == 'bradford') :
        print('CALL FUNCTION process_raw_bradford()')
        process_raw_bradford()

    if (county.lower() == 'brevard') :
        print('CALL FUNCTION process_raw_brevard()')
        process_raw_brevard()
        
    if (county.lower() == 'broward') :
        print('CALL FUNCTION process_raw_broward()')
        process_raw_broward()

    if (county.lower() == 'calhoun') :
        print('CALL FUNCTION process_raw_calhoun()')
        process_raw_calhoun()        
        
    if (county.lower() == 'charlotte') :
        print('CALL FUNCTION process_raw_charlotte()')
        process_raw_charlotte()

    if (county.lower() == 'citrus') :
        print('CALL FUNCTION process_raw_citrus()')
        process_raw_citrus()
        
    if (county.lower() == 'clay') :
        print('CALL FUNCTION process_raw_clay()')
        process_raw_clay()
        
    if (county.lower() == 'collier') :
        print('CALL FUNCTION process_raw_collier()')
        process_raw_collier()

    if (county.lower() == 'columbia') :
        print('CALL FUNCTION process_raw_columbia()')
        process_raw_columbia()        

    if (county.lower() == 'desoto') :
        print('CALL FUNCTION process_raw_desoto()')
        process_raw_desoto()     
        
    if (county.lower() == 'dixie') :
        print('CALL FUNCTION process_raw_dixie()')
        process_raw_dixie()     

    if (county.lower() == 'duval') :
        print('CALL FUNCTION process_raw_duval()')
        process_raw_duval()

    if (county.lower() == 'escambia') :
        print('CALL FUNCTION process_raw_escambia()')
        process_raw_escambia()

    if (county.lower() == 'flagler') :
        print('CALL FUNCTION process_raw_flagler()')
        process_raw_flagler()
        
    if (county.lower() == 'franklin') :
        print('CALL FUNCTION process_raw_franklin()')
        #process_raw_franklin()
        process_raw_fdor_franklin()

    if (county.lower() == 'gadsden') :
        print('CALL FUNCTION process_raw_gadsden()')
        process_raw_gadsden()

    if (county.lower() == 'gilchrist') :
        print('CALL FUNCTION process_raw_gilchrist()')
        process_raw_gilchrist()
        
    if (county.lower() == 'glades') :
        print('CALL FUNCTION process_raw_glades()')
        process_raw_glades()

    if (county.lower() == 'gulf') :
        print('CALL FUNCTION process_raw_gulf()')
        process_raw_gulf()

    if (county.lower() == 'hamilton') :
        print('CALL FUNCTION process_raw_hamilton()')
        process_raw_hamilton()        
        
    if (county.lower() == 'hardee') :
        print('CALL FUNCTION process_raw_hardee()')
        process_raw_hardee()

    if (county.lower() == 'hendry') :
        print('CALL FUNCTION process_raw_hendry()')
        process_raw_hendry()

    if (county.lower() == 'hernando') :
        print('CALL FUNCTION process_raw_hernando()')
        process_raw_hernando()        

    if (county.lower() == 'highlands') :
        print('CALL FUNCTION process_raw_highlands()')
        process_raw_highlands()
        
    if (county.lower() == 'hillsborough') :
        print('CALL FUNCTION process_raw_hillsborough()')
        process_raw_hillsborough()

    if (county.lower() == 'holmes') :
        print('CALL FUNCTION process_raw_holmes()')
        process_raw_holmes()

    if (county.lower() == 'indian_river') :
        print('CALL FUNCTION process_raw_indian_river()')
        process_raw_indian_river()

    if (county.lower() == 'jackson') :
        print('CALL FUNCTION process_raw_jackson()')
        process_raw_jackson()

    if (county.lower() == 'jefferson') :
        print('CALL FUNCTION process_raw_jefferson()')
        process_raw_jefferson()

    if (county.lower() == 'lafayette') :
        print('CALL FUNCTION process_raw_lafayette()')
        process_raw_lafayette()

    if (county.lower() == 'lake') :
        print('CALL FUNCTION process_raw_lake()')
        process_raw_lake()       
        
    if (county.lower() == 'lee') :
        print('CALL FUNCTION process_raw_lee()')
        process_raw_lee()

    if (county.lower() == 'leon') :
        print('CALL FUNCTION process_raw_leon()')
        process_raw_leon()

    if (county.lower() == 'levy') :
        print('CALL FUNCTION process_raw_levy()')
        process_raw_levy()           

    if (county.lower() == 'liberty') :
        print('CALL FUNCTION process_raw_liberty()')
        process_raw_liberty()         

    if (county.lower() == 'madison') :
        print('CALL FUNCTION process_raw_madison()')
        process_raw_madison()              

    if (county.lower() == 'manatee') :
        print('CALL FUNCTION process_raw_manatee()')
        process_raw_manatee()

    if (county.lower() == 'marion') :
        print('CALL FUNCTION process_raw_marion()')
        process_raw_marion()        
        
    if (county.lower() == 'martin') :
        print('CALL FUNCTION process_raw_martin()')
        process_raw_martin()        

    if (county.lower() == 'miami_dade') :
        print('CALL FUNCTION process_raw_miami_dade()')
        process_raw_miami_dade()
        #print 'CALL FUNCTION process_raw_fdor_miami_dade()'
        #process_raw_fdor_miami_dade()
        
    if (county.lower() == 'monroe') :
        print('CALL FUNCTION process_raw_monroe()')
        process_raw_monroe()

    if (county.lower() == 'nassau') :
        print('CALL FUNCTION process_raw_nassau()')
        process_raw_nassau()

    if (county.lower() == 'okaloosa') :
        print('CALL FUNCTION process_raw_okaloosa()')
        process_raw_okaloosa()        
        
    if (county.lower() == 'okeechobee') :
        print('CALL FUNCTION process_raw_okeechobee()')
        process_raw_okeechobee()

    if (county.lower() == 'orange') :
        print('CALL FUNCTION process_raw_orange()')
        process_raw_orange()        

    if (county.lower() == 'osceola') :
        print('CALL FUNCTION process_raw_osceola()')
        process_raw_osceola()        
    
    if (county.lower() == 'palm_beach') :
        #print 'CALL FUNCTION process_raw_palm_beach_RAW()'
        print('CALL FUNCTION process_raw_palm_beach()')
        process_raw_palm_beach()
        
    if (county.lower() == 'pasco') :
        print('CALL FUNCTION process_raw_pasco()')
        process_raw_pasco()

    if (county.lower() == 'pinellas') :
        print('CALL FUNCTION process_raw_pinellas()')
        process_raw_pinellas()        
        
    if (county.lower() == 'polk') :
        print('CALL FUNCTION process_raw_polk()')
        process_raw_polk()

    if (county.lower() == 'putnam') :
        print('CALL FUNCTION process_raw_putnam()')
        process_raw_putnam()
        
    if (county.lower() == 'santa_rosa') :
        print('CALL FUNCTION process_raw_santa_rosa()')
        process_raw_santa_rosa()
        
    if (county.lower() == 'sarasota') :
        print('CALL FUNCTION process_raw_sarasota()')
        process_raw_sarasota()

    if (county.lower() == 'seminole') :
        print('CALL FUNCTION process_raw_seminole()')
        process_raw_seminole()

    if (county.lower() == 'st_johns') :
        print('CALL FUNCTION process_raw_st_johns()')
        process_raw_st_johns()             

    if (county.lower() == 'st_lucie') :
        print('CALL FUNCTION process_raw_st_lucie()')
        process_raw_st_lucie()

    if (county.lower() == 'sumter') :
        print('CALL FUNCTION process_raw_sumter()')
        process_raw_sumter()        

    if (county.lower() == 'suwannee') :
        print('CALL FUNCTION process_raw_suwannee()')
        process_raw_suwannee()

    if (county.lower() == 'taylor') :
        print('CALL FUNCTION process_raw_taylor()')
        process_raw_taylor()

    if (county.lower() == 'union') :
        print('CALL FUNCTION process_raw_union()')
        process_raw_union()
        
    if (county.lower() == 'volusia') :
        print('CALL FUNCTION process_raw_volusia()')
        process_raw_volusia()

    if (county.lower() == 'wakulla') :
        print('CALL FUNCTION process_raw_wakulla()')
        process_raw_wakulla()

    if (county.lower() == 'walton') :
        print('CALL FUNCTION process_raw_walton()')
        process_raw_walton()         

    if (county.lower() == 'washington') :
        print('CALL FUNCTION process_raw_washington_fdor()')
        process_raw_washington_fdor()
        #print 'CALL FUNCTION process_raw_washington_scrape()'
        #process_raw_washington_scrape()

    if (county.lower() == 'sussex') :
        print('CALL FUNCTION process_raw_sussex()')
        process_raw_sussex()

    if (county.lower() == 'a_ga_attom') :
        print('CALL FUNCTION process_raw_attom(data_date)')
        # 9/2/2022
        process_raw_attom(data_date)
    
    #exit()
    
    load_join_process(county,state_upper)


    #exit()
    
    update_production(state,county)
    
    #update_sale1q(county)

    #exit()

    dump_parcels(county)

    
    # Update Aggregate tables
    
    # If not doing a_ga_attom, do saunders and mapwise.
    if county.lower() != 'a_ga_attom' :
        update_agg_tables_saunders(state,county)
        update_agg_tables_mapwise(state,county)
        
    # If doing a_ga_attom, only do saunders.
    if county.lower() == 'a_ga_attom' :
        update_agg_tables_saunders(state,county)

    # Update Aggregate tables
    
    # If not doing a_ga_attom, do saunders and mapwise.
    if county.lower() != 'a_ga_attom' :
        dump_saunders_agg_tables(state,county)
        dump_mapwise_agg_tables(state,county)
    
    # If doing a_ga_attom, only do saunders.
    if county.lower() == 'a_ga_attom' :
        dump_saunders_agg_tables(state,county)


    update_saunders_sales_new(county)

    update_sunbiz_owners(county)

    update_watch_list(county)    

    dump_sunbiz_owners(county)

    dump_saunders_sales_new(county)
    
    #drop_temp_tables(state,county)
    
